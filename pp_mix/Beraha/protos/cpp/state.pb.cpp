// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: state.proto

#include "state.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_state_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EigenMatrix_state_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_state_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EigenVector_state_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_state_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NrepState_state_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_state_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PPState_state_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_state_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StraussState_state_2eproto;
class EigenMatrixDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EigenMatrix> _instance;
} _EigenMatrix_default_instance_;
class EigenVectorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EigenVector> _instance;
} _EigenVector_default_instance_;
class StraussStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StraussState> _instance;
} _StraussState_default_instance_;
class NrepStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NrepState> _instance;
} _NrepState_default_instance_;
class PPStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PPState> _instance;
} _PPState_default_instance_;
class MultivariateMixtureStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultivariateMixtureState> _instance;
} _MultivariateMixtureState_default_instance_;
class UnivariateMixtureStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnivariateMixtureState> _instance;
} _UnivariateMixtureState_default_instance_;
class BernoulliMixtureStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BernoulliMixtureState> _instance;
} _BernoulliMixtureState_default_instance_;
static void InitDefaultsscc_info_BernoulliMixtureState_state_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BernoulliMixtureState_default_instance_;
    new (ptr) ::BernoulliMixtureState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BernoulliMixtureState_state_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BernoulliMixtureState_state_2eproto}, {
      &scc_info_EigenVector_state_2eproto.base,
      &scc_info_PPState_state_2eproto.base,}};

static void InitDefaultsscc_info_EigenMatrix_state_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EigenMatrix_default_instance_;
    new (ptr) ::EigenMatrix();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EigenMatrix_state_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EigenMatrix_state_2eproto}, {}};

static void InitDefaultsscc_info_EigenVector_state_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EigenVector_default_instance_;
    new (ptr) ::EigenVector();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EigenVector_state_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EigenVector_state_2eproto}, {}};

static void InitDefaultsscc_info_MultivariateMixtureState_state_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MultivariateMixtureState_default_instance_;
    new (ptr) ::MultivariateMixtureState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MultivariateMixtureState_state_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_MultivariateMixtureState_state_2eproto}, {
      &scc_info_EigenVector_state_2eproto.base,
      &scc_info_EigenMatrix_state_2eproto.base,
      &scc_info_PPState_state_2eproto.base,}};

static void InitDefaultsscc_info_NrepState_state_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NrepState_default_instance_;
    new (ptr) ::NrepState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NrepState_state_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NrepState_state_2eproto}, {}};

static void InitDefaultsscc_info_PPState_state_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PPState_default_instance_;
    new (ptr) ::PPState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PPState_state_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PPState_state_2eproto}, {
      &scc_info_StraussState_state_2eproto.base,
      &scc_info_NrepState_state_2eproto.base,}};

static void InitDefaultsscc_info_StraussState_state_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_StraussState_default_instance_;
    new (ptr) ::StraussState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StraussState_state_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StraussState_state_2eproto}, {}};

static void InitDefaultsscc_info_UnivariateMixtureState_state_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UnivariateMixtureState_default_instance_;
    new (ptr) ::UnivariateMixtureState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UnivariateMixtureState_state_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UnivariateMixtureState_state_2eproto}, {
      &scc_info_EigenVector_state_2eproto.base,
      &scc_info_PPState_state_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_state_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_state_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_state_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_state_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EigenMatrix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EigenMatrix, rows_),
  PROTOBUF_FIELD_OFFSET(::EigenMatrix, cols_),
  PROTOBUF_FIELD_OFFSET(::EigenMatrix, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EigenVector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EigenVector, size_),
  PROTOBUF_FIELD_OFFSET(::EigenVector, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StraussState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::StraussState, beta_),
  PROTOBUF_FIELD_OFFSET(::StraussState, gamma_),
  PROTOBUF_FIELD_OFFSET(::StraussState, r_),
  PROTOBUF_FIELD_OFFSET(::StraussState, birth_prob_),
  PROTOBUF_FIELD_OFFSET(::StraussState, birth_arate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NrepState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NrepState, u_),
  PROTOBUF_FIELD_OFFSET(::NrepState, p_),
  PROTOBUF_FIELD_OFFSET(::NrepState, tau_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PPState, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::PPState, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::PPState, pp_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MultivariateMixtureState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MultivariateMixtureState, ma_),
  PROTOBUF_FIELD_OFFSET(::MultivariateMixtureState, mna_),
  PROTOBUF_FIELD_OFFSET(::MultivariateMixtureState, mtot_),
  PROTOBUF_FIELD_OFFSET(::MultivariateMixtureState, a_means_),
  PROTOBUF_FIELD_OFFSET(::MultivariateMixtureState, na_means_),
  PROTOBUF_FIELD_OFFSET(::MultivariateMixtureState, a_precs_),
  PROTOBUF_FIELD_OFFSET(::MultivariateMixtureState, na_precs_),
  PROTOBUF_FIELD_OFFSET(::MultivariateMixtureState, a_jumps_),
  PROTOBUF_FIELD_OFFSET(::MultivariateMixtureState, na_jumps_),
  PROTOBUF_FIELD_OFFSET(::MultivariateMixtureState, clus_alloc_),
  PROTOBUF_FIELD_OFFSET(::MultivariateMixtureState, u_),
  PROTOBUF_FIELD_OFFSET(::MultivariateMixtureState, pp_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UnivariateMixtureState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UnivariateMixtureState, ma_),
  PROTOBUF_FIELD_OFFSET(::UnivariateMixtureState, mna_),
  PROTOBUF_FIELD_OFFSET(::UnivariateMixtureState, mtot_),
  PROTOBUF_FIELD_OFFSET(::UnivariateMixtureState, a_means_),
  PROTOBUF_FIELD_OFFSET(::UnivariateMixtureState, na_means_),
  PROTOBUF_FIELD_OFFSET(::UnivariateMixtureState, a_precs_),
  PROTOBUF_FIELD_OFFSET(::UnivariateMixtureState, na_precs_),
  PROTOBUF_FIELD_OFFSET(::UnivariateMixtureState, a_jumps_),
  PROTOBUF_FIELD_OFFSET(::UnivariateMixtureState, na_jumps_),
  PROTOBUF_FIELD_OFFSET(::UnivariateMixtureState, clus_alloc_),
  PROTOBUF_FIELD_OFFSET(::UnivariateMixtureState, u_),
  PROTOBUF_FIELD_OFFSET(::UnivariateMixtureState, pp_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BernoulliMixtureState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BernoulliMixtureState, ma_),
  PROTOBUF_FIELD_OFFSET(::BernoulliMixtureState, mna_),
  PROTOBUF_FIELD_OFFSET(::BernoulliMixtureState, mtot_),
  PROTOBUF_FIELD_OFFSET(::BernoulliMixtureState, a_probs_),
  PROTOBUF_FIELD_OFFSET(::BernoulliMixtureState, na_probs_),
  PROTOBUF_FIELD_OFFSET(::BernoulliMixtureState, a_jumps_),
  PROTOBUF_FIELD_OFFSET(::BernoulliMixtureState, na_jumps_),
  PROTOBUF_FIELD_OFFSET(::BernoulliMixtureState, clus_alloc_),
  PROTOBUF_FIELD_OFFSET(::BernoulliMixtureState, u_),
  PROTOBUF_FIELD_OFFSET(::BernoulliMixtureState, pp_state_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::EigenMatrix)},
  { 8, -1, sizeof(::EigenVector)},
  { 15, -1, sizeof(::StraussState)},
  { 25, -1, sizeof(::NrepState)},
  { 33, -1, sizeof(::PPState)},
  { 41, -1, sizeof(::MultivariateMixtureState)},
  { 58, -1, sizeof(::UnivariateMixtureState)},
  { 75, -1, sizeof(::BernoulliMixtureState)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_EigenMatrix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_EigenVector_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_StraussState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NrepState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PPState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MultivariateMixtureState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UnivariateMixtureState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BernoulliMixtureState_default_instance_),
};

const char descriptor_table_protodef_state_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013state.proto\"7\n\013EigenMatrix\022\014\n\004rows\030\001 \001"
  "(\r\022\014\n\004cols\030\002 \001(\r\022\014\n\004data\030\003 \003(\001\")\n\013EigenV"
  "ector\022\014\n\004size\030\001 \001(\r\022\014\n\004data\030\002 \003(\001\"_\n\014Str"
  "aussState\022\014\n\004beta\030\001 \001(\001\022\r\n\005gamma\030\002 \001(\001\022\t"
  "\n\001R\030\003 \001(\001\022\022\n\nbirth_prob\030\004 \001(\001\022\023\n\013birth_a"
  "rate\030\005 \001(\001\".\n\tNrepState\022\t\n\001u\030\001 \001(\001\022\t\n\001p\030"
  "\002 \001(\001\022\013\n\003tau\030\003 \001(\001\"_\n\007PPState\022&\n\rstrauss"
  "_state\030\001 \001(\0132\r.StraussStateH\000\022 \n\nnrep_st"
  "ate\030\002 \001(\0132\n.NrepStateH\000B\n\n\010pp_state\"\271\002\n\030"
  "MultivariateMixtureState\022\n\n\002ma\030\001 \001(\005\022\013\n\003"
  "mna\030\002 \001(\005\022\014\n\004mtot\030\003 \001(\005\022\035\n\007a_means\030\004 \003(\013"
  "2\014.EigenVector\022\036\n\010na_means\030\005 \003(\0132\014.Eigen"
  "Vector\022\035\n\007a_precs\030\006 \003(\0132\014.EigenMatrix\022\036\n"
  "\010na_precs\030\007 \003(\0132\014.EigenMatrix\022\035\n\007a_jumps"
  "\030\010 \001(\0132\014.EigenVector\022\036\n\010na_jumps\030\t \001(\0132\014"
  ".EigenVector\022\022\n\nclus_alloc\030\n \003(\005\022\t\n\001u\030\013 "
  "\001(\001\022\032\n\010pp_state\030\014 \001(\0132\010.PPState\"\267\002\n\026Univ"
  "ariateMixtureState\022\n\n\002ma\030\001 \001(\005\022\013\n\003mna\030\002 "
  "\001(\005\022\014\n\004mtot\030\003 \001(\005\022\035\n\007a_means\030\004 \001(\0132\014.Eig"
  "enVector\022\036\n\010na_means\030\005 \001(\0132\014.EigenVector"
  "\022\035\n\007a_precs\030\006 \001(\0132\014.EigenVector\022\036\n\010na_pr"
  "ecs\030\007 \001(\0132\014.EigenVector\022\035\n\007a_jumps\030\010 \001(\013"
  "2\014.EigenVector\022\036\n\010na_jumps\030\t \001(\0132\014.Eigen"
  "Vector\022\022\n\nclus_alloc\030\n \003(\005\022\t\n\001u\030\013 \001(\001\022\032\n"
  "\010pp_state\030\014 \001(\0132\010.PPState\"\367\001\n\025BernoulliM"
  "ixtureState\022\n\n\002ma\030\001 \001(\005\022\013\n\003mna\030\002 \001(\005\022\014\n\004"
  "mtot\030\003 \001(\005\022\035\n\007a_probs\030\004 \003(\0132\014.EigenVecto"
  "r\022\036\n\010na_probs\030\005 \003(\0132\014.EigenVector\022\035\n\007a_j"
  "umps\030\006 \001(\0132\014.EigenVector\022\036\n\010na_jumps\030\007 \001"
  "(\0132\014.EigenVector\022\022\n\nclus_alloc\030\n \003(\005\022\t\n\001"
  "u\030\013 \001(\001\022\032\n\010pp_state\030\014 \001(\0132\010.PPStateb\006pro"
  "to3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_state_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_state_2eproto_sccs[8] = {
  &scc_info_BernoulliMixtureState_state_2eproto.base,
  &scc_info_EigenMatrix_state_2eproto.base,
  &scc_info_EigenVector_state_2eproto.base,
  &scc_info_MultivariateMixtureState_state_2eproto.base,
  &scc_info_NrepState_state_2eproto.base,
  &scc_info_PPState_state_2eproto.base,
  &scc_info_StraussState_state_2eproto.base,
  &scc_info_UnivariateMixtureState_state_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_state_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_state_2eproto = {
  false, false, descriptor_table_protodef_state_2eproto, "state.proto", 1243,
  &descriptor_table_state_2eproto_once, descriptor_table_state_2eproto_sccs, descriptor_table_state_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_state_2eproto::offsets,
  file_level_metadata_state_2eproto, 8, file_level_enum_descriptors_state_2eproto, file_level_service_descriptors_state_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_state_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_state_2eproto)), true);

// ===================================================================

class EigenMatrix::_Internal {
 public:
};

EigenMatrix::EigenMatrix(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:EigenMatrix)
}
EigenMatrix::EigenMatrix(const EigenMatrix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&rows_, &from.rows_,
    static_cast<size_t>(reinterpret_cast<char*>(&cols_) -
    reinterpret_cast<char*>(&rows_)) + sizeof(cols_));
  // @@protoc_insertion_point(copy_constructor:EigenMatrix)
}

void EigenMatrix::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&rows_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&cols_) -
      reinterpret_cast<char*>(&rows_)) + sizeof(cols_));
}

EigenMatrix::~EigenMatrix() {
  // @@protoc_insertion_point(destructor:EigenMatrix)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EigenMatrix::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EigenMatrix::ArenaDtor(void* object) {
  EigenMatrix* _this = reinterpret_cast< EigenMatrix* >(object);
  (void)_this;
}
void EigenMatrix::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EigenMatrix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EigenMatrix& EigenMatrix::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EigenMatrix_state_2eproto.base);
  return *internal_default_instance();
}


void EigenMatrix::Clear() {
// @@protoc_insertion_point(message_clear_start:EigenMatrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  ::memset(&rows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cols_) -
      reinterpret_cast<char*>(&rows_)) + sizeof(cols_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EigenMatrix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 rows = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cols = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cols_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EigenMatrix::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EigenMatrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 rows = 1;
  if (this->rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rows(), target);
  }

  // uint32 cols = 2;
  if (this->cols() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cols(), target);
  }

  // repeated double data = 3;
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EigenMatrix)
  return target;
}

size_t EigenMatrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EigenMatrix)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double data = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 rows = 1;
  if (this->rows() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rows());
  }

  // uint32 cols = 2;
  if (this->cols() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cols());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EigenMatrix::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EigenMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  const EigenMatrix* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EigenMatrix>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EigenMatrix)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EigenMatrix)
    MergeFrom(*source);
  }
}

void EigenMatrix::MergeFrom(const EigenMatrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EigenMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.rows() != 0) {
    _internal_set_rows(from._internal_rows());
  }
  if (from.cols() != 0) {
    _internal_set_cols(from._internal_cols());
  }
}

void EigenMatrix::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EigenMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EigenMatrix::CopyFrom(const EigenMatrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EigenMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EigenMatrix::IsInitialized() const {
  return true;
}

void EigenMatrix::InternalSwap(EigenMatrix* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EigenMatrix, cols_)
      + sizeof(EigenMatrix::cols_)
      - PROTOBUF_FIELD_OFFSET(EigenMatrix, rows_)>(
          reinterpret_cast<char*>(&rows_),
          reinterpret_cast<char*>(&other->rows_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EigenMatrix::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EigenVector::_Internal {
 public:
};

EigenVector::EigenVector(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:EigenVector)
}
EigenVector::EigenVector(const EigenVector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:EigenVector)
}

void EigenVector::SharedCtor() {
  size_ = 0u;
}

EigenVector::~EigenVector() {
  // @@protoc_insertion_point(destructor:EigenVector)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EigenVector::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EigenVector::ArenaDtor(void* object) {
  EigenVector* _this = reinterpret_cast< EigenVector* >(object);
  (void)_this;
}
void EigenVector::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EigenVector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EigenVector& EigenVector::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EigenVector_state_2eproto.base);
  return *internal_default_instance();
}


void EigenVector::Clear() {
// @@protoc_insertion_point(message_clear_start:EigenVector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  size_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EigenVector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EigenVector::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EigenVector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 size = 1;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_size(), target);
  }

  // repeated double data = 2;
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EigenVector)
  return target;
}

size_t EigenVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EigenVector)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 size = 1;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EigenVector::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EigenVector)
  GOOGLE_DCHECK_NE(&from, this);
  const EigenVector* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EigenVector>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EigenVector)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EigenVector)
    MergeFrom(*source);
  }
}

void EigenVector::MergeFrom(const EigenVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EigenVector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void EigenVector::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EigenVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EigenVector::CopyFrom(const EigenVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EigenVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EigenVector::IsInitialized() const {
  return true;
}

void EigenVector::InternalSwap(EigenVector* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EigenVector::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StraussState::_Internal {
 public:
};

StraussState::StraussState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:StraussState)
}
StraussState::StraussState(const StraussState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&beta_, &from.beta_,
    static_cast<size_t>(reinterpret_cast<char*>(&birth_arate_) -
    reinterpret_cast<char*>(&beta_)) + sizeof(birth_arate_));
  // @@protoc_insertion_point(copy_constructor:StraussState)
}

void StraussState::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&beta_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&birth_arate_) -
      reinterpret_cast<char*>(&beta_)) + sizeof(birth_arate_));
}

StraussState::~StraussState() {
  // @@protoc_insertion_point(destructor:StraussState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StraussState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StraussState::ArenaDtor(void* object) {
  StraussState* _this = reinterpret_cast< StraussState* >(object);
  (void)_this;
}
void StraussState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StraussState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StraussState& StraussState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StraussState_state_2eproto.base);
  return *internal_default_instance();
}


void StraussState::Clear() {
// @@protoc_insertion_point(message_clear_start:StraussState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&beta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&birth_arate_) -
      reinterpret_cast<char*>(&beta_)) + sizeof(birth_arate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StraussState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double beta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          beta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double gamma = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          gamma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double R = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double birth_prob = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          birth_prob_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double birth_arate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          birth_arate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StraussState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StraussState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double beta = 1;
  if (!(this->beta() <= 0 && this->beta() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_beta(), target);
  }

  // double gamma = 2;
  if (!(this->gamma() <= 0 && this->gamma() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_gamma(), target);
  }

  // double R = 3;
  if (!(this->r() <= 0 && this->r() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_r(), target);
  }

  // double birth_prob = 4;
  if (!(this->birth_prob() <= 0 && this->birth_prob() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_birth_prob(), target);
  }

  // double birth_arate = 5;
  if (!(this->birth_arate() <= 0 && this->birth_arate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_birth_arate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StraussState)
  return target;
}

size_t StraussState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StraussState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double beta = 1;
  if (!(this->beta() <= 0 && this->beta() >= 0)) {
    total_size += 1 + 8;
  }

  // double gamma = 2;
  if (!(this->gamma() <= 0 && this->gamma() >= 0)) {
    total_size += 1 + 8;
  }

  // double R = 3;
  if (!(this->r() <= 0 && this->r() >= 0)) {
    total_size += 1 + 8;
  }

  // double birth_prob = 4;
  if (!(this->birth_prob() <= 0 && this->birth_prob() >= 0)) {
    total_size += 1 + 8;
  }

  // double birth_arate = 5;
  if (!(this->birth_arate() <= 0 && this->birth_arate() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StraussState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StraussState)
  GOOGLE_DCHECK_NE(&from, this);
  const StraussState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StraussState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StraussState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StraussState)
    MergeFrom(*source);
  }
}

void StraussState::MergeFrom(const StraussState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StraussState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.beta() <= 0 && from.beta() >= 0)) {
    _internal_set_beta(from._internal_beta());
  }
  if (!(from.gamma() <= 0 && from.gamma() >= 0)) {
    _internal_set_gamma(from._internal_gamma());
  }
  if (!(from.r() <= 0 && from.r() >= 0)) {
    _internal_set_r(from._internal_r());
  }
  if (!(from.birth_prob() <= 0 && from.birth_prob() >= 0)) {
    _internal_set_birth_prob(from._internal_birth_prob());
  }
  if (!(from.birth_arate() <= 0 && from.birth_arate() >= 0)) {
    _internal_set_birth_arate(from._internal_birth_arate());
  }
}

void StraussState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StraussState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StraussState::CopyFrom(const StraussState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StraussState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StraussState::IsInitialized() const {
  return true;
}

void StraussState::InternalSwap(StraussState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StraussState, birth_arate_)
      + sizeof(StraussState::birth_arate_)
      - PROTOBUF_FIELD_OFFSET(StraussState, beta_)>(
          reinterpret_cast<char*>(&beta_),
          reinterpret_cast<char*>(&other->beta_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StraussState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NrepState::_Internal {
 public:
};

NrepState::NrepState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NrepState)
}
NrepState::NrepState(const NrepState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&u_, &from.u_,
    static_cast<size_t>(reinterpret_cast<char*>(&tau_) -
    reinterpret_cast<char*>(&u_)) + sizeof(tau_));
  // @@protoc_insertion_point(copy_constructor:NrepState)
}

void NrepState::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&u_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&tau_) -
      reinterpret_cast<char*>(&u_)) + sizeof(tau_));
}

NrepState::~NrepState() {
  // @@protoc_insertion_point(destructor:NrepState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NrepState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NrepState::ArenaDtor(void* object) {
  NrepState* _this = reinterpret_cast< NrepState* >(object);
  (void)_this;
}
void NrepState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NrepState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NrepState& NrepState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NrepState_state_2eproto.base);
  return *internal_default_instance();
}


void NrepState::Clear() {
// @@protoc_insertion_point(message_clear_start:NrepState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&u_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tau_) -
      reinterpret_cast<char*>(&u_)) + sizeof(tau_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NrepState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double u = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          u_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double p = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          p_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double tau = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          tau_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NrepState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NrepState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double u = 1;
  if (!(this->u() <= 0 && this->u() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_u(), target);
  }

  // double p = 2;
  if (!(this->p() <= 0 && this->p() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_p(), target);
  }

  // double tau = 3;
  if (!(this->tau() <= 0 && this->tau() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_tau(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NrepState)
  return target;
}

size_t NrepState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NrepState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double u = 1;
  if (!(this->u() <= 0 && this->u() >= 0)) {
    total_size += 1 + 8;
  }

  // double p = 2;
  if (!(this->p() <= 0 && this->p() >= 0)) {
    total_size += 1 + 8;
  }

  // double tau = 3;
  if (!(this->tau() <= 0 && this->tau() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NrepState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NrepState)
  GOOGLE_DCHECK_NE(&from, this);
  const NrepState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NrepState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NrepState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NrepState)
    MergeFrom(*source);
  }
}

void NrepState::MergeFrom(const NrepState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NrepState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.u() <= 0 && from.u() >= 0)) {
    _internal_set_u(from._internal_u());
  }
  if (!(from.p() <= 0 && from.p() >= 0)) {
    _internal_set_p(from._internal_p());
  }
  if (!(from.tau() <= 0 && from.tau() >= 0)) {
    _internal_set_tau(from._internal_tau());
  }
}

void NrepState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NrepState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NrepState::CopyFrom(const NrepState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NrepState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NrepState::IsInitialized() const {
  return true;
}

void NrepState::InternalSwap(NrepState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NrepState, tau_)
      + sizeof(NrepState::tau_)
      - PROTOBUF_FIELD_OFFSET(NrepState, u_)>(
          reinterpret_cast<char*>(&u_),
          reinterpret_cast<char*>(&other->u_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NrepState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PPState::_Internal {
 public:
  static const ::StraussState& strauss_state(const PPState* msg);
  static const ::NrepState& nrep_state(const PPState* msg);
};

const ::StraussState&
PPState::_Internal::strauss_state(const PPState* msg) {
  return *msg->pp_state_.strauss_state_;
}
const ::NrepState&
PPState::_Internal::nrep_state(const PPState* msg) {
  return *msg->pp_state_.nrep_state_;
}
void PPState::set_allocated_strauss_state(::StraussState* strauss_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_pp_state();
  if (strauss_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(strauss_state);
    if (message_arena != submessage_arena) {
      strauss_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, strauss_state, submessage_arena);
    }
    set_has_strauss_state();
    pp_state_.strauss_state_ = strauss_state;
  }
  // @@protoc_insertion_point(field_set_allocated:PPState.strauss_state)
}
void PPState::set_allocated_nrep_state(::NrepState* nrep_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_pp_state();
  if (nrep_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(nrep_state);
    if (message_arena != submessage_arena) {
      nrep_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nrep_state, submessage_arena);
    }
    set_has_nrep_state();
    pp_state_.nrep_state_ = nrep_state;
  }
  // @@protoc_insertion_point(field_set_allocated:PPState.nrep_state)
}
PPState::PPState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PPState)
}
PPState::PPState(const PPState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_pp_state();
  switch (from.pp_state_case()) {
    case kStraussState: {
      _internal_mutable_strauss_state()->::StraussState::MergeFrom(from._internal_strauss_state());
      break;
    }
    case kNrepState: {
      _internal_mutable_nrep_state()->::NrepState::MergeFrom(from._internal_nrep_state());
      break;
    }
    case PP_STATE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:PPState)
}

void PPState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PPState_state_2eproto.base);
  clear_has_pp_state();
}

PPState::~PPState() {
  // @@protoc_insertion_point(destructor:PPState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PPState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_pp_state()) {
    clear_pp_state();
  }
}

void PPState::ArenaDtor(void* object) {
  PPState* _this = reinterpret_cast< PPState* >(object);
  (void)_this;
}
void PPState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PPState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PPState& PPState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PPState_state_2eproto.base);
  return *internal_default_instance();
}


void PPState::clear_pp_state() {
// @@protoc_insertion_point(one_of_clear_start:PPState)
  switch (pp_state_case()) {
    case kStraussState: {
      if (GetArena() == nullptr) {
        delete pp_state_.strauss_state_;
      }
      break;
    }
    case kNrepState: {
      if (GetArena() == nullptr) {
        delete pp_state_.nrep_state_;
      }
      break;
    }
    case PP_STATE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PP_STATE_NOT_SET;
}


void PPState::Clear() {
// @@protoc_insertion_point(message_clear_start:PPState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_pp_state();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PPState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .StraussState strauss_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_strauss_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NrepState nrep_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_nrep_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PPState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PPState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .StraussState strauss_state = 1;
  if (_internal_has_strauss_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::strauss_state(this), target, stream);
  }

  // .NrepState nrep_state = 2;
  if (_internal_has_nrep_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::nrep_state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PPState)
  return target;
}

size_t PPState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PPState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (pp_state_case()) {
    // .StraussState strauss_state = 1;
    case kStraussState: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pp_state_.strauss_state_);
      break;
    }
    // .NrepState nrep_state = 2;
    case kNrepState: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pp_state_.nrep_state_);
      break;
    }
    case PP_STATE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PPState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PPState)
  GOOGLE_DCHECK_NE(&from, this);
  const PPState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PPState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PPState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PPState)
    MergeFrom(*source);
  }
}

void PPState::MergeFrom(const PPState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PPState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.pp_state_case()) {
    case kStraussState: {
      _internal_mutable_strauss_state()->::StraussState::MergeFrom(from._internal_strauss_state());
      break;
    }
    case kNrepState: {
      _internal_mutable_nrep_state()->::NrepState::MergeFrom(from._internal_nrep_state());
      break;
    }
    case PP_STATE_NOT_SET: {
      break;
    }
  }
}

void PPState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PPState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PPState::CopyFrom(const PPState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PPState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PPState::IsInitialized() const {
  return true;
}

void PPState::InternalSwap(PPState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(pp_state_, other->pp_state_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PPState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MultivariateMixtureState::_Internal {
 public:
  static const ::EigenVector& a_jumps(const MultivariateMixtureState* msg);
  static const ::EigenVector& na_jumps(const MultivariateMixtureState* msg);
  static const ::PPState& pp_state(const MultivariateMixtureState* msg);
};

const ::EigenVector&
MultivariateMixtureState::_Internal::a_jumps(const MultivariateMixtureState* msg) {
  return *msg->a_jumps_;
}
const ::EigenVector&
MultivariateMixtureState::_Internal::na_jumps(const MultivariateMixtureState* msg) {
  return *msg->na_jumps_;
}
const ::PPState&
MultivariateMixtureState::_Internal::pp_state(const MultivariateMixtureState* msg) {
  return *msg->pp_state_;
}
MultivariateMixtureState::MultivariateMixtureState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  a_means_(arena),
  na_means_(arena),
  a_precs_(arena),
  na_precs_(arena),
  clus_alloc_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MultivariateMixtureState)
}
MultivariateMixtureState::MultivariateMixtureState(const MultivariateMixtureState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      a_means_(from.a_means_),
      na_means_(from.na_means_),
      a_precs_(from.a_precs_),
      na_precs_(from.na_precs_),
      clus_alloc_(from.clus_alloc_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_a_jumps()) {
    a_jumps_ = new ::EigenVector(*from.a_jumps_);
  } else {
    a_jumps_ = nullptr;
  }
  if (from._internal_has_na_jumps()) {
    na_jumps_ = new ::EigenVector(*from.na_jumps_);
  } else {
    na_jumps_ = nullptr;
  }
  if (from._internal_has_pp_state()) {
    pp_state_ = new ::PPState(*from.pp_state_);
  } else {
    pp_state_ = nullptr;
  }
  ::memcpy(&ma_, &from.ma_,
    static_cast<size_t>(reinterpret_cast<char*>(&mtot_) -
    reinterpret_cast<char*>(&ma_)) + sizeof(mtot_));
  // @@protoc_insertion_point(copy_constructor:MultivariateMixtureState)
}

void MultivariateMixtureState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultivariateMixtureState_state_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&a_jumps_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&mtot_) -
      reinterpret_cast<char*>(&a_jumps_)) + sizeof(mtot_));
}

MultivariateMixtureState::~MultivariateMixtureState() {
  // @@protoc_insertion_point(destructor:MultivariateMixtureState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MultivariateMixtureState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete a_jumps_;
  if (this != internal_default_instance()) delete na_jumps_;
  if (this != internal_default_instance()) delete pp_state_;
}

void MultivariateMixtureState::ArenaDtor(void* object) {
  MultivariateMixtureState* _this = reinterpret_cast< MultivariateMixtureState* >(object);
  (void)_this;
}
void MultivariateMixtureState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultivariateMixtureState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultivariateMixtureState& MultivariateMixtureState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultivariateMixtureState_state_2eproto.base);
  return *internal_default_instance();
}


void MultivariateMixtureState::Clear() {
// @@protoc_insertion_point(message_clear_start:MultivariateMixtureState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  a_means_.Clear();
  na_means_.Clear();
  a_precs_.Clear();
  na_precs_.Clear();
  clus_alloc_.Clear();
  if (GetArena() == nullptr && a_jumps_ != nullptr) {
    delete a_jumps_;
  }
  a_jumps_ = nullptr;
  if (GetArena() == nullptr && na_jumps_ != nullptr) {
    delete na_jumps_;
  }
  na_jumps_ = nullptr;
  if (GetArena() == nullptr && pp_state_ != nullptr) {
    delete pp_state_;
  }
  pp_state_ = nullptr;
  ::memset(&ma_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mtot_) -
      reinterpret_cast<char*>(&ma_)) + sizeof(mtot_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultivariateMixtureState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ma = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ma_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mna = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mna_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mtot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          mtot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .EigenVector a_means = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_a_means(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .EigenVector na_means = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_na_means(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .EigenMatrix a_precs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_a_precs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .EigenMatrix na_precs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_na_precs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // .EigenVector a_jumps = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_a_jumps(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .EigenVector na_jumps = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_na_jumps(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 clus_alloc = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_clus_alloc(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80) {
          _internal_add_clus_alloc(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double u = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          u_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .PPState pp_state = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_pp_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultivariateMixtureState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MultivariateMixtureState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ma = 1;
  if (this->ma() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ma(), target);
  }

  // int32 mna = 2;
  if (this->mna() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mna(), target);
  }

  // int32 mtot = 3;
  if (this->mtot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_mtot(), target);
  }

  // repeated .EigenVector a_means = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_a_means_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_a_means(i), target, stream);
  }

  // repeated .EigenVector na_means = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_na_means_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_na_means(i), target, stream);
  }

  // repeated .EigenMatrix a_precs = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_a_precs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_a_precs(i), target, stream);
  }

  // repeated .EigenMatrix na_precs = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_na_precs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_na_precs(i), target, stream);
  }

  // .EigenVector a_jumps = 8;
  if (this->has_a_jumps()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::a_jumps(this), target, stream);
  }

  // .EigenVector na_jumps = 9;
  if (this->has_na_jumps()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::na_jumps(this), target, stream);
  }

  // repeated int32 clus_alloc = 10;
  {
    int byte_size = _clus_alloc_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          10, _internal_clus_alloc(), byte_size, target);
    }
  }

  // double u = 11;
  if (!(this->u() <= 0 && this->u() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_u(), target);
  }

  // .PPState pp_state = 12;
  if (this->has_pp_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::pp_state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MultivariateMixtureState)
  return target;
}

size_t MultivariateMixtureState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MultivariateMixtureState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .EigenVector a_means = 4;
  total_size += 1UL * this->_internal_a_means_size();
  for (const auto& msg : this->a_means_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .EigenVector na_means = 5;
  total_size += 1UL * this->_internal_na_means_size();
  for (const auto& msg : this->na_means_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .EigenMatrix a_precs = 6;
  total_size += 1UL * this->_internal_a_precs_size();
  for (const auto& msg : this->a_precs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .EigenMatrix na_precs = 7;
  total_size += 1UL * this->_internal_na_precs_size();
  for (const auto& msg : this->na_precs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 clus_alloc = 10;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->clus_alloc_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _clus_alloc_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .EigenVector a_jumps = 8;
  if (this->has_a_jumps()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *a_jumps_);
  }

  // .EigenVector na_jumps = 9;
  if (this->has_na_jumps()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *na_jumps_);
  }

  // .PPState pp_state = 12;
  if (this->has_pp_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pp_state_);
  }

  // int32 ma = 1;
  if (this->ma() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ma());
  }

  // int32 mna = 2;
  if (this->mna() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mna());
  }

  // double u = 11;
  if (!(this->u() <= 0 && this->u() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 mtot = 3;
  if (this->mtot() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mtot());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultivariateMixtureState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MultivariateMixtureState)
  GOOGLE_DCHECK_NE(&from, this);
  const MultivariateMixtureState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultivariateMixtureState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MultivariateMixtureState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MultivariateMixtureState)
    MergeFrom(*source);
  }
}

void MultivariateMixtureState::MergeFrom(const MultivariateMixtureState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MultivariateMixtureState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  a_means_.MergeFrom(from.a_means_);
  na_means_.MergeFrom(from.na_means_);
  a_precs_.MergeFrom(from.a_precs_);
  na_precs_.MergeFrom(from.na_precs_);
  clus_alloc_.MergeFrom(from.clus_alloc_);
  if (from.has_a_jumps()) {
    _internal_mutable_a_jumps()->::EigenVector::MergeFrom(from._internal_a_jumps());
  }
  if (from.has_na_jumps()) {
    _internal_mutable_na_jumps()->::EigenVector::MergeFrom(from._internal_na_jumps());
  }
  if (from.has_pp_state()) {
    _internal_mutable_pp_state()->::PPState::MergeFrom(from._internal_pp_state());
  }
  if (from.ma() != 0) {
    _internal_set_ma(from._internal_ma());
  }
  if (from.mna() != 0) {
    _internal_set_mna(from._internal_mna());
  }
  if (!(from.u() <= 0 && from.u() >= 0)) {
    _internal_set_u(from._internal_u());
  }
  if (from.mtot() != 0) {
    _internal_set_mtot(from._internal_mtot());
  }
}

void MultivariateMixtureState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MultivariateMixtureState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultivariateMixtureState::CopyFrom(const MultivariateMixtureState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MultivariateMixtureState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultivariateMixtureState::IsInitialized() const {
  return true;
}

void MultivariateMixtureState::InternalSwap(MultivariateMixtureState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  a_means_.InternalSwap(&other->a_means_);
  na_means_.InternalSwap(&other->na_means_);
  a_precs_.InternalSwap(&other->a_precs_);
  na_precs_.InternalSwap(&other->na_precs_);
  clus_alloc_.InternalSwap(&other->clus_alloc_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MultivariateMixtureState, mtot_)
      + sizeof(MultivariateMixtureState::mtot_)
      - PROTOBUF_FIELD_OFFSET(MultivariateMixtureState, a_jumps_)>(
          reinterpret_cast<char*>(&a_jumps_),
          reinterpret_cast<char*>(&other->a_jumps_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MultivariateMixtureState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UnivariateMixtureState::_Internal {
 public:
  static const ::EigenVector& a_means(const UnivariateMixtureState* msg);
  static const ::EigenVector& na_means(const UnivariateMixtureState* msg);
  static const ::EigenVector& a_precs(const UnivariateMixtureState* msg);
  static const ::EigenVector& na_precs(const UnivariateMixtureState* msg);
  static const ::EigenVector& a_jumps(const UnivariateMixtureState* msg);
  static const ::EigenVector& na_jumps(const UnivariateMixtureState* msg);
  static const ::PPState& pp_state(const UnivariateMixtureState* msg);
};

const ::EigenVector&
UnivariateMixtureState::_Internal::a_means(const UnivariateMixtureState* msg) {
  return *msg->a_means_;
}
const ::EigenVector&
UnivariateMixtureState::_Internal::na_means(const UnivariateMixtureState* msg) {
  return *msg->na_means_;
}
const ::EigenVector&
UnivariateMixtureState::_Internal::a_precs(const UnivariateMixtureState* msg) {
  return *msg->a_precs_;
}
const ::EigenVector&
UnivariateMixtureState::_Internal::na_precs(const UnivariateMixtureState* msg) {
  return *msg->na_precs_;
}
const ::EigenVector&
UnivariateMixtureState::_Internal::a_jumps(const UnivariateMixtureState* msg) {
  return *msg->a_jumps_;
}
const ::EigenVector&
UnivariateMixtureState::_Internal::na_jumps(const UnivariateMixtureState* msg) {
  return *msg->na_jumps_;
}
const ::PPState&
UnivariateMixtureState::_Internal::pp_state(const UnivariateMixtureState* msg) {
  return *msg->pp_state_;
}
UnivariateMixtureState::UnivariateMixtureState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  clus_alloc_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:UnivariateMixtureState)
}
UnivariateMixtureState::UnivariateMixtureState(const UnivariateMixtureState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      clus_alloc_(from.clus_alloc_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_a_means()) {
    a_means_ = new ::EigenVector(*from.a_means_);
  } else {
    a_means_ = nullptr;
  }
  if (from._internal_has_na_means()) {
    na_means_ = new ::EigenVector(*from.na_means_);
  } else {
    na_means_ = nullptr;
  }
  if (from._internal_has_a_precs()) {
    a_precs_ = new ::EigenVector(*from.a_precs_);
  } else {
    a_precs_ = nullptr;
  }
  if (from._internal_has_na_precs()) {
    na_precs_ = new ::EigenVector(*from.na_precs_);
  } else {
    na_precs_ = nullptr;
  }
  if (from._internal_has_a_jumps()) {
    a_jumps_ = new ::EigenVector(*from.a_jumps_);
  } else {
    a_jumps_ = nullptr;
  }
  if (from._internal_has_na_jumps()) {
    na_jumps_ = new ::EigenVector(*from.na_jumps_);
  } else {
    na_jumps_ = nullptr;
  }
  if (from._internal_has_pp_state()) {
    pp_state_ = new ::PPState(*from.pp_state_);
  } else {
    pp_state_ = nullptr;
  }
  ::memcpy(&ma_, &from.ma_,
    static_cast<size_t>(reinterpret_cast<char*>(&mtot_) -
    reinterpret_cast<char*>(&ma_)) + sizeof(mtot_));
  // @@protoc_insertion_point(copy_constructor:UnivariateMixtureState)
}

void UnivariateMixtureState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnivariateMixtureState_state_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&a_means_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&mtot_) -
      reinterpret_cast<char*>(&a_means_)) + sizeof(mtot_));
}

UnivariateMixtureState::~UnivariateMixtureState() {
  // @@protoc_insertion_point(destructor:UnivariateMixtureState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnivariateMixtureState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete a_means_;
  if (this != internal_default_instance()) delete na_means_;
  if (this != internal_default_instance()) delete a_precs_;
  if (this != internal_default_instance()) delete na_precs_;
  if (this != internal_default_instance()) delete a_jumps_;
  if (this != internal_default_instance()) delete na_jumps_;
  if (this != internal_default_instance()) delete pp_state_;
}

void UnivariateMixtureState::ArenaDtor(void* object) {
  UnivariateMixtureState* _this = reinterpret_cast< UnivariateMixtureState* >(object);
  (void)_this;
}
void UnivariateMixtureState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnivariateMixtureState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnivariateMixtureState& UnivariateMixtureState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnivariateMixtureState_state_2eproto.base);
  return *internal_default_instance();
}


void UnivariateMixtureState::Clear() {
// @@protoc_insertion_point(message_clear_start:UnivariateMixtureState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clus_alloc_.Clear();
  if (GetArena() == nullptr && a_means_ != nullptr) {
    delete a_means_;
  }
  a_means_ = nullptr;
  if (GetArena() == nullptr && na_means_ != nullptr) {
    delete na_means_;
  }
  na_means_ = nullptr;
  if (GetArena() == nullptr && a_precs_ != nullptr) {
    delete a_precs_;
  }
  a_precs_ = nullptr;
  if (GetArena() == nullptr && na_precs_ != nullptr) {
    delete na_precs_;
  }
  na_precs_ = nullptr;
  if (GetArena() == nullptr && a_jumps_ != nullptr) {
    delete a_jumps_;
  }
  a_jumps_ = nullptr;
  if (GetArena() == nullptr && na_jumps_ != nullptr) {
    delete na_jumps_;
  }
  na_jumps_ = nullptr;
  if (GetArena() == nullptr && pp_state_ != nullptr) {
    delete pp_state_;
  }
  pp_state_ = nullptr;
  ::memset(&ma_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mtot_) -
      reinterpret_cast<char*>(&ma_)) + sizeof(mtot_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnivariateMixtureState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ma = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ma_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mna = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mna_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mtot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          mtot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .EigenVector a_means = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_a_means(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .EigenVector na_means = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_na_means(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .EigenVector a_precs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_a_precs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .EigenVector na_precs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_na_precs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .EigenVector a_jumps = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_a_jumps(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .EigenVector na_jumps = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_na_jumps(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 clus_alloc = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_clus_alloc(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80) {
          _internal_add_clus_alloc(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double u = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          u_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .PPState pp_state = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_pp_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnivariateMixtureState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UnivariateMixtureState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ma = 1;
  if (this->ma() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ma(), target);
  }

  // int32 mna = 2;
  if (this->mna() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mna(), target);
  }

  // int32 mtot = 3;
  if (this->mtot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_mtot(), target);
  }

  // .EigenVector a_means = 4;
  if (this->has_a_means()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::a_means(this), target, stream);
  }

  // .EigenVector na_means = 5;
  if (this->has_na_means()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::na_means(this), target, stream);
  }

  // .EigenVector a_precs = 6;
  if (this->has_a_precs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::a_precs(this), target, stream);
  }

  // .EigenVector na_precs = 7;
  if (this->has_na_precs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::na_precs(this), target, stream);
  }

  // .EigenVector a_jumps = 8;
  if (this->has_a_jumps()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::a_jumps(this), target, stream);
  }

  // .EigenVector na_jumps = 9;
  if (this->has_na_jumps()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::na_jumps(this), target, stream);
  }

  // repeated int32 clus_alloc = 10;
  {
    int byte_size = _clus_alloc_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          10, _internal_clus_alloc(), byte_size, target);
    }
  }

  // double u = 11;
  if (!(this->u() <= 0 && this->u() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_u(), target);
  }

  // .PPState pp_state = 12;
  if (this->has_pp_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::pp_state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UnivariateMixtureState)
  return target;
}

size_t UnivariateMixtureState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UnivariateMixtureState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 clus_alloc = 10;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->clus_alloc_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _clus_alloc_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .EigenVector a_means = 4;
  if (this->has_a_means()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *a_means_);
  }

  // .EigenVector na_means = 5;
  if (this->has_na_means()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *na_means_);
  }

  // .EigenVector a_precs = 6;
  if (this->has_a_precs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *a_precs_);
  }

  // .EigenVector na_precs = 7;
  if (this->has_na_precs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *na_precs_);
  }

  // .EigenVector a_jumps = 8;
  if (this->has_a_jumps()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *a_jumps_);
  }

  // .EigenVector na_jumps = 9;
  if (this->has_na_jumps()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *na_jumps_);
  }

  // .PPState pp_state = 12;
  if (this->has_pp_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pp_state_);
  }

  // int32 ma = 1;
  if (this->ma() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ma());
  }

  // int32 mna = 2;
  if (this->mna() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mna());
  }

  // double u = 11;
  if (!(this->u() <= 0 && this->u() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 mtot = 3;
  if (this->mtot() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mtot());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnivariateMixtureState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UnivariateMixtureState)
  GOOGLE_DCHECK_NE(&from, this);
  const UnivariateMixtureState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnivariateMixtureState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UnivariateMixtureState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UnivariateMixtureState)
    MergeFrom(*source);
  }
}

void UnivariateMixtureState::MergeFrom(const UnivariateMixtureState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UnivariateMixtureState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  clus_alloc_.MergeFrom(from.clus_alloc_);
  if (from.has_a_means()) {
    _internal_mutable_a_means()->::EigenVector::MergeFrom(from._internal_a_means());
  }
  if (from.has_na_means()) {
    _internal_mutable_na_means()->::EigenVector::MergeFrom(from._internal_na_means());
  }
  if (from.has_a_precs()) {
    _internal_mutable_a_precs()->::EigenVector::MergeFrom(from._internal_a_precs());
  }
  if (from.has_na_precs()) {
    _internal_mutable_na_precs()->::EigenVector::MergeFrom(from._internal_na_precs());
  }
  if (from.has_a_jumps()) {
    _internal_mutable_a_jumps()->::EigenVector::MergeFrom(from._internal_a_jumps());
  }
  if (from.has_na_jumps()) {
    _internal_mutable_na_jumps()->::EigenVector::MergeFrom(from._internal_na_jumps());
  }
  if (from.has_pp_state()) {
    _internal_mutable_pp_state()->::PPState::MergeFrom(from._internal_pp_state());
  }
  if (from.ma() != 0) {
    _internal_set_ma(from._internal_ma());
  }
  if (from.mna() != 0) {
    _internal_set_mna(from._internal_mna());
  }
  if (!(from.u() <= 0 && from.u() >= 0)) {
    _internal_set_u(from._internal_u());
  }
  if (from.mtot() != 0) {
    _internal_set_mtot(from._internal_mtot());
  }
}

void UnivariateMixtureState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UnivariateMixtureState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnivariateMixtureState::CopyFrom(const UnivariateMixtureState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UnivariateMixtureState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnivariateMixtureState::IsInitialized() const {
  return true;
}

void UnivariateMixtureState::InternalSwap(UnivariateMixtureState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  clus_alloc_.InternalSwap(&other->clus_alloc_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnivariateMixtureState, mtot_)
      + sizeof(UnivariateMixtureState::mtot_)
      - PROTOBUF_FIELD_OFFSET(UnivariateMixtureState, a_means_)>(
          reinterpret_cast<char*>(&a_means_),
          reinterpret_cast<char*>(&other->a_means_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnivariateMixtureState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BernoulliMixtureState::_Internal {
 public:
  static const ::EigenVector& a_jumps(const BernoulliMixtureState* msg);
  static const ::EigenVector& na_jumps(const BernoulliMixtureState* msg);
  static const ::PPState& pp_state(const BernoulliMixtureState* msg);
};

const ::EigenVector&
BernoulliMixtureState::_Internal::a_jumps(const BernoulliMixtureState* msg) {
  return *msg->a_jumps_;
}
const ::EigenVector&
BernoulliMixtureState::_Internal::na_jumps(const BernoulliMixtureState* msg) {
  return *msg->na_jumps_;
}
const ::PPState&
BernoulliMixtureState::_Internal::pp_state(const BernoulliMixtureState* msg) {
  return *msg->pp_state_;
}
BernoulliMixtureState::BernoulliMixtureState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  a_probs_(arena),
  na_probs_(arena),
  clus_alloc_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BernoulliMixtureState)
}
BernoulliMixtureState::BernoulliMixtureState(const BernoulliMixtureState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      a_probs_(from.a_probs_),
      na_probs_(from.na_probs_),
      clus_alloc_(from.clus_alloc_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_a_jumps()) {
    a_jumps_ = new ::EigenVector(*from.a_jumps_);
  } else {
    a_jumps_ = nullptr;
  }
  if (from._internal_has_na_jumps()) {
    na_jumps_ = new ::EigenVector(*from.na_jumps_);
  } else {
    na_jumps_ = nullptr;
  }
  if (from._internal_has_pp_state()) {
    pp_state_ = new ::PPState(*from.pp_state_);
  } else {
    pp_state_ = nullptr;
  }
  ::memcpy(&ma_, &from.ma_,
    static_cast<size_t>(reinterpret_cast<char*>(&mtot_) -
    reinterpret_cast<char*>(&ma_)) + sizeof(mtot_));
  // @@protoc_insertion_point(copy_constructor:BernoulliMixtureState)
}

void BernoulliMixtureState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BernoulliMixtureState_state_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&a_jumps_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&mtot_) -
      reinterpret_cast<char*>(&a_jumps_)) + sizeof(mtot_));
}

BernoulliMixtureState::~BernoulliMixtureState() {
  // @@protoc_insertion_point(destructor:BernoulliMixtureState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BernoulliMixtureState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete a_jumps_;
  if (this != internal_default_instance()) delete na_jumps_;
  if (this != internal_default_instance()) delete pp_state_;
}

void BernoulliMixtureState::ArenaDtor(void* object) {
  BernoulliMixtureState* _this = reinterpret_cast< BernoulliMixtureState* >(object);
  (void)_this;
}
void BernoulliMixtureState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BernoulliMixtureState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BernoulliMixtureState& BernoulliMixtureState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BernoulliMixtureState_state_2eproto.base);
  return *internal_default_instance();
}


void BernoulliMixtureState::Clear() {
// @@protoc_insertion_point(message_clear_start:BernoulliMixtureState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  a_probs_.Clear();
  na_probs_.Clear();
  clus_alloc_.Clear();
  if (GetArena() == nullptr && a_jumps_ != nullptr) {
    delete a_jumps_;
  }
  a_jumps_ = nullptr;
  if (GetArena() == nullptr && na_jumps_ != nullptr) {
    delete na_jumps_;
  }
  na_jumps_ = nullptr;
  if (GetArena() == nullptr && pp_state_ != nullptr) {
    delete pp_state_;
  }
  pp_state_ = nullptr;
  ::memset(&ma_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mtot_) -
      reinterpret_cast<char*>(&ma_)) + sizeof(mtot_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BernoulliMixtureState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ma = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ma_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mna = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mna_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mtot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          mtot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .EigenVector a_probs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_a_probs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .EigenVector na_probs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_na_probs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .EigenVector a_jumps = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_a_jumps(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .EigenVector na_jumps = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_na_jumps(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 clus_alloc = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_clus_alloc(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80) {
          _internal_add_clus_alloc(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double u = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          u_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .PPState pp_state = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_pp_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BernoulliMixtureState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BernoulliMixtureState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ma = 1;
  if (this->ma() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ma(), target);
  }

  // int32 mna = 2;
  if (this->mna() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mna(), target);
  }

  // int32 mtot = 3;
  if (this->mtot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_mtot(), target);
  }

  // repeated .EigenVector a_probs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_a_probs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_a_probs(i), target, stream);
  }

  // repeated .EigenVector na_probs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_na_probs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_na_probs(i), target, stream);
  }

  // .EigenVector a_jumps = 6;
  if (this->has_a_jumps()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::a_jumps(this), target, stream);
  }

  // .EigenVector na_jumps = 7;
  if (this->has_na_jumps()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::na_jumps(this), target, stream);
  }

  // repeated int32 clus_alloc = 10;
  {
    int byte_size = _clus_alloc_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          10, _internal_clus_alloc(), byte_size, target);
    }
  }

  // double u = 11;
  if (!(this->u() <= 0 && this->u() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_u(), target);
  }

  // .PPState pp_state = 12;
  if (this->has_pp_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::pp_state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BernoulliMixtureState)
  return target;
}

size_t BernoulliMixtureState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BernoulliMixtureState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .EigenVector a_probs = 4;
  total_size += 1UL * this->_internal_a_probs_size();
  for (const auto& msg : this->a_probs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .EigenVector na_probs = 5;
  total_size += 1UL * this->_internal_na_probs_size();
  for (const auto& msg : this->na_probs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 clus_alloc = 10;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->clus_alloc_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _clus_alloc_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .EigenVector a_jumps = 6;
  if (this->has_a_jumps()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *a_jumps_);
  }

  // .EigenVector na_jumps = 7;
  if (this->has_na_jumps()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *na_jumps_);
  }

  // .PPState pp_state = 12;
  if (this->has_pp_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pp_state_);
  }

  // int32 ma = 1;
  if (this->ma() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ma());
  }

  // int32 mna = 2;
  if (this->mna() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mna());
  }

  // double u = 11;
  if (!(this->u() <= 0 && this->u() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 mtot = 3;
  if (this->mtot() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mtot());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BernoulliMixtureState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BernoulliMixtureState)
  GOOGLE_DCHECK_NE(&from, this);
  const BernoulliMixtureState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BernoulliMixtureState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BernoulliMixtureState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BernoulliMixtureState)
    MergeFrom(*source);
  }
}

void BernoulliMixtureState::MergeFrom(const BernoulliMixtureState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BernoulliMixtureState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  a_probs_.MergeFrom(from.a_probs_);
  na_probs_.MergeFrom(from.na_probs_);
  clus_alloc_.MergeFrom(from.clus_alloc_);
  if (from.has_a_jumps()) {
    _internal_mutable_a_jumps()->::EigenVector::MergeFrom(from._internal_a_jumps());
  }
  if (from.has_na_jumps()) {
    _internal_mutable_na_jumps()->::EigenVector::MergeFrom(from._internal_na_jumps());
  }
  if (from.has_pp_state()) {
    _internal_mutable_pp_state()->::PPState::MergeFrom(from._internal_pp_state());
  }
  if (from.ma() != 0) {
    _internal_set_ma(from._internal_ma());
  }
  if (from.mna() != 0) {
    _internal_set_mna(from._internal_mna());
  }
  if (!(from.u() <= 0 && from.u() >= 0)) {
    _internal_set_u(from._internal_u());
  }
  if (from.mtot() != 0) {
    _internal_set_mtot(from._internal_mtot());
  }
}

void BernoulliMixtureState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BernoulliMixtureState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BernoulliMixtureState::CopyFrom(const BernoulliMixtureState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BernoulliMixtureState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BernoulliMixtureState::IsInitialized() const {
  return true;
}

void BernoulliMixtureState::InternalSwap(BernoulliMixtureState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  a_probs_.InternalSwap(&other->a_probs_);
  na_probs_.InternalSwap(&other->na_probs_);
  clus_alloc_.InternalSwap(&other->clus_alloc_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BernoulliMixtureState, mtot_)
      + sizeof(BernoulliMixtureState::mtot_)
      - PROTOBUF_FIELD_OFFSET(BernoulliMixtureState, a_jumps_)>(
          reinterpret_cast<char*>(&a_jumps_),
          reinterpret_cast<char*>(&other->a_jumps_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BernoulliMixtureState::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::EigenMatrix* Arena::CreateMaybeMessage< ::EigenMatrix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EigenMatrix >(arena);
}
template<> PROTOBUF_NOINLINE ::EigenVector* Arena::CreateMaybeMessage< ::EigenVector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EigenVector >(arena);
}
template<> PROTOBUF_NOINLINE ::StraussState* Arena::CreateMaybeMessage< ::StraussState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StraussState >(arena);
}
template<> PROTOBUF_NOINLINE ::NrepState* Arena::CreateMaybeMessage< ::NrepState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NrepState >(arena);
}
template<> PROTOBUF_NOINLINE ::PPState* Arena::CreateMaybeMessage< ::PPState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PPState >(arena);
}
template<> PROTOBUF_NOINLINE ::MultivariateMixtureState* Arena::CreateMaybeMessage< ::MultivariateMixtureState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MultivariateMixtureState >(arena);
}
template<> PROTOBUF_NOINLINE ::UnivariateMixtureState* Arena::CreateMaybeMessage< ::UnivariateMixtureState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UnivariateMixtureState >(arena);
}
template<> PROTOBUF_NOINLINE ::BernoulliMixtureState* Arena::CreateMaybeMessage< ::BernoulliMixtureState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BernoulliMixtureState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
