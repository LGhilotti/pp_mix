// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: state.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_state_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_state_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_state_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_state_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_state_2eproto;
class BernoulliMixtureState;
class BernoulliMixtureStateDefaultTypeInternal;
extern BernoulliMixtureStateDefaultTypeInternal _BernoulliMixtureState_default_instance_;
class EigenMatrix;
class EigenMatrixDefaultTypeInternal;
extern EigenMatrixDefaultTypeInternal _EigenMatrix_default_instance_;
class EigenVector;
class EigenVectorDefaultTypeInternal;
extern EigenVectorDefaultTypeInternal _EigenVector_default_instance_;
class MultivariateMixtureState;
class MultivariateMixtureStateDefaultTypeInternal;
extern MultivariateMixtureStateDefaultTypeInternal _MultivariateMixtureState_default_instance_;
class NrepState;
class NrepStateDefaultTypeInternal;
extern NrepStateDefaultTypeInternal _NrepState_default_instance_;
class PPState;
class PPStateDefaultTypeInternal;
extern PPStateDefaultTypeInternal _PPState_default_instance_;
class StraussState;
class StraussStateDefaultTypeInternal;
extern StraussStateDefaultTypeInternal _StraussState_default_instance_;
class UnivariateMixtureState;
class UnivariateMixtureStateDefaultTypeInternal;
extern UnivariateMixtureStateDefaultTypeInternal _UnivariateMixtureState_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::BernoulliMixtureState* Arena::CreateMaybeMessage<::BernoulliMixtureState>(Arena*);
template<> ::EigenMatrix* Arena::CreateMaybeMessage<::EigenMatrix>(Arena*);
template<> ::EigenVector* Arena::CreateMaybeMessage<::EigenVector>(Arena*);
template<> ::MultivariateMixtureState* Arena::CreateMaybeMessage<::MultivariateMixtureState>(Arena*);
template<> ::NrepState* Arena::CreateMaybeMessage<::NrepState>(Arena*);
template<> ::PPState* Arena::CreateMaybeMessage<::PPState>(Arena*);
template<> ::StraussState* Arena::CreateMaybeMessage<::StraussState>(Arena*);
template<> ::UnivariateMixtureState* Arena::CreateMaybeMessage<::UnivariateMixtureState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class EigenMatrix PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EigenMatrix) */ {
 public:
  inline EigenMatrix() : EigenMatrix(nullptr) {}
  virtual ~EigenMatrix();

  EigenMatrix(const EigenMatrix& from);
  EigenMatrix(EigenMatrix&& from) noexcept
    : EigenMatrix() {
    *this = ::std::move(from);
  }

  inline EigenMatrix& operator=(const EigenMatrix& from) {
    CopyFrom(from);
    return *this;
  }
  inline EigenMatrix& operator=(EigenMatrix&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EigenMatrix& default_instance();

  static inline const EigenMatrix* internal_default_instance() {
    return reinterpret_cast<const EigenMatrix*>(
               &_EigenMatrix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EigenMatrix& a, EigenMatrix& b) {
    a.Swap(&b);
  }
  inline void Swap(EigenMatrix* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EigenMatrix* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EigenMatrix* New() const final {
    return CreateMaybeMessage<EigenMatrix>(nullptr);
  }

  EigenMatrix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EigenMatrix>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EigenMatrix& from);
  void MergeFrom(const EigenMatrix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EigenMatrix* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EigenMatrix";
  }
  protected:
  explicit EigenMatrix(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_state_2eproto);
    return ::descriptor_table_state_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kRowsFieldNumber = 1,
    kColsFieldNumber = 2,
  };
  // repeated double data = 3;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  double _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_data() const;
  void _internal_add_data(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_data();
  public:
  double data(int index) const;
  void set_data(int index, double value);
  void add_data(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_data();

  // uint32 rows = 1;
  void clear_rows();
  ::PROTOBUF_NAMESPACE_ID::uint32 rows() const;
  void set_rows(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rows() const;
  void _internal_set_rows(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 cols = 2;
  void clear_cols();
  ::PROTOBUF_NAMESPACE_ID::uint32 cols() const;
  void set_cols(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cols() const;
  void _internal_set_cols(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:EigenMatrix)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rows_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cols_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_2eproto;
};
// -------------------------------------------------------------------

class EigenVector PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EigenVector) */ {
 public:
  inline EigenVector() : EigenVector(nullptr) {}
  virtual ~EigenVector();

  EigenVector(const EigenVector& from);
  EigenVector(EigenVector&& from) noexcept
    : EigenVector() {
    *this = ::std::move(from);
  }

  inline EigenVector& operator=(const EigenVector& from) {
    CopyFrom(from);
    return *this;
  }
  inline EigenVector& operator=(EigenVector&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EigenVector& default_instance();

  static inline const EigenVector* internal_default_instance() {
    return reinterpret_cast<const EigenVector*>(
               &_EigenVector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EigenVector& a, EigenVector& b) {
    a.Swap(&b);
  }
  inline void Swap(EigenVector* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EigenVector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EigenVector* New() const final {
    return CreateMaybeMessage<EigenVector>(nullptr);
  }

  EigenVector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EigenVector>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EigenVector& from);
  void MergeFrom(const EigenVector& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EigenVector* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EigenVector";
  }
  protected:
  explicit EigenVector(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_state_2eproto);
    return ::descriptor_table_state_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kSizeFieldNumber = 1,
  };
  // repeated double data = 2;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  double _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_data() const;
  void _internal_add_data(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_data();
  public:
  double data(int index) const;
  void set_data(int index, double value);
  void add_data(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_data();

  // uint32 size = 1;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:EigenVector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_2eproto;
};
// -------------------------------------------------------------------

class StraussState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StraussState) */ {
 public:
  inline StraussState() : StraussState(nullptr) {}
  virtual ~StraussState();

  StraussState(const StraussState& from);
  StraussState(StraussState&& from) noexcept
    : StraussState() {
    *this = ::std::move(from);
  }

  inline StraussState& operator=(const StraussState& from) {
    CopyFrom(from);
    return *this;
  }
  inline StraussState& operator=(StraussState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StraussState& default_instance();

  static inline const StraussState* internal_default_instance() {
    return reinterpret_cast<const StraussState*>(
               &_StraussState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StraussState& a, StraussState& b) {
    a.Swap(&b);
  }
  inline void Swap(StraussState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StraussState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StraussState* New() const final {
    return CreateMaybeMessage<StraussState>(nullptr);
  }

  StraussState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StraussState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StraussState& from);
  void MergeFrom(const StraussState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StraussState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StraussState";
  }
  protected:
  explicit StraussState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_state_2eproto);
    return ::descriptor_table_state_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBetaFieldNumber = 1,
    kGammaFieldNumber = 2,
    kRFieldNumber = 3,
    kBirthProbFieldNumber = 4,
    kBirthArateFieldNumber = 5,
  };
  // double beta = 1;
  void clear_beta();
  double beta() const;
  void set_beta(double value);
  private:
  double _internal_beta() const;
  void _internal_set_beta(double value);
  public:

  // double gamma = 2;
  void clear_gamma();
  double gamma() const;
  void set_gamma(double value);
  private:
  double _internal_gamma() const;
  void _internal_set_gamma(double value);
  public:

  // double R = 3;
  void clear_r();
  double r() const;
  void set_r(double value);
  private:
  double _internal_r() const;
  void _internal_set_r(double value);
  public:

  // double birth_prob = 4;
  void clear_birth_prob();
  double birth_prob() const;
  void set_birth_prob(double value);
  private:
  double _internal_birth_prob() const;
  void _internal_set_birth_prob(double value);
  public:

  // double birth_arate = 5;
  void clear_birth_arate();
  double birth_arate() const;
  void set_birth_arate(double value);
  private:
  double _internal_birth_arate() const;
  void _internal_set_birth_arate(double value);
  public:

  // @@protoc_insertion_point(class_scope:StraussState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double beta_;
  double gamma_;
  double r_;
  double birth_prob_;
  double birth_arate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_2eproto;
};
// -------------------------------------------------------------------

class NrepState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NrepState) */ {
 public:
  inline NrepState() : NrepState(nullptr) {}
  virtual ~NrepState();

  NrepState(const NrepState& from);
  NrepState(NrepState&& from) noexcept
    : NrepState() {
    *this = ::std::move(from);
  }

  inline NrepState& operator=(const NrepState& from) {
    CopyFrom(from);
    return *this;
  }
  inline NrepState& operator=(NrepState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NrepState& default_instance();

  static inline const NrepState* internal_default_instance() {
    return reinterpret_cast<const NrepState*>(
               &_NrepState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NrepState& a, NrepState& b) {
    a.Swap(&b);
  }
  inline void Swap(NrepState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NrepState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NrepState* New() const final {
    return CreateMaybeMessage<NrepState>(nullptr);
  }

  NrepState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NrepState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NrepState& from);
  void MergeFrom(const NrepState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NrepState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NrepState";
  }
  protected:
  explicit NrepState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_state_2eproto);
    return ::descriptor_table_state_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUFieldNumber = 1,
    kPFieldNumber = 2,
    kTauFieldNumber = 3,
  };
  // double u = 1;
  void clear_u();
  double u() const;
  void set_u(double value);
  private:
  double _internal_u() const;
  void _internal_set_u(double value);
  public:

  // double p = 2;
  void clear_p();
  double p() const;
  void set_p(double value);
  private:
  double _internal_p() const;
  void _internal_set_p(double value);
  public:

  // double tau = 3;
  void clear_tau();
  double tau() const;
  void set_tau(double value);
  private:
  double _internal_tau() const;
  void _internal_set_tau(double value);
  public:

  // @@protoc_insertion_point(class_scope:NrepState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double u_;
  double p_;
  double tau_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_2eproto;
};
// -------------------------------------------------------------------

class PPState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PPState) */ {
 public:
  inline PPState() : PPState(nullptr) {}
  virtual ~PPState();

  PPState(const PPState& from);
  PPState(PPState&& from) noexcept
    : PPState() {
    *this = ::std::move(from);
  }

  inline PPState& operator=(const PPState& from) {
    CopyFrom(from);
    return *this;
  }
  inline PPState& operator=(PPState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PPState& default_instance();

  enum PpStateCase {
    kStraussState = 1,
    kNrepState = 2,
    PP_STATE_NOT_SET = 0,
  };

  static inline const PPState* internal_default_instance() {
    return reinterpret_cast<const PPState*>(
               &_PPState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PPState& a, PPState& b) {
    a.Swap(&b);
  }
  inline void Swap(PPState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PPState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PPState* New() const final {
    return CreateMaybeMessage<PPState>(nullptr);
  }

  PPState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PPState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PPState& from);
  void MergeFrom(const PPState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PPState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PPState";
  }
  protected:
  explicit PPState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_state_2eproto);
    return ::descriptor_table_state_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStraussStateFieldNumber = 1,
    kNrepStateFieldNumber = 2,
  };
  // .StraussState strauss_state = 1;
  bool has_strauss_state() const;
  private:
  bool _internal_has_strauss_state() const;
  public:
  void clear_strauss_state();
  const ::StraussState& strauss_state() const;
  ::StraussState* release_strauss_state();
  ::StraussState* mutable_strauss_state();
  void set_allocated_strauss_state(::StraussState* strauss_state);
  private:
  const ::StraussState& _internal_strauss_state() const;
  ::StraussState* _internal_mutable_strauss_state();
  public:
  void unsafe_arena_set_allocated_strauss_state(
      ::StraussState* strauss_state);
  ::StraussState* unsafe_arena_release_strauss_state();

  // .NrepState nrep_state = 2;
  bool has_nrep_state() const;
  private:
  bool _internal_has_nrep_state() const;
  public:
  void clear_nrep_state();
  const ::NrepState& nrep_state() const;
  ::NrepState* release_nrep_state();
  ::NrepState* mutable_nrep_state();
  void set_allocated_nrep_state(::NrepState* nrep_state);
  private:
  const ::NrepState& _internal_nrep_state() const;
  ::NrepState* _internal_mutable_nrep_state();
  public:
  void unsafe_arena_set_allocated_nrep_state(
      ::NrepState* nrep_state);
  ::NrepState* unsafe_arena_release_nrep_state();

  void clear_pp_state();
  PpStateCase pp_state_case() const;
  // @@protoc_insertion_point(class_scope:PPState)
 private:
  class _Internal;
  void set_has_strauss_state();
  void set_has_nrep_state();

  inline bool has_pp_state() const;
  inline void clear_has_pp_state();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union PpStateUnion {
    PpStateUnion() {}
    ::StraussState* strauss_state_;
    ::NrepState* nrep_state_;
  } pp_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_state_2eproto;
};
// -------------------------------------------------------------------

class MultivariateMixtureState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MultivariateMixtureState) */ {
 public:
  inline MultivariateMixtureState() : MultivariateMixtureState(nullptr) {}
  virtual ~MultivariateMixtureState();

  MultivariateMixtureState(const MultivariateMixtureState& from);
  MultivariateMixtureState(MultivariateMixtureState&& from) noexcept
    : MultivariateMixtureState() {
    *this = ::std::move(from);
  }

  inline MultivariateMixtureState& operator=(const MultivariateMixtureState& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultivariateMixtureState& operator=(MultivariateMixtureState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultivariateMixtureState& default_instance();

  static inline const MultivariateMixtureState* internal_default_instance() {
    return reinterpret_cast<const MultivariateMixtureState*>(
               &_MultivariateMixtureState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MultivariateMixtureState& a, MultivariateMixtureState& b) {
    a.Swap(&b);
  }
  inline void Swap(MultivariateMixtureState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultivariateMixtureState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultivariateMixtureState* New() const final {
    return CreateMaybeMessage<MultivariateMixtureState>(nullptr);
  }

  MultivariateMixtureState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultivariateMixtureState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultivariateMixtureState& from);
  void MergeFrom(const MultivariateMixtureState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultivariateMixtureState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MultivariateMixtureState";
  }
  protected:
  explicit MultivariateMixtureState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_state_2eproto);
    return ::descriptor_table_state_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAMeansFieldNumber = 4,
    kNaMeansFieldNumber = 5,
    kAPrecsFieldNumber = 6,
    kNaPrecsFieldNumber = 7,
    kClusAllocFieldNumber = 10,
    kAJumpsFieldNumber = 8,
    kNaJumpsFieldNumber = 9,
    kPpStateFieldNumber = 12,
    kMaFieldNumber = 1,
    kMnaFieldNumber = 2,
    kUFieldNumber = 11,
    kMtotFieldNumber = 3,
  };
  // repeated .EigenVector a_means = 4;
  int a_means_size() const;
  private:
  int _internal_a_means_size() const;
  public:
  void clear_a_means();
  ::EigenVector* mutable_a_means(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenVector >*
      mutable_a_means();
  private:
  const ::EigenVector& _internal_a_means(int index) const;
  ::EigenVector* _internal_add_a_means();
  public:
  const ::EigenVector& a_means(int index) const;
  ::EigenVector* add_a_means();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenVector >&
      a_means() const;

  // repeated .EigenVector na_means = 5;
  int na_means_size() const;
  private:
  int _internal_na_means_size() const;
  public:
  void clear_na_means();
  ::EigenVector* mutable_na_means(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenVector >*
      mutable_na_means();
  private:
  const ::EigenVector& _internal_na_means(int index) const;
  ::EigenVector* _internal_add_na_means();
  public:
  const ::EigenVector& na_means(int index) const;
  ::EigenVector* add_na_means();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenVector >&
      na_means() const;

  // repeated .EigenMatrix a_precs = 6;
  int a_precs_size() const;
  private:
  int _internal_a_precs_size() const;
  public:
  void clear_a_precs();
  ::EigenMatrix* mutable_a_precs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenMatrix >*
      mutable_a_precs();
  private:
  const ::EigenMatrix& _internal_a_precs(int index) const;
  ::EigenMatrix* _internal_add_a_precs();
  public:
  const ::EigenMatrix& a_precs(int index) const;
  ::EigenMatrix* add_a_precs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenMatrix >&
      a_precs() const;

  // repeated .EigenMatrix na_precs = 7;
  int na_precs_size() const;
  private:
  int _internal_na_precs_size() const;
  public:
  void clear_na_precs();
  ::EigenMatrix* mutable_na_precs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenMatrix >*
      mutable_na_precs();
  private:
  const ::EigenMatrix& _internal_na_precs(int index) const;
  ::EigenMatrix* _internal_add_na_precs();
  public:
  const ::EigenMatrix& na_precs(int index) const;
  ::EigenMatrix* add_na_precs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenMatrix >&
      na_precs() const;

  // repeated int32 clus_alloc = 10;
  int clus_alloc_size() const;
  private:
  int _internal_clus_alloc_size() const;
  public:
  void clear_clus_alloc();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_clus_alloc(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_clus_alloc() const;
  void _internal_add_clus_alloc(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_clus_alloc();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 clus_alloc(int index) const;
  void set_clus_alloc(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_clus_alloc(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      clus_alloc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_clus_alloc();

  // .EigenVector a_jumps = 8;
  bool has_a_jumps() const;
  private:
  bool _internal_has_a_jumps() const;
  public:
  void clear_a_jumps();
  const ::EigenVector& a_jumps() const;
  ::EigenVector* release_a_jumps();
  ::EigenVector* mutable_a_jumps();
  void set_allocated_a_jumps(::EigenVector* a_jumps);
  private:
  const ::EigenVector& _internal_a_jumps() const;
  ::EigenVector* _internal_mutable_a_jumps();
  public:
  void unsafe_arena_set_allocated_a_jumps(
      ::EigenVector* a_jumps);
  ::EigenVector* unsafe_arena_release_a_jumps();

  // .EigenVector na_jumps = 9;
  bool has_na_jumps() const;
  private:
  bool _internal_has_na_jumps() const;
  public:
  void clear_na_jumps();
  const ::EigenVector& na_jumps() const;
  ::EigenVector* release_na_jumps();
  ::EigenVector* mutable_na_jumps();
  void set_allocated_na_jumps(::EigenVector* na_jumps);
  private:
  const ::EigenVector& _internal_na_jumps() const;
  ::EigenVector* _internal_mutable_na_jumps();
  public:
  void unsafe_arena_set_allocated_na_jumps(
      ::EigenVector* na_jumps);
  ::EigenVector* unsafe_arena_release_na_jumps();

  // .PPState pp_state = 12;
  bool has_pp_state() const;
  private:
  bool _internal_has_pp_state() const;
  public:
  void clear_pp_state();
  const ::PPState& pp_state() const;
  ::PPState* release_pp_state();
  ::PPState* mutable_pp_state();
  void set_allocated_pp_state(::PPState* pp_state);
  private:
  const ::PPState& _internal_pp_state() const;
  ::PPState* _internal_mutable_pp_state();
  public:
  void unsafe_arena_set_allocated_pp_state(
      ::PPState* pp_state);
  ::PPState* unsafe_arena_release_pp_state();

  // int32 ma = 1;
  void clear_ma();
  ::PROTOBUF_NAMESPACE_ID::int32 ma() const;
  void set_ma(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ma() const;
  void _internal_set_ma(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mna = 2;
  void clear_mna();
  ::PROTOBUF_NAMESPACE_ID::int32 mna() const;
  void set_mna(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mna() const;
  void _internal_set_mna(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double u = 11;
  void clear_u();
  double u() const;
  void set_u(double value);
  private:
  double _internal_u() const;
  void _internal_set_u(double value);
  public:

  // int32 mtot = 3;
  void clear_mtot();
  ::PROTOBUF_NAMESPACE_ID::int32 mtot() const;
  void set_mtot(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mtot() const;
  void _internal_set_mtot(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MultivariateMixtureState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenVector > a_means_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenVector > na_means_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenMatrix > a_precs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenMatrix > na_precs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > clus_alloc_;
  mutable std::atomic<int> _clus_alloc_cached_byte_size_;
  ::EigenVector* a_jumps_;
  ::EigenVector* na_jumps_;
  ::PPState* pp_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 ma_;
  ::PROTOBUF_NAMESPACE_ID::int32 mna_;
  double u_;
  ::PROTOBUF_NAMESPACE_ID::int32 mtot_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_2eproto;
};
// -------------------------------------------------------------------

class UnivariateMixtureState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnivariateMixtureState) */ {
 public:
  inline UnivariateMixtureState() : UnivariateMixtureState(nullptr) {}
  virtual ~UnivariateMixtureState();

  UnivariateMixtureState(const UnivariateMixtureState& from);
  UnivariateMixtureState(UnivariateMixtureState&& from) noexcept
    : UnivariateMixtureState() {
    *this = ::std::move(from);
  }

  inline UnivariateMixtureState& operator=(const UnivariateMixtureState& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnivariateMixtureState& operator=(UnivariateMixtureState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnivariateMixtureState& default_instance();

  static inline const UnivariateMixtureState* internal_default_instance() {
    return reinterpret_cast<const UnivariateMixtureState*>(
               &_UnivariateMixtureState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UnivariateMixtureState& a, UnivariateMixtureState& b) {
    a.Swap(&b);
  }
  inline void Swap(UnivariateMixtureState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnivariateMixtureState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnivariateMixtureState* New() const final {
    return CreateMaybeMessage<UnivariateMixtureState>(nullptr);
  }

  UnivariateMixtureState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnivariateMixtureState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnivariateMixtureState& from);
  void MergeFrom(const UnivariateMixtureState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnivariateMixtureState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnivariateMixtureState";
  }
  protected:
  explicit UnivariateMixtureState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_state_2eproto);
    return ::descriptor_table_state_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClusAllocFieldNumber = 10,
    kAMeansFieldNumber = 4,
    kNaMeansFieldNumber = 5,
    kAPrecsFieldNumber = 6,
    kNaPrecsFieldNumber = 7,
    kAJumpsFieldNumber = 8,
    kNaJumpsFieldNumber = 9,
    kPpStateFieldNumber = 12,
    kMaFieldNumber = 1,
    kMnaFieldNumber = 2,
    kUFieldNumber = 11,
    kMtotFieldNumber = 3,
  };
  // repeated int32 clus_alloc = 10;
  int clus_alloc_size() const;
  private:
  int _internal_clus_alloc_size() const;
  public:
  void clear_clus_alloc();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_clus_alloc(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_clus_alloc() const;
  void _internal_add_clus_alloc(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_clus_alloc();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 clus_alloc(int index) const;
  void set_clus_alloc(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_clus_alloc(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      clus_alloc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_clus_alloc();

  // .EigenVector a_means = 4;
  bool has_a_means() const;
  private:
  bool _internal_has_a_means() const;
  public:
  void clear_a_means();
  const ::EigenVector& a_means() const;
  ::EigenVector* release_a_means();
  ::EigenVector* mutable_a_means();
  void set_allocated_a_means(::EigenVector* a_means);
  private:
  const ::EigenVector& _internal_a_means() const;
  ::EigenVector* _internal_mutable_a_means();
  public:
  void unsafe_arena_set_allocated_a_means(
      ::EigenVector* a_means);
  ::EigenVector* unsafe_arena_release_a_means();

  // .EigenVector na_means = 5;
  bool has_na_means() const;
  private:
  bool _internal_has_na_means() const;
  public:
  void clear_na_means();
  const ::EigenVector& na_means() const;
  ::EigenVector* release_na_means();
  ::EigenVector* mutable_na_means();
  void set_allocated_na_means(::EigenVector* na_means);
  private:
  const ::EigenVector& _internal_na_means() const;
  ::EigenVector* _internal_mutable_na_means();
  public:
  void unsafe_arena_set_allocated_na_means(
      ::EigenVector* na_means);
  ::EigenVector* unsafe_arena_release_na_means();

  // .EigenVector a_precs = 6;
  bool has_a_precs() const;
  private:
  bool _internal_has_a_precs() const;
  public:
  void clear_a_precs();
  const ::EigenVector& a_precs() const;
  ::EigenVector* release_a_precs();
  ::EigenVector* mutable_a_precs();
  void set_allocated_a_precs(::EigenVector* a_precs);
  private:
  const ::EigenVector& _internal_a_precs() const;
  ::EigenVector* _internal_mutable_a_precs();
  public:
  void unsafe_arena_set_allocated_a_precs(
      ::EigenVector* a_precs);
  ::EigenVector* unsafe_arena_release_a_precs();

  // .EigenVector na_precs = 7;
  bool has_na_precs() const;
  private:
  bool _internal_has_na_precs() const;
  public:
  void clear_na_precs();
  const ::EigenVector& na_precs() const;
  ::EigenVector* release_na_precs();
  ::EigenVector* mutable_na_precs();
  void set_allocated_na_precs(::EigenVector* na_precs);
  private:
  const ::EigenVector& _internal_na_precs() const;
  ::EigenVector* _internal_mutable_na_precs();
  public:
  void unsafe_arena_set_allocated_na_precs(
      ::EigenVector* na_precs);
  ::EigenVector* unsafe_arena_release_na_precs();

  // .EigenVector a_jumps = 8;
  bool has_a_jumps() const;
  private:
  bool _internal_has_a_jumps() const;
  public:
  void clear_a_jumps();
  const ::EigenVector& a_jumps() const;
  ::EigenVector* release_a_jumps();
  ::EigenVector* mutable_a_jumps();
  void set_allocated_a_jumps(::EigenVector* a_jumps);
  private:
  const ::EigenVector& _internal_a_jumps() const;
  ::EigenVector* _internal_mutable_a_jumps();
  public:
  void unsafe_arena_set_allocated_a_jumps(
      ::EigenVector* a_jumps);
  ::EigenVector* unsafe_arena_release_a_jumps();

  // .EigenVector na_jumps = 9;
  bool has_na_jumps() const;
  private:
  bool _internal_has_na_jumps() const;
  public:
  void clear_na_jumps();
  const ::EigenVector& na_jumps() const;
  ::EigenVector* release_na_jumps();
  ::EigenVector* mutable_na_jumps();
  void set_allocated_na_jumps(::EigenVector* na_jumps);
  private:
  const ::EigenVector& _internal_na_jumps() const;
  ::EigenVector* _internal_mutable_na_jumps();
  public:
  void unsafe_arena_set_allocated_na_jumps(
      ::EigenVector* na_jumps);
  ::EigenVector* unsafe_arena_release_na_jumps();

  // .PPState pp_state = 12;
  bool has_pp_state() const;
  private:
  bool _internal_has_pp_state() const;
  public:
  void clear_pp_state();
  const ::PPState& pp_state() const;
  ::PPState* release_pp_state();
  ::PPState* mutable_pp_state();
  void set_allocated_pp_state(::PPState* pp_state);
  private:
  const ::PPState& _internal_pp_state() const;
  ::PPState* _internal_mutable_pp_state();
  public:
  void unsafe_arena_set_allocated_pp_state(
      ::PPState* pp_state);
  ::PPState* unsafe_arena_release_pp_state();

  // int32 ma = 1;
  void clear_ma();
  ::PROTOBUF_NAMESPACE_ID::int32 ma() const;
  void set_ma(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ma() const;
  void _internal_set_ma(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mna = 2;
  void clear_mna();
  ::PROTOBUF_NAMESPACE_ID::int32 mna() const;
  void set_mna(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mna() const;
  void _internal_set_mna(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double u = 11;
  void clear_u();
  double u() const;
  void set_u(double value);
  private:
  double _internal_u() const;
  void _internal_set_u(double value);
  public:

  // int32 mtot = 3;
  void clear_mtot();
  ::PROTOBUF_NAMESPACE_ID::int32 mtot() const;
  void set_mtot(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mtot() const;
  void _internal_set_mtot(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:UnivariateMixtureState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > clus_alloc_;
  mutable std::atomic<int> _clus_alloc_cached_byte_size_;
  ::EigenVector* a_means_;
  ::EigenVector* na_means_;
  ::EigenVector* a_precs_;
  ::EigenVector* na_precs_;
  ::EigenVector* a_jumps_;
  ::EigenVector* na_jumps_;
  ::PPState* pp_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 ma_;
  ::PROTOBUF_NAMESPACE_ID::int32 mna_;
  double u_;
  ::PROTOBUF_NAMESPACE_ID::int32 mtot_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_2eproto;
};
// -------------------------------------------------------------------

class BernoulliMixtureState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BernoulliMixtureState) */ {
 public:
  inline BernoulliMixtureState() : BernoulliMixtureState(nullptr) {}
  virtual ~BernoulliMixtureState();

  BernoulliMixtureState(const BernoulliMixtureState& from);
  BernoulliMixtureState(BernoulliMixtureState&& from) noexcept
    : BernoulliMixtureState() {
    *this = ::std::move(from);
  }

  inline BernoulliMixtureState& operator=(const BernoulliMixtureState& from) {
    CopyFrom(from);
    return *this;
  }
  inline BernoulliMixtureState& operator=(BernoulliMixtureState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BernoulliMixtureState& default_instance();

  static inline const BernoulliMixtureState* internal_default_instance() {
    return reinterpret_cast<const BernoulliMixtureState*>(
               &_BernoulliMixtureState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BernoulliMixtureState& a, BernoulliMixtureState& b) {
    a.Swap(&b);
  }
  inline void Swap(BernoulliMixtureState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BernoulliMixtureState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BernoulliMixtureState* New() const final {
    return CreateMaybeMessage<BernoulliMixtureState>(nullptr);
  }

  BernoulliMixtureState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BernoulliMixtureState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BernoulliMixtureState& from);
  void MergeFrom(const BernoulliMixtureState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BernoulliMixtureState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BernoulliMixtureState";
  }
  protected:
  explicit BernoulliMixtureState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_state_2eproto);
    return ::descriptor_table_state_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAProbsFieldNumber = 4,
    kNaProbsFieldNumber = 5,
    kClusAllocFieldNumber = 10,
    kAJumpsFieldNumber = 6,
    kNaJumpsFieldNumber = 7,
    kPpStateFieldNumber = 12,
    kMaFieldNumber = 1,
    kMnaFieldNumber = 2,
    kUFieldNumber = 11,
    kMtotFieldNumber = 3,
  };
  // repeated .EigenVector a_probs = 4;
  int a_probs_size() const;
  private:
  int _internal_a_probs_size() const;
  public:
  void clear_a_probs();
  ::EigenVector* mutable_a_probs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenVector >*
      mutable_a_probs();
  private:
  const ::EigenVector& _internal_a_probs(int index) const;
  ::EigenVector* _internal_add_a_probs();
  public:
  const ::EigenVector& a_probs(int index) const;
  ::EigenVector* add_a_probs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenVector >&
      a_probs() const;

  // repeated .EigenVector na_probs = 5;
  int na_probs_size() const;
  private:
  int _internal_na_probs_size() const;
  public:
  void clear_na_probs();
  ::EigenVector* mutable_na_probs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenVector >*
      mutable_na_probs();
  private:
  const ::EigenVector& _internal_na_probs(int index) const;
  ::EigenVector* _internal_add_na_probs();
  public:
  const ::EigenVector& na_probs(int index) const;
  ::EigenVector* add_na_probs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenVector >&
      na_probs() const;

  // repeated int32 clus_alloc = 10;
  int clus_alloc_size() const;
  private:
  int _internal_clus_alloc_size() const;
  public:
  void clear_clus_alloc();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_clus_alloc(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_clus_alloc() const;
  void _internal_add_clus_alloc(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_clus_alloc();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 clus_alloc(int index) const;
  void set_clus_alloc(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_clus_alloc(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      clus_alloc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_clus_alloc();

  // .EigenVector a_jumps = 6;
  bool has_a_jumps() const;
  private:
  bool _internal_has_a_jumps() const;
  public:
  void clear_a_jumps();
  const ::EigenVector& a_jumps() const;
  ::EigenVector* release_a_jumps();
  ::EigenVector* mutable_a_jumps();
  void set_allocated_a_jumps(::EigenVector* a_jumps);
  private:
  const ::EigenVector& _internal_a_jumps() const;
  ::EigenVector* _internal_mutable_a_jumps();
  public:
  void unsafe_arena_set_allocated_a_jumps(
      ::EigenVector* a_jumps);
  ::EigenVector* unsafe_arena_release_a_jumps();

  // .EigenVector na_jumps = 7;
  bool has_na_jumps() const;
  private:
  bool _internal_has_na_jumps() const;
  public:
  void clear_na_jumps();
  const ::EigenVector& na_jumps() const;
  ::EigenVector* release_na_jumps();
  ::EigenVector* mutable_na_jumps();
  void set_allocated_na_jumps(::EigenVector* na_jumps);
  private:
  const ::EigenVector& _internal_na_jumps() const;
  ::EigenVector* _internal_mutable_na_jumps();
  public:
  void unsafe_arena_set_allocated_na_jumps(
      ::EigenVector* na_jumps);
  ::EigenVector* unsafe_arena_release_na_jumps();

  // .PPState pp_state = 12;
  bool has_pp_state() const;
  private:
  bool _internal_has_pp_state() const;
  public:
  void clear_pp_state();
  const ::PPState& pp_state() const;
  ::PPState* release_pp_state();
  ::PPState* mutable_pp_state();
  void set_allocated_pp_state(::PPState* pp_state);
  private:
  const ::PPState& _internal_pp_state() const;
  ::PPState* _internal_mutable_pp_state();
  public:
  void unsafe_arena_set_allocated_pp_state(
      ::PPState* pp_state);
  ::PPState* unsafe_arena_release_pp_state();

  // int32 ma = 1;
  void clear_ma();
  ::PROTOBUF_NAMESPACE_ID::int32 ma() const;
  void set_ma(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ma() const;
  void _internal_set_ma(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mna = 2;
  void clear_mna();
  ::PROTOBUF_NAMESPACE_ID::int32 mna() const;
  void set_mna(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mna() const;
  void _internal_set_mna(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double u = 11;
  void clear_u();
  double u() const;
  void set_u(double value);
  private:
  double _internal_u() const;
  void _internal_set_u(double value);
  public:

  // int32 mtot = 3;
  void clear_mtot();
  ::PROTOBUF_NAMESPACE_ID::int32 mtot() const;
  void set_mtot(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mtot() const;
  void _internal_set_mtot(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BernoulliMixtureState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenVector > a_probs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenVector > na_probs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > clus_alloc_;
  mutable std::atomic<int> _clus_alloc_cached_byte_size_;
  ::EigenVector* a_jumps_;
  ::EigenVector* na_jumps_;
  ::PPState* pp_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 ma_;
  ::PROTOBUF_NAMESPACE_ID::int32 mna_;
  double u_;
  ::PROTOBUF_NAMESPACE_ID::int32 mtot_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EigenMatrix

// uint32 rows = 1;
inline void EigenMatrix::clear_rows() {
  rows_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EigenMatrix::_internal_rows() const {
  return rows_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EigenMatrix::rows() const {
  // @@protoc_insertion_point(field_get:EigenMatrix.rows)
  return _internal_rows();
}
inline void EigenMatrix::_internal_set_rows(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rows_ = value;
}
inline void EigenMatrix::set_rows(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rows(value);
  // @@protoc_insertion_point(field_set:EigenMatrix.rows)
}

// uint32 cols = 2;
inline void EigenMatrix::clear_cols() {
  cols_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EigenMatrix::_internal_cols() const {
  return cols_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EigenMatrix::cols() const {
  // @@protoc_insertion_point(field_get:EigenMatrix.cols)
  return _internal_cols();
}
inline void EigenMatrix::_internal_set_cols(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cols_ = value;
}
inline void EigenMatrix::set_cols(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cols(value);
  // @@protoc_insertion_point(field_set:EigenMatrix.cols)
}

// repeated double data = 3;
inline int EigenMatrix::_internal_data_size() const {
  return data_.size();
}
inline int EigenMatrix::data_size() const {
  return _internal_data_size();
}
inline void EigenMatrix::clear_data() {
  data_.Clear();
}
inline double EigenMatrix::_internal_data(int index) const {
  return data_.Get(index);
}
inline double EigenMatrix::data(int index) const {
  // @@protoc_insertion_point(field_get:EigenMatrix.data)
  return _internal_data(index);
}
inline void EigenMatrix::set_data(int index, double value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:EigenMatrix.data)
}
inline void EigenMatrix::_internal_add_data(double value) {
  data_.Add(value);
}
inline void EigenMatrix::add_data(double value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:EigenMatrix.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
EigenMatrix::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
EigenMatrix::data() const {
  // @@protoc_insertion_point(field_list:EigenMatrix.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
EigenMatrix::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
EigenMatrix::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:EigenMatrix.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// EigenVector

// uint32 size = 1;
inline void EigenVector::clear_size() {
  size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EigenVector::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EigenVector::size() const {
  // @@protoc_insertion_point(field_get:EigenVector.size)
  return _internal_size();
}
inline void EigenVector::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  size_ = value;
}
inline void EigenVector::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:EigenVector.size)
}

// repeated double data = 2;
inline int EigenVector::_internal_data_size() const {
  return data_.size();
}
inline int EigenVector::data_size() const {
  return _internal_data_size();
}
inline void EigenVector::clear_data() {
  data_.Clear();
}
inline double EigenVector::_internal_data(int index) const {
  return data_.Get(index);
}
inline double EigenVector::data(int index) const {
  // @@protoc_insertion_point(field_get:EigenVector.data)
  return _internal_data(index);
}
inline void EigenVector::set_data(int index, double value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:EigenVector.data)
}
inline void EigenVector::_internal_add_data(double value) {
  data_.Add(value);
}
inline void EigenVector::add_data(double value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:EigenVector.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
EigenVector::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
EigenVector::data() const {
  // @@protoc_insertion_point(field_list:EigenVector.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
EigenVector::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
EigenVector::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:EigenVector.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// StraussState

// double beta = 1;
inline void StraussState::clear_beta() {
  beta_ = 0;
}
inline double StraussState::_internal_beta() const {
  return beta_;
}
inline double StraussState::beta() const {
  // @@protoc_insertion_point(field_get:StraussState.beta)
  return _internal_beta();
}
inline void StraussState::_internal_set_beta(double value) {
  
  beta_ = value;
}
inline void StraussState::set_beta(double value) {
  _internal_set_beta(value);
  // @@protoc_insertion_point(field_set:StraussState.beta)
}

// double gamma = 2;
inline void StraussState::clear_gamma() {
  gamma_ = 0;
}
inline double StraussState::_internal_gamma() const {
  return gamma_;
}
inline double StraussState::gamma() const {
  // @@protoc_insertion_point(field_get:StraussState.gamma)
  return _internal_gamma();
}
inline void StraussState::_internal_set_gamma(double value) {
  
  gamma_ = value;
}
inline void StraussState::set_gamma(double value) {
  _internal_set_gamma(value);
  // @@protoc_insertion_point(field_set:StraussState.gamma)
}

// double R = 3;
inline void StraussState::clear_r() {
  r_ = 0;
}
inline double StraussState::_internal_r() const {
  return r_;
}
inline double StraussState::r() const {
  // @@protoc_insertion_point(field_get:StraussState.R)
  return _internal_r();
}
inline void StraussState::_internal_set_r(double value) {
  
  r_ = value;
}
inline void StraussState::set_r(double value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:StraussState.R)
}

// double birth_prob = 4;
inline void StraussState::clear_birth_prob() {
  birth_prob_ = 0;
}
inline double StraussState::_internal_birth_prob() const {
  return birth_prob_;
}
inline double StraussState::birth_prob() const {
  // @@protoc_insertion_point(field_get:StraussState.birth_prob)
  return _internal_birth_prob();
}
inline void StraussState::_internal_set_birth_prob(double value) {
  
  birth_prob_ = value;
}
inline void StraussState::set_birth_prob(double value) {
  _internal_set_birth_prob(value);
  // @@protoc_insertion_point(field_set:StraussState.birth_prob)
}

// double birth_arate = 5;
inline void StraussState::clear_birth_arate() {
  birth_arate_ = 0;
}
inline double StraussState::_internal_birth_arate() const {
  return birth_arate_;
}
inline double StraussState::birth_arate() const {
  // @@protoc_insertion_point(field_get:StraussState.birth_arate)
  return _internal_birth_arate();
}
inline void StraussState::_internal_set_birth_arate(double value) {
  
  birth_arate_ = value;
}
inline void StraussState::set_birth_arate(double value) {
  _internal_set_birth_arate(value);
  // @@protoc_insertion_point(field_set:StraussState.birth_arate)
}

// -------------------------------------------------------------------

// NrepState

// double u = 1;
inline void NrepState::clear_u() {
  u_ = 0;
}
inline double NrepState::_internal_u() const {
  return u_;
}
inline double NrepState::u() const {
  // @@protoc_insertion_point(field_get:NrepState.u)
  return _internal_u();
}
inline void NrepState::_internal_set_u(double value) {
  
  u_ = value;
}
inline void NrepState::set_u(double value) {
  _internal_set_u(value);
  // @@protoc_insertion_point(field_set:NrepState.u)
}

// double p = 2;
inline void NrepState::clear_p() {
  p_ = 0;
}
inline double NrepState::_internal_p() const {
  return p_;
}
inline double NrepState::p() const {
  // @@protoc_insertion_point(field_get:NrepState.p)
  return _internal_p();
}
inline void NrepState::_internal_set_p(double value) {
  
  p_ = value;
}
inline void NrepState::set_p(double value) {
  _internal_set_p(value);
  // @@protoc_insertion_point(field_set:NrepState.p)
}

// double tau = 3;
inline void NrepState::clear_tau() {
  tau_ = 0;
}
inline double NrepState::_internal_tau() const {
  return tau_;
}
inline double NrepState::tau() const {
  // @@protoc_insertion_point(field_get:NrepState.tau)
  return _internal_tau();
}
inline void NrepState::_internal_set_tau(double value) {
  
  tau_ = value;
}
inline void NrepState::set_tau(double value) {
  _internal_set_tau(value);
  // @@protoc_insertion_point(field_set:NrepState.tau)
}

// -------------------------------------------------------------------

// PPState

// .StraussState strauss_state = 1;
inline bool PPState::_internal_has_strauss_state() const {
  return pp_state_case() == kStraussState;
}
inline bool PPState::has_strauss_state() const {
  return _internal_has_strauss_state();
}
inline void PPState::set_has_strauss_state() {
  _oneof_case_[0] = kStraussState;
}
inline void PPState::clear_strauss_state() {
  if (_internal_has_strauss_state()) {
    if (GetArena() == nullptr) {
      delete pp_state_.strauss_state_;
    }
    clear_has_pp_state();
  }
}
inline ::StraussState* PPState::release_strauss_state() {
  // @@protoc_insertion_point(field_release:PPState.strauss_state)
  if (_internal_has_strauss_state()) {
    clear_has_pp_state();
      ::StraussState* temp = pp_state_.strauss_state_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    pp_state_.strauss_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::StraussState& PPState::_internal_strauss_state() const {
  return _internal_has_strauss_state()
      ? *pp_state_.strauss_state_
      : reinterpret_cast< ::StraussState&>(::_StraussState_default_instance_);
}
inline const ::StraussState& PPState::strauss_state() const {
  // @@protoc_insertion_point(field_get:PPState.strauss_state)
  return _internal_strauss_state();
}
inline ::StraussState* PPState::unsafe_arena_release_strauss_state() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PPState.strauss_state)
  if (_internal_has_strauss_state()) {
    clear_has_pp_state();
    ::StraussState* temp = pp_state_.strauss_state_;
    pp_state_.strauss_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PPState::unsafe_arena_set_allocated_strauss_state(::StraussState* strauss_state) {
  clear_pp_state();
  if (strauss_state) {
    set_has_strauss_state();
    pp_state_.strauss_state_ = strauss_state;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PPState.strauss_state)
}
inline ::StraussState* PPState::_internal_mutable_strauss_state() {
  if (!_internal_has_strauss_state()) {
    clear_pp_state();
    set_has_strauss_state();
    pp_state_.strauss_state_ = CreateMaybeMessage< ::StraussState >(GetArena());
  }
  return pp_state_.strauss_state_;
}
inline ::StraussState* PPState::mutable_strauss_state() {
  // @@protoc_insertion_point(field_mutable:PPState.strauss_state)
  return _internal_mutable_strauss_state();
}

// .NrepState nrep_state = 2;
inline bool PPState::_internal_has_nrep_state() const {
  return pp_state_case() == kNrepState;
}
inline bool PPState::has_nrep_state() const {
  return _internal_has_nrep_state();
}
inline void PPState::set_has_nrep_state() {
  _oneof_case_[0] = kNrepState;
}
inline void PPState::clear_nrep_state() {
  if (_internal_has_nrep_state()) {
    if (GetArena() == nullptr) {
      delete pp_state_.nrep_state_;
    }
    clear_has_pp_state();
  }
}
inline ::NrepState* PPState::release_nrep_state() {
  // @@protoc_insertion_point(field_release:PPState.nrep_state)
  if (_internal_has_nrep_state()) {
    clear_has_pp_state();
      ::NrepState* temp = pp_state_.nrep_state_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    pp_state_.nrep_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::NrepState& PPState::_internal_nrep_state() const {
  return _internal_has_nrep_state()
      ? *pp_state_.nrep_state_
      : reinterpret_cast< ::NrepState&>(::_NrepState_default_instance_);
}
inline const ::NrepState& PPState::nrep_state() const {
  // @@protoc_insertion_point(field_get:PPState.nrep_state)
  return _internal_nrep_state();
}
inline ::NrepState* PPState::unsafe_arena_release_nrep_state() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PPState.nrep_state)
  if (_internal_has_nrep_state()) {
    clear_has_pp_state();
    ::NrepState* temp = pp_state_.nrep_state_;
    pp_state_.nrep_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PPState::unsafe_arena_set_allocated_nrep_state(::NrepState* nrep_state) {
  clear_pp_state();
  if (nrep_state) {
    set_has_nrep_state();
    pp_state_.nrep_state_ = nrep_state;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PPState.nrep_state)
}
inline ::NrepState* PPState::_internal_mutable_nrep_state() {
  if (!_internal_has_nrep_state()) {
    clear_pp_state();
    set_has_nrep_state();
    pp_state_.nrep_state_ = CreateMaybeMessage< ::NrepState >(GetArena());
  }
  return pp_state_.nrep_state_;
}
inline ::NrepState* PPState::mutable_nrep_state() {
  // @@protoc_insertion_point(field_mutable:PPState.nrep_state)
  return _internal_mutable_nrep_state();
}

inline bool PPState::has_pp_state() const {
  return pp_state_case() != PP_STATE_NOT_SET;
}
inline void PPState::clear_has_pp_state() {
  _oneof_case_[0] = PP_STATE_NOT_SET;
}
inline PPState::PpStateCase PPState::pp_state_case() const {
  return PPState::PpStateCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// MultivariateMixtureState

// int32 ma = 1;
inline void MultivariateMixtureState::clear_ma() {
  ma_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MultivariateMixtureState::_internal_ma() const {
  return ma_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MultivariateMixtureState::ma() const {
  // @@protoc_insertion_point(field_get:MultivariateMixtureState.ma)
  return _internal_ma();
}
inline void MultivariateMixtureState::_internal_set_ma(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ma_ = value;
}
inline void MultivariateMixtureState::set_ma(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ma(value);
  // @@protoc_insertion_point(field_set:MultivariateMixtureState.ma)
}

// int32 mna = 2;
inline void MultivariateMixtureState::clear_mna() {
  mna_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MultivariateMixtureState::_internal_mna() const {
  return mna_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MultivariateMixtureState::mna() const {
  // @@protoc_insertion_point(field_get:MultivariateMixtureState.mna)
  return _internal_mna();
}
inline void MultivariateMixtureState::_internal_set_mna(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mna_ = value;
}
inline void MultivariateMixtureState::set_mna(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mna(value);
  // @@protoc_insertion_point(field_set:MultivariateMixtureState.mna)
}

// int32 mtot = 3;
inline void MultivariateMixtureState::clear_mtot() {
  mtot_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MultivariateMixtureState::_internal_mtot() const {
  return mtot_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MultivariateMixtureState::mtot() const {
  // @@protoc_insertion_point(field_get:MultivariateMixtureState.mtot)
  return _internal_mtot();
}
inline void MultivariateMixtureState::_internal_set_mtot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mtot_ = value;
}
inline void MultivariateMixtureState::set_mtot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mtot(value);
  // @@protoc_insertion_point(field_set:MultivariateMixtureState.mtot)
}

// repeated .EigenVector a_means = 4;
inline int MultivariateMixtureState::_internal_a_means_size() const {
  return a_means_.size();
}
inline int MultivariateMixtureState::a_means_size() const {
  return _internal_a_means_size();
}
inline void MultivariateMixtureState::clear_a_means() {
  a_means_.Clear();
}
inline ::EigenVector* MultivariateMixtureState::mutable_a_means(int index) {
  // @@protoc_insertion_point(field_mutable:MultivariateMixtureState.a_means)
  return a_means_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenVector >*
MultivariateMixtureState::mutable_a_means() {
  // @@protoc_insertion_point(field_mutable_list:MultivariateMixtureState.a_means)
  return &a_means_;
}
inline const ::EigenVector& MultivariateMixtureState::_internal_a_means(int index) const {
  return a_means_.Get(index);
}
inline const ::EigenVector& MultivariateMixtureState::a_means(int index) const {
  // @@protoc_insertion_point(field_get:MultivariateMixtureState.a_means)
  return _internal_a_means(index);
}
inline ::EigenVector* MultivariateMixtureState::_internal_add_a_means() {
  return a_means_.Add();
}
inline ::EigenVector* MultivariateMixtureState::add_a_means() {
  // @@protoc_insertion_point(field_add:MultivariateMixtureState.a_means)
  return _internal_add_a_means();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenVector >&
MultivariateMixtureState::a_means() const {
  // @@protoc_insertion_point(field_list:MultivariateMixtureState.a_means)
  return a_means_;
}

// repeated .EigenVector na_means = 5;
inline int MultivariateMixtureState::_internal_na_means_size() const {
  return na_means_.size();
}
inline int MultivariateMixtureState::na_means_size() const {
  return _internal_na_means_size();
}
inline void MultivariateMixtureState::clear_na_means() {
  na_means_.Clear();
}
inline ::EigenVector* MultivariateMixtureState::mutable_na_means(int index) {
  // @@protoc_insertion_point(field_mutable:MultivariateMixtureState.na_means)
  return na_means_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenVector >*
MultivariateMixtureState::mutable_na_means() {
  // @@protoc_insertion_point(field_mutable_list:MultivariateMixtureState.na_means)
  return &na_means_;
}
inline const ::EigenVector& MultivariateMixtureState::_internal_na_means(int index) const {
  return na_means_.Get(index);
}
inline const ::EigenVector& MultivariateMixtureState::na_means(int index) const {
  // @@protoc_insertion_point(field_get:MultivariateMixtureState.na_means)
  return _internal_na_means(index);
}
inline ::EigenVector* MultivariateMixtureState::_internal_add_na_means() {
  return na_means_.Add();
}
inline ::EigenVector* MultivariateMixtureState::add_na_means() {
  // @@protoc_insertion_point(field_add:MultivariateMixtureState.na_means)
  return _internal_add_na_means();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenVector >&
MultivariateMixtureState::na_means() const {
  // @@protoc_insertion_point(field_list:MultivariateMixtureState.na_means)
  return na_means_;
}

// repeated .EigenMatrix a_precs = 6;
inline int MultivariateMixtureState::_internal_a_precs_size() const {
  return a_precs_.size();
}
inline int MultivariateMixtureState::a_precs_size() const {
  return _internal_a_precs_size();
}
inline void MultivariateMixtureState::clear_a_precs() {
  a_precs_.Clear();
}
inline ::EigenMatrix* MultivariateMixtureState::mutable_a_precs(int index) {
  // @@protoc_insertion_point(field_mutable:MultivariateMixtureState.a_precs)
  return a_precs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenMatrix >*
MultivariateMixtureState::mutable_a_precs() {
  // @@protoc_insertion_point(field_mutable_list:MultivariateMixtureState.a_precs)
  return &a_precs_;
}
inline const ::EigenMatrix& MultivariateMixtureState::_internal_a_precs(int index) const {
  return a_precs_.Get(index);
}
inline const ::EigenMatrix& MultivariateMixtureState::a_precs(int index) const {
  // @@protoc_insertion_point(field_get:MultivariateMixtureState.a_precs)
  return _internal_a_precs(index);
}
inline ::EigenMatrix* MultivariateMixtureState::_internal_add_a_precs() {
  return a_precs_.Add();
}
inline ::EigenMatrix* MultivariateMixtureState::add_a_precs() {
  // @@protoc_insertion_point(field_add:MultivariateMixtureState.a_precs)
  return _internal_add_a_precs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenMatrix >&
MultivariateMixtureState::a_precs() const {
  // @@protoc_insertion_point(field_list:MultivariateMixtureState.a_precs)
  return a_precs_;
}

// repeated .EigenMatrix na_precs = 7;
inline int MultivariateMixtureState::_internal_na_precs_size() const {
  return na_precs_.size();
}
inline int MultivariateMixtureState::na_precs_size() const {
  return _internal_na_precs_size();
}
inline void MultivariateMixtureState::clear_na_precs() {
  na_precs_.Clear();
}
inline ::EigenMatrix* MultivariateMixtureState::mutable_na_precs(int index) {
  // @@protoc_insertion_point(field_mutable:MultivariateMixtureState.na_precs)
  return na_precs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenMatrix >*
MultivariateMixtureState::mutable_na_precs() {
  // @@protoc_insertion_point(field_mutable_list:MultivariateMixtureState.na_precs)
  return &na_precs_;
}
inline const ::EigenMatrix& MultivariateMixtureState::_internal_na_precs(int index) const {
  return na_precs_.Get(index);
}
inline const ::EigenMatrix& MultivariateMixtureState::na_precs(int index) const {
  // @@protoc_insertion_point(field_get:MultivariateMixtureState.na_precs)
  return _internal_na_precs(index);
}
inline ::EigenMatrix* MultivariateMixtureState::_internal_add_na_precs() {
  return na_precs_.Add();
}
inline ::EigenMatrix* MultivariateMixtureState::add_na_precs() {
  // @@protoc_insertion_point(field_add:MultivariateMixtureState.na_precs)
  return _internal_add_na_precs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenMatrix >&
MultivariateMixtureState::na_precs() const {
  // @@protoc_insertion_point(field_list:MultivariateMixtureState.na_precs)
  return na_precs_;
}

// .EigenVector a_jumps = 8;
inline bool MultivariateMixtureState::_internal_has_a_jumps() const {
  return this != internal_default_instance() && a_jumps_ != nullptr;
}
inline bool MultivariateMixtureState::has_a_jumps() const {
  return _internal_has_a_jumps();
}
inline void MultivariateMixtureState::clear_a_jumps() {
  if (GetArena() == nullptr && a_jumps_ != nullptr) {
    delete a_jumps_;
  }
  a_jumps_ = nullptr;
}
inline const ::EigenVector& MultivariateMixtureState::_internal_a_jumps() const {
  const ::EigenVector* p = a_jumps_;
  return p != nullptr ? *p : reinterpret_cast<const ::EigenVector&>(
      ::_EigenVector_default_instance_);
}
inline const ::EigenVector& MultivariateMixtureState::a_jumps() const {
  // @@protoc_insertion_point(field_get:MultivariateMixtureState.a_jumps)
  return _internal_a_jumps();
}
inline void MultivariateMixtureState::unsafe_arena_set_allocated_a_jumps(
    ::EigenVector* a_jumps) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(a_jumps_);
  }
  a_jumps_ = a_jumps;
  if (a_jumps) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MultivariateMixtureState.a_jumps)
}
inline ::EigenVector* MultivariateMixtureState::release_a_jumps() {
  
  ::EigenVector* temp = a_jumps_;
  a_jumps_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::EigenVector* MultivariateMixtureState::unsafe_arena_release_a_jumps() {
  // @@protoc_insertion_point(field_release:MultivariateMixtureState.a_jumps)
  
  ::EigenVector* temp = a_jumps_;
  a_jumps_ = nullptr;
  return temp;
}
inline ::EigenVector* MultivariateMixtureState::_internal_mutable_a_jumps() {
  
  if (a_jumps_ == nullptr) {
    auto* p = CreateMaybeMessage<::EigenVector>(GetArena());
    a_jumps_ = p;
  }
  return a_jumps_;
}
inline ::EigenVector* MultivariateMixtureState::mutable_a_jumps() {
  // @@protoc_insertion_point(field_mutable:MultivariateMixtureState.a_jumps)
  return _internal_mutable_a_jumps();
}
inline void MultivariateMixtureState::set_allocated_a_jumps(::EigenVector* a_jumps) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete a_jumps_;
  }
  if (a_jumps) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(a_jumps);
    if (message_arena != submessage_arena) {
      a_jumps = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, a_jumps, submessage_arena);
    }
    
  } else {
    
  }
  a_jumps_ = a_jumps;
  // @@protoc_insertion_point(field_set_allocated:MultivariateMixtureState.a_jumps)
}

// .EigenVector na_jumps = 9;
inline bool MultivariateMixtureState::_internal_has_na_jumps() const {
  return this != internal_default_instance() && na_jumps_ != nullptr;
}
inline bool MultivariateMixtureState::has_na_jumps() const {
  return _internal_has_na_jumps();
}
inline void MultivariateMixtureState::clear_na_jumps() {
  if (GetArena() == nullptr && na_jumps_ != nullptr) {
    delete na_jumps_;
  }
  na_jumps_ = nullptr;
}
inline const ::EigenVector& MultivariateMixtureState::_internal_na_jumps() const {
  const ::EigenVector* p = na_jumps_;
  return p != nullptr ? *p : reinterpret_cast<const ::EigenVector&>(
      ::_EigenVector_default_instance_);
}
inline const ::EigenVector& MultivariateMixtureState::na_jumps() const {
  // @@protoc_insertion_point(field_get:MultivariateMixtureState.na_jumps)
  return _internal_na_jumps();
}
inline void MultivariateMixtureState::unsafe_arena_set_allocated_na_jumps(
    ::EigenVector* na_jumps) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(na_jumps_);
  }
  na_jumps_ = na_jumps;
  if (na_jumps) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MultivariateMixtureState.na_jumps)
}
inline ::EigenVector* MultivariateMixtureState::release_na_jumps() {
  
  ::EigenVector* temp = na_jumps_;
  na_jumps_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::EigenVector* MultivariateMixtureState::unsafe_arena_release_na_jumps() {
  // @@protoc_insertion_point(field_release:MultivariateMixtureState.na_jumps)
  
  ::EigenVector* temp = na_jumps_;
  na_jumps_ = nullptr;
  return temp;
}
inline ::EigenVector* MultivariateMixtureState::_internal_mutable_na_jumps() {
  
  if (na_jumps_ == nullptr) {
    auto* p = CreateMaybeMessage<::EigenVector>(GetArena());
    na_jumps_ = p;
  }
  return na_jumps_;
}
inline ::EigenVector* MultivariateMixtureState::mutable_na_jumps() {
  // @@protoc_insertion_point(field_mutable:MultivariateMixtureState.na_jumps)
  return _internal_mutable_na_jumps();
}
inline void MultivariateMixtureState::set_allocated_na_jumps(::EigenVector* na_jumps) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete na_jumps_;
  }
  if (na_jumps) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(na_jumps);
    if (message_arena != submessage_arena) {
      na_jumps = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, na_jumps, submessage_arena);
    }
    
  } else {
    
  }
  na_jumps_ = na_jumps;
  // @@protoc_insertion_point(field_set_allocated:MultivariateMixtureState.na_jumps)
}

// repeated int32 clus_alloc = 10;
inline int MultivariateMixtureState::_internal_clus_alloc_size() const {
  return clus_alloc_.size();
}
inline int MultivariateMixtureState::clus_alloc_size() const {
  return _internal_clus_alloc_size();
}
inline void MultivariateMixtureState::clear_clus_alloc() {
  clus_alloc_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MultivariateMixtureState::_internal_clus_alloc(int index) const {
  return clus_alloc_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MultivariateMixtureState::clus_alloc(int index) const {
  // @@protoc_insertion_point(field_get:MultivariateMixtureState.clus_alloc)
  return _internal_clus_alloc(index);
}
inline void MultivariateMixtureState::set_clus_alloc(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  clus_alloc_.Set(index, value);
  // @@protoc_insertion_point(field_set:MultivariateMixtureState.clus_alloc)
}
inline void MultivariateMixtureState::_internal_add_clus_alloc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  clus_alloc_.Add(value);
}
inline void MultivariateMixtureState::add_clus_alloc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_clus_alloc(value);
  // @@protoc_insertion_point(field_add:MultivariateMixtureState.clus_alloc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MultivariateMixtureState::_internal_clus_alloc() const {
  return clus_alloc_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MultivariateMixtureState::clus_alloc() const {
  // @@protoc_insertion_point(field_list:MultivariateMixtureState.clus_alloc)
  return _internal_clus_alloc();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MultivariateMixtureState::_internal_mutable_clus_alloc() {
  return &clus_alloc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MultivariateMixtureState::mutable_clus_alloc() {
  // @@protoc_insertion_point(field_mutable_list:MultivariateMixtureState.clus_alloc)
  return _internal_mutable_clus_alloc();
}

// double u = 11;
inline void MultivariateMixtureState::clear_u() {
  u_ = 0;
}
inline double MultivariateMixtureState::_internal_u() const {
  return u_;
}
inline double MultivariateMixtureState::u() const {
  // @@protoc_insertion_point(field_get:MultivariateMixtureState.u)
  return _internal_u();
}
inline void MultivariateMixtureState::_internal_set_u(double value) {
  
  u_ = value;
}
inline void MultivariateMixtureState::set_u(double value) {
  _internal_set_u(value);
  // @@protoc_insertion_point(field_set:MultivariateMixtureState.u)
}

// .PPState pp_state = 12;
inline bool MultivariateMixtureState::_internal_has_pp_state() const {
  return this != internal_default_instance() && pp_state_ != nullptr;
}
inline bool MultivariateMixtureState::has_pp_state() const {
  return _internal_has_pp_state();
}
inline void MultivariateMixtureState::clear_pp_state() {
  if (GetArena() == nullptr && pp_state_ != nullptr) {
    delete pp_state_;
  }
  pp_state_ = nullptr;
}
inline const ::PPState& MultivariateMixtureState::_internal_pp_state() const {
  const ::PPState* p = pp_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::PPState&>(
      ::_PPState_default_instance_);
}
inline const ::PPState& MultivariateMixtureState::pp_state() const {
  // @@protoc_insertion_point(field_get:MultivariateMixtureState.pp_state)
  return _internal_pp_state();
}
inline void MultivariateMixtureState::unsafe_arena_set_allocated_pp_state(
    ::PPState* pp_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pp_state_);
  }
  pp_state_ = pp_state;
  if (pp_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MultivariateMixtureState.pp_state)
}
inline ::PPState* MultivariateMixtureState::release_pp_state() {
  
  ::PPState* temp = pp_state_;
  pp_state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PPState* MultivariateMixtureState::unsafe_arena_release_pp_state() {
  // @@protoc_insertion_point(field_release:MultivariateMixtureState.pp_state)
  
  ::PPState* temp = pp_state_;
  pp_state_ = nullptr;
  return temp;
}
inline ::PPState* MultivariateMixtureState::_internal_mutable_pp_state() {
  
  if (pp_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::PPState>(GetArena());
    pp_state_ = p;
  }
  return pp_state_;
}
inline ::PPState* MultivariateMixtureState::mutable_pp_state() {
  // @@protoc_insertion_point(field_mutable:MultivariateMixtureState.pp_state)
  return _internal_mutable_pp_state();
}
inline void MultivariateMixtureState::set_allocated_pp_state(::PPState* pp_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pp_state_;
  }
  if (pp_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pp_state);
    if (message_arena != submessage_arena) {
      pp_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pp_state, submessage_arena);
    }
    
  } else {
    
  }
  pp_state_ = pp_state;
  // @@protoc_insertion_point(field_set_allocated:MultivariateMixtureState.pp_state)
}

// -------------------------------------------------------------------

// UnivariateMixtureState

// int32 ma = 1;
inline void UnivariateMixtureState::clear_ma() {
  ma_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnivariateMixtureState::_internal_ma() const {
  return ma_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnivariateMixtureState::ma() const {
  // @@protoc_insertion_point(field_get:UnivariateMixtureState.ma)
  return _internal_ma();
}
inline void UnivariateMixtureState::_internal_set_ma(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ma_ = value;
}
inline void UnivariateMixtureState::set_ma(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ma(value);
  // @@protoc_insertion_point(field_set:UnivariateMixtureState.ma)
}

// int32 mna = 2;
inline void UnivariateMixtureState::clear_mna() {
  mna_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnivariateMixtureState::_internal_mna() const {
  return mna_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnivariateMixtureState::mna() const {
  // @@protoc_insertion_point(field_get:UnivariateMixtureState.mna)
  return _internal_mna();
}
inline void UnivariateMixtureState::_internal_set_mna(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mna_ = value;
}
inline void UnivariateMixtureState::set_mna(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mna(value);
  // @@protoc_insertion_point(field_set:UnivariateMixtureState.mna)
}

// int32 mtot = 3;
inline void UnivariateMixtureState::clear_mtot() {
  mtot_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnivariateMixtureState::_internal_mtot() const {
  return mtot_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnivariateMixtureState::mtot() const {
  // @@protoc_insertion_point(field_get:UnivariateMixtureState.mtot)
  return _internal_mtot();
}
inline void UnivariateMixtureState::_internal_set_mtot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mtot_ = value;
}
inline void UnivariateMixtureState::set_mtot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mtot(value);
  // @@protoc_insertion_point(field_set:UnivariateMixtureState.mtot)
}

// .EigenVector a_means = 4;
inline bool UnivariateMixtureState::_internal_has_a_means() const {
  return this != internal_default_instance() && a_means_ != nullptr;
}
inline bool UnivariateMixtureState::has_a_means() const {
  return _internal_has_a_means();
}
inline void UnivariateMixtureState::clear_a_means() {
  if (GetArena() == nullptr && a_means_ != nullptr) {
    delete a_means_;
  }
  a_means_ = nullptr;
}
inline const ::EigenVector& UnivariateMixtureState::_internal_a_means() const {
  const ::EigenVector* p = a_means_;
  return p != nullptr ? *p : reinterpret_cast<const ::EigenVector&>(
      ::_EigenVector_default_instance_);
}
inline const ::EigenVector& UnivariateMixtureState::a_means() const {
  // @@protoc_insertion_point(field_get:UnivariateMixtureState.a_means)
  return _internal_a_means();
}
inline void UnivariateMixtureState::unsafe_arena_set_allocated_a_means(
    ::EigenVector* a_means) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(a_means_);
  }
  a_means_ = a_means;
  if (a_means) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UnivariateMixtureState.a_means)
}
inline ::EigenVector* UnivariateMixtureState::release_a_means() {
  
  ::EigenVector* temp = a_means_;
  a_means_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::EigenVector* UnivariateMixtureState::unsafe_arena_release_a_means() {
  // @@protoc_insertion_point(field_release:UnivariateMixtureState.a_means)
  
  ::EigenVector* temp = a_means_;
  a_means_ = nullptr;
  return temp;
}
inline ::EigenVector* UnivariateMixtureState::_internal_mutable_a_means() {
  
  if (a_means_ == nullptr) {
    auto* p = CreateMaybeMessage<::EigenVector>(GetArena());
    a_means_ = p;
  }
  return a_means_;
}
inline ::EigenVector* UnivariateMixtureState::mutable_a_means() {
  // @@protoc_insertion_point(field_mutable:UnivariateMixtureState.a_means)
  return _internal_mutable_a_means();
}
inline void UnivariateMixtureState::set_allocated_a_means(::EigenVector* a_means) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete a_means_;
  }
  if (a_means) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(a_means);
    if (message_arena != submessage_arena) {
      a_means = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, a_means, submessage_arena);
    }
    
  } else {
    
  }
  a_means_ = a_means;
  // @@protoc_insertion_point(field_set_allocated:UnivariateMixtureState.a_means)
}

// .EigenVector na_means = 5;
inline bool UnivariateMixtureState::_internal_has_na_means() const {
  return this != internal_default_instance() && na_means_ != nullptr;
}
inline bool UnivariateMixtureState::has_na_means() const {
  return _internal_has_na_means();
}
inline void UnivariateMixtureState::clear_na_means() {
  if (GetArena() == nullptr && na_means_ != nullptr) {
    delete na_means_;
  }
  na_means_ = nullptr;
}
inline const ::EigenVector& UnivariateMixtureState::_internal_na_means() const {
  const ::EigenVector* p = na_means_;
  return p != nullptr ? *p : reinterpret_cast<const ::EigenVector&>(
      ::_EigenVector_default_instance_);
}
inline const ::EigenVector& UnivariateMixtureState::na_means() const {
  // @@protoc_insertion_point(field_get:UnivariateMixtureState.na_means)
  return _internal_na_means();
}
inline void UnivariateMixtureState::unsafe_arena_set_allocated_na_means(
    ::EigenVector* na_means) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(na_means_);
  }
  na_means_ = na_means;
  if (na_means) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UnivariateMixtureState.na_means)
}
inline ::EigenVector* UnivariateMixtureState::release_na_means() {
  
  ::EigenVector* temp = na_means_;
  na_means_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::EigenVector* UnivariateMixtureState::unsafe_arena_release_na_means() {
  // @@protoc_insertion_point(field_release:UnivariateMixtureState.na_means)
  
  ::EigenVector* temp = na_means_;
  na_means_ = nullptr;
  return temp;
}
inline ::EigenVector* UnivariateMixtureState::_internal_mutable_na_means() {
  
  if (na_means_ == nullptr) {
    auto* p = CreateMaybeMessage<::EigenVector>(GetArena());
    na_means_ = p;
  }
  return na_means_;
}
inline ::EigenVector* UnivariateMixtureState::mutable_na_means() {
  // @@protoc_insertion_point(field_mutable:UnivariateMixtureState.na_means)
  return _internal_mutable_na_means();
}
inline void UnivariateMixtureState::set_allocated_na_means(::EigenVector* na_means) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete na_means_;
  }
  if (na_means) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(na_means);
    if (message_arena != submessage_arena) {
      na_means = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, na_means, submessage_arena);
    }
    
  } else {
    
  }
  na_means_ = na_means;
  // @@protoc_insertion_point(field_set_allocated:UnivariateMixtureState.na_means)
}

// .EigenVector a_precs = 6;
inline bool UnivariateMixtureState::_internal_has_a_precs() const {
  return this != internal_default_instance() && a_precs_ != nullptr;
}
inline bool UnivariateMixtureState::has_a_precs() const {
  return _internal_has_a_precs();
}
inline void UnivariateMixtureState::clear_a_precs() {
  if (GetArena() == nullptr && a_precs_ != nullptr) {
    delete a_precs_;
  }
  a_precs_ = nullptr;
}
inline const ::EigenVector& UnivariateMixtureState::_internal_a_precs() const {
  const ::EigenVector* p = a_precs_;
  return p != nullptr ? *p : reinterpret_cast<const ::EigenVector&>(
      ::_EigenVector_default_instance_);
}
inline const ::EigenVector& UnivariateMixtureState::a_precs() const {
  // @@protoc_insertion_point(field_get:UnivariateMixtureState.a_precs)
  return _internal_a_precs();
}
inline void UnivariateMixtureState::unsafe_arena_set_allocated_a_precs(
    ::EigenVector* a_precs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(a_precs_);
  }
  a_precs_ = a_precs;
  if (a_precs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UnivariateMixtureState.a_precs)
}
inline ::EigenVector* UnivariateMixtureState::release_a_precs() {
  
  ::EigenVector* temp = a_precs_;
  a_precs_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::EigenVector* UnivariateMixtureState::unsafe_arena_release_a_precs() {
  // @@protoc_insertion_point(field_release:UnivariateMixtureState.a_precs)
  
  ::EigenVector* temp = a_precs_;
  a_precs_ = nullptr;
  return temp;
}
inline ::EigenVector* UnivariateMixtureState::_internal_mutable_a_precs() {
  
  if (a_precs_ == nullptr) {
    auto* p = CreateMaybeMessage<::EigenVector>(GetArena());
    a_precs_ = p;
  }
  return a_precs_;
}
inline ::EigenVector* UnivariateMixtureState::mutable_a_precs() {
  // @@protoc_insertion_point(field_mutable:UnivariateMixtureState.a_precs)
  return _internal_mutable_a_precs();
}
inline void UnivariateMixtureState::set_allocated_a_precs(::EigenVector* a_precs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete a_precs_;
  }
  if (a_precs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(a_precs);
    if (message_arena != submessage_arena) {
      a_precs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, a_precs, submessage_arena);
    }
    
  } else {
    
  }
  a_precs_ = a_precs;
  // @@protoc_insertion_point(field_set_allocated:UnivariateMixtureState.a_precs)
}

// .EigenVector na_precs = 7;
inline bool UnivariateMixtureState::_internal_has_na_precs() const {
  return this != internal_default_instance() && na_precs_ != nullptr;
}
inline bool UnivariateMixtureState::has_na_precs() const {
  return _internal_has_na_precs();
}
inline void UnivariateMixtureState::clear_na_precs() {
  if (GetArena() == nullptr && na_precs_ != nullptr) {
    delete na_precs_;
  }
  na_precs_ = nullptr;
}
inline const ::EigenVector& UnivariateMixtureState::_internal_na_precs() const {
  const ::EigenVector* p = na_precs_;
  return p != nullptr ? *p : reinterpret_cast<const ::EigenVector&>(
      ::_EigenVector_default_instance_);
}
inline const ::EigenVector& UnivariateMixtureState::na_precs() const {
  // @@protoc_insertion_point(field_get:UnivariateMixtureState.na_precs)
  return _internal_na_precs();
}
inline void UnivariateMixtureState::unsafe_arena_set_allocated_na_precs(
    ::EigenVector* na_precs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(na_precs_);
  }
  na_precs_ = na_precs;
  if (na_precs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UnivariateMixtureState.na_precs)
}
inline ::EigenVector* UnivariateMixtureState::release_na_precs() {
  
  ::EigenVector* temp = na_precs_;
  na_precs_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::EigenVector* UnivariateMixtureState::unsafe_arena_release_na_precs() {
  // @@protoc_insertion_point(field_release:UnivariateMixtureState.na_precs)
  
  ::EigenVector* temp = na_precs_;
  na_precs_ = nullptr;
  return temp;
}
inline ::EigenVector* UnivariateMixtureState::_internal_mutable_na_precs() {
  
  if (na_precs_ == nullptr) {
    auto* p = CreateMaybeMessage<::EigenVector>(GetArena());
    na_precs_ = p;
  }
  return na_precs_;
}
inline ::EigenVector* UnivariateMixtureState::mutable_na_precs() {
  // @@protoc_insertion_point(field_mutable:UnivariateMixtureState.na_precs)
  return _internal_mutable_na_precs();
}
inline void UnivariateMixtureState::set_allocated_na_precs(::EigenVector* na_precs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete na_precs_;
  }
  if (na_precs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(na_precs);
    if (message_arena != submessage_arena) {
      na_precs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, na_precs, submessage_arena);
    }
    
  } else {
    
  }
  na_precs_ = na_precs;
  // @@protoc_insertion_point(field_set_allocated:UnivariateMixtureState.na_precs)
}

// .EigenVector a_jumps = 8;
inline bool UnivariateMixtureState::_internal_has_a_jumps() const {
  return this != internal_default_instance() && a_jumps_ != nullptr;
}
inline bool UnivariateMixtureState::has_a_jumps() const {
  return _internal_has_a_jumps();
}
inline void UnivariateMixtureState::clear_a_jumps() {
  if (GetArena() == nullptr && a_jumps_ != nullptr) {
    delete a_jumps_;
  }
  a_jumps_ = nullptr;
}
inline const ::EigenVector& UnivariateMixtureState::_internal_a_jumps() const {
  const ::EigenVector* p = a_jumps_;
  return p != nullptr ? *p : reinterpret_cast<const ::EigenVector&>(
      ::_EigenVector_default_instance_);
}
inline const ::EigenVector& UnivariateMixtureState::a_jumps() const {
  // @@protoc_insertion_point(field_get:UnivariateMixtureState.a_jumps)
  return _internal_a_jumps();
}
inline void UnivariateMixtureState::unsafe_arena_set_allocated_a_jumps(
    ::EigenVector* a_jumps) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(a_jumps_);
  }
  a_jumps_ = a_jumps;
  if (a_jumps) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UnivariateMixtureState.a_jumps)
}
inline ::EigenVector* UnivariateMixtureState::release_a_jumps() {
  
  ::EigenVector* temp = a_jumps_;
  a_jumps_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::EigenVector* UnivariateMixtureState::unsafe_arena_release_a_jumps() {
  // @@protoc_insertion_point(field_release:UnivariateMixtureState.a_jumps)
  
  ::EigenVector* temp = a_jumps_;
  a_jumps_ = nullptr;
  return temp;
}
inline ::EigenVector* UnivariateMixtureState::_internal_mutable_a_jumps() {
  
  if (a_jumps_ == nullptr) {
    auto* p = CreateMaybeMessage<::EigenVector>(GetArena());
    a_jumps_ = p;
  }
  return a_jumps_;
}
inline ::EigenVector* UnivariateMixtureState::mutable_a_jumps() {
  // @@protoc_insertion_point(field_mutable:UnivariateMixtureState.a_jumps)
  return _internal_mutable_a_jumps();
}
inline void UnivariateMixtureState::set_allocated_a_jumps(::EigenVector* a_jumps) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete a_jumps_;
  }
  if (a_jumps) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(a_jumps);
    if (message_arena != submessage_arena) {
      a_jumps = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, a_jumps, submessage_arena);
    }
    
  } else {
    
  }
  a_jumps_ = a_jumps;
  // @@protoc_insertion_point(field_set_allocated:UnivariateMixtureState.a_jumps)
}

// .EigenVector na_jumps = 9;
inline bool UnivariateMixtureState::_internal_has_na_jumps() const {
  return this != internal_default_instance() && na_jumps_ != nullptr;
}
inline bool UnivariateMixtureState::has_na_jumps() const {
  return _internal_has_na_jumps();
}
inline void UnivariateMixtureState::clear_na_jumps() {
  if (GetArena() == nullptr && na_jumps_ != nullptr) {
    delete na_jumps_;
  }
  na_jumps_ = nullptr;
}
inline const ::EigenVector& UnivariateMixtureState::_internal_na_jumps() const {
  const ::EigenVector* p = na_jumps_;
  return p != nullptr ? *p : reinterpret_cast<const ::EigenVector&>(
      ::_EigenVector_default_instance_);
}
inline const ::EigenVector& UnivariateMixtureState::na_jumps() const {
  // @@protoc_insertion_point(field_get:UnivariateMixtureState.na_jumps)
  return _internal_na_jumps();
}
inline void UnivariateMixtureState::unsafe_arena_set_allocated_na_jumps(
    ::EigenVector* na_jumps) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(na_jumps_);
  }
  na_jumps_ = na_jumps;
  if (na_jumps) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UnivariateMixtureState.na_jumps)
}
inline ::EigenVector* UnivariateMixtureState::release_na_jumps() {
  
  ::EigenVector* temp = na_jumps_;
  na_jumps_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::EigenVector* UnivariateMixtureState::unsafe_arena_release_na_jumps() {
  // @@protoc_insertion_point(field_release:UnivariateMixtureState.na_jumps)
  
  ::EigenVector* temp = na_jumps_;
  na_jumps_ = nullptr;
  return temp;
}
inline ::EigenVector* UnivariateMixtureState::_internal_mutable_na_jumps() {
  
  if (na_jumps_ == nullptr) {
    auto* p = CreateMaybeMessage<::EigenVector>(GetArena());
    na_jumps_ = p;
  }
  return na_jumps_;
}
inline ::EigenVector* UnivariateMixtureState::mutable_na_jumps() {
  // @@protoc_insertion_point(field_mutable:UnivariateMixtureState.na_jumps)
  return _internal_mutable_na_jumps();
}
inline void UnivariateMixtureState::set_allocated_na_jumps(::EigenVector* na_jumps) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete na_jumps_;
  }
  if (na_jumps) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(na_jumps);
    if (message_arena != submessage_arena) {
      na_jumps = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, na_jumps, submessage_arena);
    }
    
  } else {
    
  }
  na_jumps_ = na_jumps;
  // @@protoc_insertion_point(field_set_allocated:UnivariateMixtureState.na_jumps)
}

// repeated int32 clus_alloc = 10;
inline int UnivariateMixtureState::_internal_clus_alloc_size() const {
  return clus_alloc_.size();
}
inline int UnivariateMixtureState::clus_alloc_size() const {
  return _internal_clus_alloc_size();
}
inline void UnivariateMixtureState::clear_clus_alloc() {
  clus_alloc_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnivariateMixtureState::_internal_clus_alloc(int index) const {
  return clus_alloc_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnivariateMixtureState::clus_alloc(int index) const {
  // @@protoc_insertion_point(field_get:UnivariateMixtureState.clus_alloc)
  return _internal_clus_alloc(index);
}
inline void UnivariateMixtureState::set_clus_alloc(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  clus_alloc_.Set(index, value);
  // @@protoc_insertion_point(field_set:UnivariateMixtureState.clus_alloc)
}
inline void UnivariateMixtureState::_internal_add_clus_alloc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  clus_alloc_.Add(value);
}
inline void UnivariateMixtureState::add_clus_alloc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_clus_alloc(value);
  // @@protoc_insertion_point(field_add:UnivariateMixtureState.clus_alloc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
UnivariateMixtureState::_internal_clus_alloc() const {
  return clus_alloc_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
UnivariateMixtureState::clus_alloc() const {
  // @@protoc_insertion_point(field_list:UnivariateMixtureState.clus_alloc)
  return _internal_clus_alloc();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
UnivariateMixtureState::_internal_mutable_clus_alloc() {
  return &clus_alloc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
UnivariateMixtureState::mutable_clus_alloc() {
  // @@protoc_insertion_point(field_mutable_list:UnivariateMixtureState.clus_alloc)
  return _internal_mutable_clus_alloc();
}

// double u = 11;
inline void UnivariateMixtureState::clear_u() {
  u_ = 0;
}
inline double UnivariateMixtureState::_internal_u() const {
  return u_;
}
inline double UnivariateMixtureState::u() const {
  // @@protoc_insertion_point(field_get:UnivariateMixtureState.u)
  return _internal_u();
}
inline void UnivariateMixtureState::_internal_set_u(double value) {
  
  u_ = value;
}
inline void UnivariateMixtureState::set_u(double value) {
  _internal_set_u(value);
  // @@protoc_insertion_point(field_set:UnivariateMixtureState.u)
}

// .PPState pp_state = 12;
inline bool UnivariateMixtureState::_internal_has_pp_state() const {
  return this != internal_default_instance() && pp_state_ != nullptr;
}
inline bool UnivariateMixtureState::has_pp_state() const {
  return _internal_has_pp_state();
}
inline void UnivariateMixtureState::clear_pp_state() {
  if (GetArena() == nullptr && pp_state_ != nullptr) {
    delete pp_state_;
  }
  pp_state_ = nullptr;
}
inline const ::PPState& UnivariateMixtureState::_internal_pp_state() const {
  const ::PPState* p = pp_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::PPState&>(
      ::_PPState_default_instance_);
}
inline const ::PPState& UnivariateMixtureState::pp_state() const {
  // @@protoc_insertion_point(field_get:UnivariateMixtureState.pp_state)
  return _internal_pp_state();
}
inline void UnivariateMixtureState::unsafe_arena_set_allocated_pp_state(
    ::PPState* pp_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pp_state_);
  }
  pp_state_ = pp_state;
  if (pp_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UnivariateMixtureState.pp_state)
}
inline ::PPState* UnivariateMixtureState::release_pp_state() {
  
  ::PPState* temp = pp_state_;
  pp_state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PPState* UnivariateMixtureState::unsafe_arena_release_pp_state() {
  // @@protoc_insertion_point(field_release:UnivariateMixtureState.pp_state)
  
  ::PPState* temp = pp_state_;
  pp_state_ = nullptr;
  return temp;
}
inline ::PPState* UnivariateMixtureState::_internal_mutable_pp_state() {
  
  if (pp_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::PPState>(GetArena());
    pp_state_ = p;
  }
  return pp_state_;
}
inline ::PPState* UnivariateMixtureState::mutable_pp_state() {
  // @@protoc_insertion_point(field_mutable:UnivariateMixtureState.pp_state)
  return _internal_mutable_pp_state();
}
inline void UnivariateMixtureState::set_allocated_pp_state(::PPState* pp_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pp_state_;
  }
  if (pp_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pp_state);
    if (message_arena != submessage_arena) {
      pp_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pp_state, submessage_arena);
    }
    
  } else {
    
  }
  pp_state_ = pp_state;
  // @@protoc_insertion_point(field_set_allocated:UnivariateMixtureState.pp_state)
}

// -------------------------------------------------------------------

// BernoulliMixtureState

// int32 ma = 1;
inline void BernoulliMixtureState::clear_ma() {
  ma_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BernoulliMixtureState::_internal_ma() const {
  return ma_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BernoulliMixtureState::ma() const {
  // @@protoc_insertion_point(field_get:BernoulliMixtureState.ma)
  return _internal_ma();
}
inline void BernoulliMixtureState::_internal_set_ma(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ma_ = value;
}
inline void BernoulliMixtureState::set_ma(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ma(value);
  // @@protoc_insertion_point(field_set:BernoulliMixtureState.ma)
}

// int32 mna = 2;
inline void BernoulliMixtureState::clear_mna() {
  mna_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BernoulliMixtureState::_internal_mna() const {
  return mna_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BernoulliMixtureState::mna() const {
  // @@protoc_insertion_point(field_get:BernoulliMixtureState.mna)
  return _internal_mna();
}
inline void BernoulliMixtureState::_internal_set_mna(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mna_ = value;
}
inline void BernoulliMixtureState::set_mna(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mna(value);
  // @@protoc_insertion_point(field_set:BernoulliMixtureState.mna)
}

// int32 mtot = 3;
inline void BernoulliMixtureState::clear_mtot() {
  mtot_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BernoulliMixtureState::_internal_mtot() const {
  return mtot_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BernoulliMixtureState::mtot() const {
  // @@protoc_insertion_point(field_get:BernoulliMixtureState.mtot)
  return _internal_mtot();
}
inline void BernoulliMixtureState::_internal_set_mtot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mtot_ = value;
}
inline void BernoulliMixtureState::set_mtot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mtot(value);
  // @@protoc_insertion_point(field_set:BernoulliMixtureState.mtot)
}

// repeated .EigenVector a_probs = 4;
inline int BernoulliMixtureState::_internal_a_probs_size() const {
  return a_probs_.size();
}
inline int BernoulliMixtureState::a_probs_size() const {
  return _internal_a_probs_size();
}
inline void BernoulliMixtureState::clear_a_probs() {
  a_probs_.Clear();
}
inline ::EigenVector* BernoulliMixtureState::mutable_a_probs(int index) {
  // @@protoc_insertion_point(field_mutable:BernoulliMixtureState.a_probs)
  return a_probs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenVector >*
BernoulliMixtureState::mutable_a_probs() {
  // @@protoc_insertion_point(field_mutable_list:BernoulliMixtureState.a_probs)
  return &a_probs_;
}
inline const ::EigenVector& BernoulliMixtureState::_internal_a_probs(int index) const {
  return a_probs_.Get(index);
}
inline const ::EigenVector& BernoulliMixtureState::a_probs(int index) const {
  // @@protoc_insertion_point(field_get:BernoulliMixtureState.a_probs)
  return _internal_a_probs(index);
}
inline ::EigenVector* BernoulliMixtureState::_internal_add_a_probs() {
  return a_probs_.Add();
}
inline ::EigenVector* BernoulliMixtureState::add_a_probs() {
  // @@protoc_insertion_point(field_add:BernoulliMixtureState.a_probs)
  return _internal_add_a_probs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenVector >&
BernoulliMixtureState::a_probs() const {
  // @@protoc_insertion_point(field_list:BernoulliMixtureState.a_probs)
  return a_probs_;
}

// repeated .EigenVector na_probs = 5;
inline int BernoulliMixtureState::_internal_na_probs_size() const {
  return na_probs_.size();
}
inline int BernoulliMixtureState::na_probs_size() const {
  return _internal_na_probs_size();
}
inline void BernoulliMixtureState::clear_na_probs() {
  na_probs_.Clear();
}
inline ::EigenVector* BernoulliMixtureState::mutable_na_probs(int index) {
  // @@protoc_insertion_point(field_mutable:BernoulliMixtureState.na_probs)
  return na_probs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenVector >*
BernoulliMixtureState::mutable_na_probs() {
  // @@protoc_insertion_point(field_mutable_list:BernoulliMixtureState.na_probs)
  return &na_probs_;
}
inline const ::EigenVector& BernoulliMixtureState::_internal_na_probs(int index) const {
  return na_probs_.Get(index);
}
inline const ::EigenVector& BernoulliMixtureState::na_probs(int index) const {
  // @@protoc_insertion_point(field_get:BernoulliMixtureState.na_probs)
  return _internal_na_probs(index);
}
inline ::EigenVector* BernoulliMixtureState::_internal_add_na_probs() {
  return na_probs_.Add();
}
inline ::EigenVector* BernoulliMixtureState::add_na_probs() {
  // @@protoc_insertion_point(field_add:BernoulliMixtureState.na_probs)
  return _internal_add_na_probs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenVector >&
BernoulliMixtureState::na_probs() const {
  // @@protoc_insertion_point(field_list:BernoulliMixtureState.na_probs)
  return na_probs_;
}

// .EigenVector a_jumps = 6;
inline bool BernoulliMixtureState::_internal_has_a_jumps() const {
  return this != internal_default_instance() && a_jumps_ != nullptr;
}
inline bool BernoulliMixtureState::has_a_jumps() const {
  return _internal_has_a_jumps();
}
inline void BernoulliMixtureState::clear_a_jumps() {
  if (GetArena() == nullptr && a_jumps_ != nullptr) {
    delete a_jumps_;
  }
  a_jumps_ = nullptr;
}
inline const ::EigenVector& BernoulliMixtureState::_internal_a_jumps() const {
  const ::EigenVector* p = a_jumps_;
  return p != nullptr ? *p : reinterpret_cast<const ::EigenVector&>(
      ::_EigenVector_default_instance_);
}
inline const ::EigenVector& BernoulliMixtureState::a_jumps() const {
  // @@protoc_insertion_point(field_get:BernoulliMixtureState.a_jumps)
  return _internal_a_jumps();
}
inline void BernoulliMixtureState::unsafe_arena_set_allocated_a_jumps(
    ::EigenVector* a_jumps) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(a_jumps_);
  }
  a_jumps_ = a_jumps;
  if (a_jumps) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BernoulliMixtureState.a_jumps)
}
inline ::EigenVector* BernoulliMixtureState::release_a_jumps() {
  
  ::EigenVector* temp = a_jumps_;
  a_jumps_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::EigenVector* BernoulliMixtureState::unsafe_arena_release_a_jumps() {
  // @@protoc_insertion_point(field_release:BernoulliMixtureState.a_jumps)
  
  ::EigenVector* temp = a_jumps_;
  a_jumps_ = nullptr;
  return temp;
}
inline ::EigenVector* BernoulliMixtureState::_internal_mutable_a_jumps() {
  
  if (a_jumps_ == nullptr) {
    auto* p = CreateMaybeMessage<::EigenVector>(GetArena());
    a_jumps_ = p;
  }
  return a_jumps_;
}
inline ::EigenVector* BernoulliMixtureState::mutable_a_jumps() {
  // @@protoc_insertion_point(field_mutable:BernoulliMixtureState.a_jumps)
  return _internal_mutable_a_jumps();
}
inline void BernoulliMixtureState::set_allocated_a_jumps(::EigenVector* a_jumps) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete a_jumps_;
  }
  if (a_jumps) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(a_jumps);
    if (message_arena != submessage_arena) {
      a_jumps = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, a_jumps, submessage_arena);
    }
    
  } else {
    
  }
  a_jumps_ = a_jumps;
  // @@protoc_insertion_point(field_set_allocated:BernoulliMixtureState.a_jumps)
}

// .EigenVector na_jumps = 7;
inline bool BernoulliMixtureState::_internal_has_na_jumps() const {
  return this != internal_default_instance() && na_jumps_ != nullptr;
}
inline bool BernoulliMixtureState::has_na_jumps() const {
  return _internal_has_na_jumps();
}
inline void BernoulliMixtureState::clear_na_jumps() {
  if (GetArena() == nullptr && na_jumps_ != nullptr) {
    delete na_jumps_;
  }
  na_jumps_ = nullptr;
}
inline const ::EigenVector& BernoulliMixtureState::_internal_na_jumps() const {
  const ::EigenVector* p = na_jumps_;
  return p != nullptr ? *p : reinterpret_cast<const ::EigenVector&>(
      ::_EigenVector_default_instance_);
}
inline const ::EigenVector& BernoulliMixtureState::na_jumps() const {
  // @@protoc_insertion_point(field_get:BernoulliMixtureState.na_jumps)
  return _internal_na_jumps();
}
inline void BernoulliMixtureState::unsafe_arena_set_allocated_na_jumps(
    ::EigenVector* na_jumps) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(na_jumps_);
  }
  na_jumps_ = na_jumps;
  if (na_jumps) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BernoulliMixtureState.na_jumps)
}
inline ::EigenVector* BernoulliMixtureState::release_na_jumps() {
  
  ::EigenVector* temp = na_jumps_;
  na_jumps_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::EigenVector* BernoulliMixtureState::unsafe_arena_release_na_jumps() {
  // @@protoc_insertion_point(field_release:BernoulliMixtureState.na_jumps)
  
  ::EigenVector* temp = na_jumps_;
  na_jumps_ = nullptr;
  return temp;
}
inline ::EigenVector* BernoulliMixtureState::_internal_mutable_na_jumps() {
  
  if (na_jumps_ == nullptr) {
    auto* p = CreateMaybeMessage<::EigenVector>(GetArena());
    na_jumps_ = p;
  }
  return na_jumps_;
}
inline ::EigenVector* BernoulliMixtureState::mutable_na_jumps() {
  // @@protoc_insertion_point(field_mutable:BernoulliMixtureState.na_jumps)
  return _internal_mutable_na_jumps();
}
inline void BernoulliMixtureState::set_allocated_na_jumps(::EigenVector* na_jumps) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete na_jumps_;
  }
  if (na_jumps) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(na_jumps);
    if (message_arena != submessage_arena) {
      na_jumps = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, na_jumps, submessage_arena);
    }
    
  } else {
    
  }
  na_jumps_ = na_jumps;
  // @@protoc_insertion_point(field_set_allocated:BernoulliMixtureState.na_jumps)
}

// repeated int32 clus_alloc = 10;
inline int BernoulliMixtureState::_internal_clus_alloc_size() const {
  return clus_alloc_.size();
}
inline int BernoulliMixtureState::clus_alloc_size() const {
  return _internal_clus_alloc_size();
}
inline void BernoulliMixtureState::clear_clus_alloc() {
  clus_alloc_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BernoulliMixtureState::_internal_clus_alloc(int index) const {
  return clus_alloc_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BernoulliMixtureState::clus_alloc(int index) const {
  // @@protoc_insertion_point(field_get:BernoulliMixtureState.clus_alloc)
  return _internal_clus_alloc(index);
}
inline void BernoulliMixtureState::set_clus_alloc(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  clus_alloc_.Set(index, value);
  // @@protoc_insertion_point(field_set:BernoulliMixtureState.clus_alloc)
}
inline void BernoulliMixtureState::_internal_add_clus_alloc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  clus_alloc_.Add(value);
}
inline void BernoulliMixtureState::add_clus_alloc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_clus_alloc(value);
  // @@protoc_insertion_point(field_add:BernoulliMixtureState.clus_alloc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BernoulliMixtureState::_internal_clus_alloc() const {
  return clus_alloc_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BernoulliMixtureState::clus_alloc() const {
  // @@protoc_insertion_point(field_list:BernoulliMixtureState.clus_alloc)
  return _internal_clus_alloc();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BernoulliMixtureState::_internal_mutable_clus_alloc() {
  return &clus_alloc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BernoulliMixtureState::mutable_clus_alloc() {
  // @@protoc_insertion_point(field_mutable_list:BernoulliMixtureState.clus_alloc)
  return _internal_mutable_clus_alloc();
}

// double u = 11;
inline void BernoulliMixtureState::clear_u() {
  u_ = 0;
}
inline double BernoulliMixtureState::_internal_u() const {
  return u_;
}
inline double BernoulliMixtureState::u() const {
  // @@protoc_insertion_point(field_get:BernoulliMixtureState.u)
  return _internal_u();
}
inline void BernoulliMixtureState::_internal_set_u(double value) {
  
  u_ = value;
}
inline void BernoulliMixtureState::set_u(double value) {
  _internal_set_u(value);
  // @@protoc_insertion_point(field_set:BernoulliMixtureState.u)
}

// .PPState pp_state = 12;
inline bool BernoulliMixtureState::_internal_has_pp_state() const {
  return this != internal_default_instance() && pp_state_ != nullptr;
}
inline bool BernoulliMixtureState::has_pp_state() const {
  return _internal_has_pp_state();
}
inline void BernoulliMixtureState::clear_pp_state() {
  if (GetArena() == nullptr && pp_state_ != nullptr) {
    delete pp_state_;
  }
  pp_state_ = nullptr;
}
inline const ::PPState& BernoulliMixtureState::_internal_pp_state() const {
  const ::PPState* p = pp_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::PPState&>(
      ::_PPState_default_instance_);
}
inline const ::PPState& BernoulliMixtureState::pp_state() const {
  // @@protoc_insertion_point(field_get:BernoulliMixtureState.pp_state)
  return _internal_pp_state();
}
inline void BernoulliMixtureState::unsafe_arena_set_allocated_pp_state(
    ::PPState* pp_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pp_state_);
  }
  pp_state_ = pp_state;
  if (pp_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BernoulliMixtureState.pp_state)
}
inline ::PPState* BernoulliMixtureState::release_pp_state() {
  
  ::PPState* temp = pp_state_;
  pp_state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PPState* BernoulliMixtureState::unsafe_arena_release_pp_state() {
  // @@protoc_insertion_point(field_release:BernoulliMixtureState.pp_state)
  
  ::PPState* temp = pp_state_;
  pp_state_ = nullptr;
  return temp;
}
inline ::PPState* BernoulliMixtureState::_internal_mutable_pp_state() {
  
  if (pp_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::PPState>(GetArena());
    pp_state_ = p;
  }
  return pp_state_;
}
inline ::PPState* BernoulliMixtureState::mutable_pp_state() {
  // @@protoc_insertion_point(field_mutable:BernoulliMixtureState.pp_state)
  return _internal_mutable_pp_state();
}
inline void BernoulliMixtureState::set_allocated_pp_state(::PPState* pp_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pp_state_;
  }
  if (pp_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pp_state);
    if (message_arena != submessage_arena) {
      pp_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pp_state, submessage_arena);
    }
    
  } else {
    
  }
  pp_state_ = pp_state;
  // @@protoc_insertion_point(field_set_allocated:BernoulliMixtureState.pp_state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_state_2eproto
