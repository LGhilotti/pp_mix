// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: params.proto

#include "params.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_params_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DPPParams_params_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_params_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FixedMultiPrecParams_params_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_params_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FixedUnivPrecParams_params_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_params_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GammaParams_params_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_params_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NrepParams_params_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_params_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StraussParams_params_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_params_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StraussParams_Inits_params_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_params_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StraussParams_Priors_params_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_params_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WishartParams_params_2eproto;
class WishartParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WishartParams> _instance;
} _WishartParams_default_instance_;
class FixedMultiPrecParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FixedMultiPrecParams> _instance;
} _FixedMultiPrecParams_default_instance_;
class FixedUnivPrecParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FixedUnivPrecParams> _instance;
} _FixedUnivPrecParams_default_instance_;
class GammaParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GammaParams> _instance;
} _GammaParams_default_instance_;
class StraussParams_PriorsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StraussParams_Priors> _instance;
} _StraussParams_Priors_default_instance_;
class StraussParams_InitsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StraussParams_Inits> _instance;
} _StraussParams_Inits_default_instance_;
class StraussParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StraussParams> _instance;
} _StraussParams_default_instance_;
class NrepParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NrepParams> _instance;
} _NrepParams_default_instance_;
class DPPParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DPPParams> _instance;
} _DPPParams_default_instance_;
class ParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Params> _instance;
} _Params_default_instance_;
static void InitDefaultsscc_info_DPPParams_params_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DPPParams_default_instance_;
    new (ptr) ::DPPParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DPPParams_params_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DPPParams_params_2eproto}, {}};

static void InitDefaultsscc_info_FixedMultiPrecParams_params_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FixedMultiPrecParams_default_instance_;
    new (ptr) ::FixedMultiPrecParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FixedMultiPrecParams_params_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FixedMultiPrecParams_params_2eproto}, {}};

static void InitDefaultsscc_info_FixedUnivPrecParams_params_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FixedUnivPrecParams_default_instance_;
    new (ptr) ::FixedUnivPrecParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FixedUnivPrecParams_params_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FixedUnivPrecParams_params_2eproto}, {}};

static void InitDefaultsscc_info_GammaParams_params_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GammaParams_default_instance_;
    new (ptr) ::GammaParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GammaParams_params_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GammaParams_params_2eproto}, {}};

static void InitDefaultsscc_info_NrepParams_params_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NrepParams_default_instance_;
    new (ptr) ::NrepParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NrepParams_params_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NrepParams_params_2eproto}, {}};

static void InitDefaultsscc_info_Params_params_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Params_default_instance_;
    new (ptr) ::Params();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_Params_params_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_Params_params_2eproto}, {
      &scc_info_StraussParams_params_2eproto.base,
      &scc_info_NrepParams_params_2eproto.base,
      &scc_info_DPPParams_params_2eproto.base,
      &scc_info_FixedMultiPrecParams_params_2eproto.base,
      &scc_info_WishartParams_params_2eproto.base,
      &scc_info_FixedUnivPrecParams_params_2eproto.base,
      &scc_info_GammaParams_params_2eproto.base,}};

static void InitDefaultsscc_info_StraussParams_params_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_StraussParams_default_instance_;
    new (ptr) ::StraussParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StraussParams_params_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_StraussParams_params_2eproto}, {
      &scc_info_StraussParams_Priors_params_2eproto.base,
      &scc_info_StraussParams_Inits_params_2eproto.base,}};

static void InitDefaultsscc_info_StraussParams_Inits_params_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_StraussParams_Inits_default_instance_;
    new (ptr) ::StraussParams_Inits();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StraussParams_Inits_params_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StraussParams_Inits_params_2eproto}, {}};

static void InitDefaultsscc_info_StraussParams_Priors_params_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_StraussParams_Priors_default_instance_;
    new (ptr) ::StraussParams_Priors();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StraussParams_Priors_params_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StraussParams_Priors_params_2eproto}, {}};

static void InitDefaultsscc_info_WishartParams_params_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_WishartParams_default_instance_;
    new (ptr) ::WishartParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WishartParams_params_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WishartParams_params_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_params_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_params_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_params_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_params_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WishartParams, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::WishartParams, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::WishartParams, nu_),
  PROTOBUF_FIELD_OFFSET(::WishartParams, identity_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::WishartParams, dim_),
  PROTOBUF_FIELD_OFFSET(::WishartParams, sigma__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FixedMultiPrecParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FixedMultiPrecParams, sigma_),
  PROTOBUF_FIELD_OFFSET(::FixedMultiPrecParams, dim_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FixedUnivPrecParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FixedUnivPrecParams, sigma_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GammaParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GammaParams, alpha_),
  PROTOBUF_FIELD_OFFSET(::GammaParams, beta_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StraussParams_Priors, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::StraussParams_Priors, beta_l_),
  PROTOBUF_FIELD_OFFSET(::StraussParams_Priors, beta_u_),
  PROTOBUF_FIELD_OFFSET(::StraussParams_Priors, gamma_l_),
  PROTOBUF_FIELD_OFFSET(::StraussParams_Priors, gamma_u_),
  PROTOBUF_FIELD_OFFSET(::StraussParams_Priors, r_l_),
  PROTOBUF_FIELD_OFFSET(::StraussParams_Priors, r_u_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StraussParams_Inits, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::StraussParams_Inits, beta_),
  PROTOBUF_FIELD_OFFSET(::StraussParams_Inits, gamma_),
  PROTOBUF_FIELD_OFFSET(::StraussParams_Inits, r_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StraussParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::StraussParams, prior_),
  PROTOBUF_FIELD_OFFSET(::StraussParams, init_),
  PROTOBUF_FIELD_OFFSET(::StraussParams, fixed_params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NrepParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NrepParams, u_),
  PROTOBUF_FIELD_OFFSET(::NrepParams, p_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DPPParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DPPParams, nu_),
  PROTOBUF_FIELD_OFFSET(::DPPParams, rho_),
  PROTOBUF_FIELD_OFFSET(::DPPParams, n_),
  PROTOBUF_FIELD_OFFSET(::DPPParams, s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Params, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Params, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Params, gamma_jump_),
  PROTOBUF_FIELD_OFFSET(::Params, mala_stepsize_),
  PROTOBUF_FIELD_OFFSET(::Params, pp_params_),
  PROTOBUF_FIELD_OFFSET(::Params, prec_params_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::WishartParams)},
  { 10, -1, sizeof(::FixedMultiPrecParams)},
  { 17, -1, sizeof(::FixedUnivPrecParams)},
  { 23, -1, sizeof(::GammaParams)},
  { 30, -1, sizeof(::StraussParams_Priors)},
  { 41, -1, sizeof(::StraussParams_Inits)},
  { 49, -1, sizeof(::StraussParams)},
  { 57, -1, sizeof(::NrepParams)},
  { 64, -1, sizeof(::DPPParams)},
  { 73, -1, sizeof(::Params)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_WishartParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FixedMultiPrecParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FixedUnivPrecParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GammaParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_StraussParams_Priors_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_StraussParams_Inits_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_StraussParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NrepParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DPPParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Params_default_instance_),
};

const char descriptor_table_protodef_params_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014params.proto\"U\n\rWishartParams\022\n\n\002nu\030\001 "
  "\001(\001\022\020\n\010identity\030\002 \001(\010\022\017\n\005sigma\030\003 \001(\001H\000\022\013"
  "\n\003dim\030\004 \001(\005B\010\n\006sigma_\"2\n\024FixedMultiPrecP"
  "arams\022\r\n\005sigma\030\001 \001(\001\022\013\n\003dim\030\002 \001(\005\"$\n\023Fix"
  "edUnivPrecParams\022\r\n\005sigma\030\001 \001(\001\"*\n\013Gamma"
  "Params\022\r\n\005alpha\030\001 \001(\001\022\014\n\004beta\030\002 \001(\001\"\206\002\n\r"
  "StraussParams\022$\n\005prior\030\001 \001(\0132\025.StraussPa"
  "rams.Priors\022\"\n\004init\030\002 \001(\0132\024.StraussParam"
  "s.Inits\022\024\n\014fixed_params\030\003 \001(\010\032d\n\006Priors\022"
  "\016\n\006beta_l\030\001 \001(\001\022\016\n\006beta_u\030\002 \001(\001\022\017\n\007gamma"
  "_l\030\003 \001(\001\022\017\n\007gamma_u\030\004 \001(\001\022\013\n\003r_l\030\005 \001(\001\022\013"
  "\n\003r_u\030\006 \001(\001\032/\n\005Inits\022\014\n\004beta\030\001 \001(\001\022\r\n\005ga"
  "mma\030\002 \001(\001\022\t\n\001R\030\003 \001(\001\"\"\n\nNrepParams\022\t\n\001u\030"
  "\001 \001(\001\022\t\n\001p\030\002 \001(\001\":\n\tDPPParams\022\n\n\002nu\030\001 \001("
  "\001\022\013\n\003rho\030\002 \001(\001\022\t\n\001N\030\003 \001(\005\022\t\n\001s\030\004 \001(\001\"\343\002\n"
  "\006Params\022!\n\007strauss\030\001 \001(\0132\016.StraussParams"
  "H\000\022\033\n\004nrep\030\002 \001(\0132\013.NrepParamsH\000\022\031\n\003dpp\030\003"
  " \001(\0132\n.DPPParamsH\000\0221\n\020fixed_multi_prec\030\004"
  " \001(\0132\025.FixedMultiPrecParamsH\001\022!\n\007wishart"
  "\030\005 \001(\0132\016.WishartParamsH\001\022/\n\017fixed_univ_p"
  "rec\030\006 \001(\0132\024.FixedUnivPrecParamsH\001\022\"\n\ngam"
  "ma_prec\030\007 \001(\0132\014.GammaParamsH\001\022 \n\ngamma_j"
  "ump\030\010 \001(\0132\014.GammaParams\022\025\n\rmala_stepsize"
  "\030\t \001(\001B\013\n\tpp_paramsB\r\n\013prec_paramsb\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_params_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_params_2eproto_sccs[10] = {
  &scc_info_DPPParams_params_2eproto.base,
  &scc_info_FixedMultiPrecParams_params_2eproto.base,
  &scc_info_FixedUnivPrecParams_params_2eproto.base,
  &scc_info_GammaParams_params_2eproto.base,
  &scc_info_NrepParams_params_2eproto.base,
  &scc_info_Params_params_2eproto.base,
  &scc_info_StraussParams_params_2eproto.base,
  &scc_info_StraussParams_Inits_params_2eproto.base,
  &scc_info_StraussParams_Priors_params_2eproto.base,
  &scc_info_WishartParams_params_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_params_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_params_2eproto = {
  false, false, descriptor_table_protodef_params_2eproto, "params.proto", 962,
  &descriptor_table_params_2eproto_once, descriptor_table_params_2eproto_sccs, descriptor_table_params_2eproto_deps, 10, 0,
  schemas, file_default_instances, TableStruct_params_2eproto::offsets,
  file_level_metadata_params_2eproto, 10, file_level_enum_descriptors_params_2eproto, file_level_service_descriptors_params_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_params_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_params_2eproto)), true);

// ===================================================================

class WishartParams::_Internal {
 public:
};

WishartParams::WishartParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:WishartParams)
}
WishartParams::WishartParams(const WishartParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&nu_, &from.nu_,
    static_cast<size_t>(reinterpret_cast<char*>(&dim_) -
    reinterpret_cast<char*>(&nu_)) + sizeof(dim_));
  clear_has_sigma_();
  switch (from.sigma__case()) {
    case kSigma: {
      _internal_set_sigma(from._internal_sigma());
      break;
    }
    case SIGMA__NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:WishartParams)
}

void WishartParams::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&nu_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&dim_) -
      reinterpret_cast<char*>(&nu_)) + sizeof(dim_));
  clear_has_sigma_();
}

WishartParams::~WishartParams() {
  // @@protoc_insertion_point(destructor:WishartParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WishartParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_sigma_()) {
    clear_sigma_();
  }
}

void WishartParams::ArenaDtor(void* object) {
  WishartParams* _this = reinterpret_cast< WishartParams* >(object);
  (void)_this;
}
void WishartParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WishartParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WishartParams& WishartParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WishartParams_params_2eproto.base);
  return *internal_default_instance();
}


void WishartParams::clear_sigma_() {
// @@protoc_insertion_point(one_of_clear_start:WishartParams)
  switch (sigma__case()) {
    case kSigma: {
      // No need to clear
      break;
    }
    case SIGMA__NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SIGMA__NOT_SET;
}


void WishartParams::Clear() {
// @@protoc_insertion_point(message_clear_start:WishartParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&nu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dim_) -
      reinterpret_cast<char*>(&nu_)) + sizeof(dim_));
  clear_sigma_();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WishartParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double nu = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool identity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          identity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double sigma = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _internal_set_sigma(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 dim = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WishartParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WishartParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double nu = 1;
  if (!(this->nu() <= 0 && this->nu() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_nu(), target);
  }

  // bool identity = 2;
  if (this->identity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_identity(), target);
  }

  // double sigma = 3;
  if (_internal_has_sigma()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_sigma(), target);
  }

  // int32 dim = 4;
  if (this->dim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_dim(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WishartParams)
  return target;
}

size_t WishartParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WishartParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double nu = 1;
  if (!(this->nu() <= 0 && this->nu() >= 0)) {
    total_size += 1 + 8;
  }

  // bool identity = 2;
  if (this->identity() != 0) {
    total_size += 1 + 1;
  }

  // int32 dim = 4;
  if (this->dim() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dim());
  }

  switch (sigma__case()) {
    // double sigma = 3;
    case kSigma: {
      total_size += 1 + 8;
      break;
    }
    case SIGMA__NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WishartParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WishartParams)
  GOOGLE_DCHECK_NE(&from, this);
  const WishartParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WishartParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WishartParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WishartParams)
    MergeFrom(*source);
  }
}

void WishartParams::MergeFrom(const WishartParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WishartParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.nu() <= 0 && from.nu() >= 0)) {
    _internal_set_nu(from._internal_nu());
  }
  if (from.identity() != 0) {
    _internal_set_identity(from._internal_identity());
  }
  if (from.dim() != 0) {
    _internal_set_dim(from._internal_dim());
  }
  switch (from.sigma__case()) {
    case kSigma: {
      _internal_set_sigma(from._internal_sigma());
      break;
    }
    case SIGMA__NOT_SET: {
      break;
    }
  }
}

void WishartParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WishartParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WishartParams::CopyFrom(const WishartParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WishartParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WishartParams::IsInitialized() const {
  return true;
}

void WishartParams::InternalSwap(WishartParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WishartParams, dim_)
      + sizeof(WishartParams::dim_)
      - PROTOBUF_FIELD_OFFSET(WishartParams, nu_)>(
          reinterpret_cast<char*>(&nu_),
          reinterpret_cast<char*>(&other->nu_));
  swap(sigma__, other->sigma__);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata WishartParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FixedMultiPrecParams::_Internal {
 public:
};

FixedMultiPrecParams::FixedMultiPrecParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FixedMultiPrecParams)
}
FixedMultiPrecParams::FixedMultiPrecParams(const FixedMultiPrecParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sigma_, &from.sigma_,
    static_cast<size_t>(reinterpret_cast<char*>(&dim_) -
    reinterpret_cast<char*>(&sigma_)) + sizeof(dim_));
  // @@protoc_insertion_point(copy_constructor:FixedMultiPrecParams)
}

void FixedMultiPrecParams::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&sigma_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&dim_) -
      reinterpret_cast<char*>(&sigma_)) + sizeof(dim_));
}

FixedMultiPrecParams::~FixedMultiPrecParams() {
  // @@protoc_insertion_point(destructor:FixedMultiPrecParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FixedMultiPrecParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FixedMultiPrecParams::ArenaDtor(void* object) {
  FixedMultiPrecParams* _this = reinterpret_cast< FixedMultiPrecParams* >(object);
  (void)_this;
}
void FixedMultiPrecParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FixedMultiPrecParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FixedMultiPrecParams& FixedMultiPrecParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FixedMultiPrecParams_params_2eproto.base);
  return *internal_default_instance();
}


void FixedMultiPrecParams::Clear() {
// @@protoc_insertion_point(message_clear_start:FixedMultiPrecParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sigma_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dim_) -
      reinterpret_cast<char*>(&sigma_)) + sizeof(dim_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FixedMultiPrecParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double sigma = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          sigma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 dim = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FixedMultiPrecParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FixedMultiPrecParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double sigma = 1;
  if (!(this->sigma() <= 0 && this->sigma() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_sigma(), target);
  }

  // int32 dim = 2;
  if (this->dim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_dim(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FixedMultiPrecParams)
  return target;
}

size_t FixedMultiPrecParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FixedMultiPrecParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double sigma = 1;
  if (!(this->sigma() <= 0 && this->sigma() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 dim = 2;
  if (this->dim() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dim());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FixedMultiPrecParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FixedMultiPrecParams)
  GOOGLE_DCHECK_NE(&from, this);
  const FixedMultiPrecParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FixedMultiPrecParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FixedMultiPrecParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FixedMultiPrecParams)
    MergeFrom(*source);
  }
}

void FixedMultiPrecParams::MergeFrom(const FixedMultiPrecParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FixedMultiPrecParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.sigma() <= 0 && from.sigma() >= 0)) {
    _internal_set_sigma(from._internal_sigma());
  }
  if (from.dim() != 0) {
    _internal_set_dim(from._internal_dim());
  }
}

void FixedMultiPrecParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FixedMultiPrecParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixedMultiPrecParams::CopyFrom(const FixedMultiPrecParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FixedMultiPrecParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixedMultiPrecParams::IsInitialized() const {
  return true;
}

void FixedMultiPrecParams::InternalSwap(FixedMultiPrecParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FixedMultiPrecParams, dim_)
      + sizeof(FixedMultiPrecParams::dim_)
      - PROTOBUF_FIELD_OFFSET(FixedMultiPrecParams, sigma_)>(
          reinterpret_cast<char*>(&sigma_),
          reinterpret_cast<char*>(&other->sigma_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FixedMultiPrecParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FixedUnivPrecParams::_Internal {
 public:
};

FixedUnivPrecParams::FixedUnivPrecParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FixedUnivPrecParams)
}
FixedUnivPrecParams::FixedUnivPrecParams(const FixedUnivPrecParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sigma_ = from.sigma_;
  // @@protoc_insertion_point(copy_constructor:FixedUnivPrecParams)
}

void FixedUnivPrecParams::SharedCtor() {
  sigma_ = 0;
}

FixedUnivPrecParams::~FixedUnivPrecParams() {
  // @@protoc_insertion_point(destructor:FixedUnivPrecParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FixedUnivPrecParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FixedUnivPrecParams::ArenaDtor(void* object) {
  FixedUnivPrecParams* _this = reinterpret_cast< FixedUnivPrecParams* >(object);
  (void)_this;
}
void FixedUnivPrecParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FixedUnivPrecParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FixedUnivPrecParams& FixedUnivPrecParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FixedUnivPrecParams_params_2eproto.base);
  return *internal_default_instance();
}


void FixedUnivPrecParams::Clear() {
// @@protoc_insertion_point(message_clear_start:FixedUnivPrecParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sigma_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FixedUnivPrecParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double sigma = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          sigma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FixedUnivPrecParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FixedUnivPrecParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double sigma = 1;
  if (!(this->sigma() <= 0 && this->sigma() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_sigma(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FixedUnivPrecParams)
  return target;
}

size_t FixedUnivPrecParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FixedUnivPrecParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double sigma = 1;
  if (!(this->sigma() <= 0 && this->sigma() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FixedUnivPrecParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FixedUnivPrecParams)
  GOOGLE_DCHECK_NE(&from, this);
  const FixedUnivPrecParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FixedUnivPrecParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FixedUnivPrecParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FixedUnivPrecParams)
    MergeFrom(*source);
  }
}

void FixedUnivPrecParams::MergeFrom(const FixedUnivPrecParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FixedUnivPrecParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.sigma() <= 0 && from.sigma() >= 0)) {
    _internal_set_sigma(from._internal_sigma());
  }
}

void FixedUnivPrecParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FixedUnivPrecParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixedUnivPrecParams::CopyFrom(const FixedUnivPrecParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FixedUnivPrecParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixedUnivPrecParams::IsInitialized() const {
  return true;
}

void FixedUnivPrecParams::InternalSwap(FixedUnivPrecParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(sigma_, other->sigma_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FixedUnivPrecParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GammaParams::_Internal {
 public:
};

GammaParams::GammaParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GammaParams)
}
GammaParams::GammaParams(const GammaParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&alpha_, &from.alpha_,
    static_cast<size_t>(reinterpret_cast<char*>(&beta_) -
    reinterpret_cast<char*>(&alpha_)) + sizeof(beta_));
  // @@protoc_insertion_point(copy_constructor:GammaParams)
}

void GammaParams::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&alpha_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&beta_) -
      reinterpret_cast<char*>(&alpha_)) + sizeof(beta_));
}

GammaParams::~GammaParams() {
  // @@protoc_insertion_point(destructor:GammaParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GammaParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GammaParams::ArenaDtor(void* object) {
  GammaParams* _this = reinterpret_cast< GammaParams* >(object);
  (void)_this;
}
void GammaParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GammaParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GammaParams& GammaParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GammaParams_params_2eproto.base);
  return *internal_default_instance();
}


void GammaParams::Clear() {
// @@protoc_insertion_point(message_clear_start:GammaParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&alpha_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&beta_) -
      reinterpret_cast<char*>(&alpha_)) + sizeof(beta_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GammaParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double alpha = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double beta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          beta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GammaParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GammaParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double alpha = 1;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_alpha(), target);
  }

  // double beta = 2;
  if (!(this->beta() <= 0 && this->beta() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_beta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GammaParams)
  return target;
}

size_t GammaParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GammaParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double alpha = 1;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    total_size += 1 + 8;
  }

  // double beta = 2;
  if (!(this->beta() <= 0 && this->beta() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GammaParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GammaParams)
  GOOGLE_DCHECK_NE(&from, this);
  const GammaParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GammaParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GammaParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GammaParams)
    MergeFrom(*source);
  }
}

void GammaParams::MergeFrom(const GammaParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GammaParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.alpha() <= 0 && from.alpha() >= 0)) {
    _internal_set_alpha(from._internal_alpha());
  }
  if (!(from.beta() <= 0 && from.beta() >= 0)) {
    _internal_set_beta(from._internal_beta());
  }
}

void GammaParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GammaParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GammaParams::CopyFrom(const GammaParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GammaParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GammaParams::IsInitialized() const {
  return true;
}

void GammaParams::InternalSwap(GammaParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GammaParams, beta_)
      + sizeof(GammaParams::beta_)
      - PROTOBUF_FIELD_OFFSET(GammaParams, alpha_)>(
          reinterpret_cast<char*>(&alpha_),
          reinterpret_cast<char*>(&other->alpha_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GammaParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StraussParams_Priors::_Internal {
 public:
};

StraussParams_Priors::StraussParams_Priors(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:StraussParams.Priors)
}
StraussParams_Priors::StraussParams_Priors(const StraussParams_Priors& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&beta_l_, &from.beta_l_,
    static_cast<size_t>(reinterpret_cast<char*>(&r_u_) -
    reinterpret_cast<char*>(&beta_l_)) + sizeof(r_u_));
  // @@protoc_insertion_point(copy_constructor:StraussParams.Priors)
}

void StraussParams_Priors::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&beta_l_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&r_u_) -
      reinterpret_cast<char*>(&beta_l_)) + sizeof(r_u_));
}

StraussParams_Priors::~StraussParams_Priors() {
  // @@protoc_insertion_point(destructor:StraussParams.Priors)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StraussParams_Priors::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StraussParams_Priors::ArenaDtor(void* object) {
  StraussParams_Priors* _this = reinterpret_cast< StraussParams_Priors* >(object);
  (void)_this;
}
void StraussParams_Priors::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StraussParams_Priors::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StraussParams_Priors& StraussParams_Priors::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StraussParams_Priors_params_2eproto.base);
  return *internal_default_instance();
}


void StraussParams_Priors::Clear() {
// @@protoc_insertion_point(message_clear_start:StraussParams.Priors)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&beta_l_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&r_u_) -
      reinterpret_cast<char*>(&beta_l_)) + sizeof(r_u_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StraussParams_Priors::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double beta_l = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          beta_l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double beta_u = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          beta_u_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double gamma_l = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          gamma_l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double gamma_u = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          gamma_u_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double r_l = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          r_l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double r_u = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          r_u_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StraussParams_Priors::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StraussParams.Priors)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double beta_l = 1;
  if (!(this->beta_l() <= 0 && this->beta_l() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_beta_l(), target);
  }

  // double beta_u = 2;
  if (!(this->beta_u() <= 0 && this->beta_u() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_beta_u(), target);
  }

  // double gamma_l = 3;
  if (!(this->gamma_l() <= 0 && this->gamma_l() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_gamma_l(), target);
  }

  // double gamma_u = 4;
  if (!(this->gamma_u() <= 0 && this->gamma_u() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_gamma_u(), target);
  }

  // double r_l = 5;
  if (!(this->r_l() <= 0 && this->r_l() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_r_l(), target);
  }

  // double r_u = 6;
  if (!(this->r_u() <= 0 && this->r_u() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_r_u(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StraussParams.Priors)
  return target;
}

size_t StraussParams_Priors::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StraussParams.Priors)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double beta_l = 1;
  if (!(this->beta_l() <= 0 && this->beta_l() >= 0)) {
    total_size += 1 + 8;
  }

  // double beta_u = 2;
  if (!(this->beta_u() <= 0 && this->beta_u() >= 0)) {
    total_size += 1 + 8;
  }

  // double gamma_l = 3;
  if (!(this->gamma_l() <= 0 && this->gamma_l() >= 0)) {
    total_size += 1 + 8;
  }

  // double gamma_u = 4;
  if (!(this->gamma_u() <= 0 && this->gamma_u() >= 0)) {
    total_size += 1 + 8;
  }

  // double r_l = 5;
  if (!(this->r_l() <= 0 && this->r_l() >= 0)) {
    total_size += 1 + 8;
  }

  // double r_u = 6;
  if (!(this->r_u() <= 0 && this->r_u() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StraussParams_Priors::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StraussParams.Priors)
  GOOGLE_DCHECK_NE(&from, this);
  const StraussParams_Priors* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StraussParams_Priors>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StraussParams.Priors)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StraussParams.Priors)
    MergeFrom(*source);
  }
}

void StraussParams_Priors::MergeFrom(const StraussParams_Priors& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StraussParams.Priors)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.beta_l() <= 0 && from.beta_l() >= 0)) {
    _internal_set_beta_l(from._internal_beta_l());
  }
  if (!(from.beta_u() <= 0 && from.beta_u() >= 0)) {
    _internal_set_beta_u(from._internal_beta_u());
  }
  if (!(from.gamma_l() <= 0 && from.gamma_l() >= 0)) {
    _internal_set_gamma_l(from._internal_gamma_l());
  }
  if (!(from.gamma_u() <= 0 && from.gamma_u() >= 0)) {
    _internal_set_gamma_u(from._internal_gamma_u());
  }
  if (!(from.r_l() <= 0 && from.r_l() >= 0)) {
    _internal_set_r_l(from._internal_r_l());
  }
  if (!(from.r_u() <= 0 && from.r_u() >= 0)) {
    _internal_set_r_u(from._internal_r_u());
  }
}

void StraussParams_Priors::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StraussParams.Priors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StraussParams_Priors::CopyFrom(const StraussParams_Priors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StraussParams.Priors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StraussParams_Priors::IsInitialized() const {
  return true;
}

void StraussParams_Priors::InternalSwap(StraussParams_Priors* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StraussParams_Priors, r_u_)
      + sizeof(StraussParams_Priors::r_u_)
      - PROTOBUF_FIELD_OFFSET(StraussParams_Priors, beta_l_)>(
          reinterpret_cast<char*>(&beta_l_),
          reinterpret_cast<char*>(&other->beta_l_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StraussParams_Priors::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StraussParams_Inits::_Internal {
 public:
};

StraussParams_Inits::StraussParams_Inits(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:StraussParams.Inits)
}
StraussParams_Inits::StraussParams_Inits(const StraussParams_Inits& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&beta_, &from.beta_,
    static_cast<size_t>(reinterpret_cast<char*>(&r_) -
    reinterpret_cast<char*>(&beta_)) + sizeof(r_));
  // @@protoc_insertion_point(copy_constructor:StraussParams.Inits)
}

void StraussParams_Inits::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&beta_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&r_) -
      reinterpret_cast<char*>(&beta_)) + sizeof(r_));
}

StraussParams_Inits::~StraussParams_Inits() {
  // @@protoc_insertion_point(destructor:StraussParams.Inits)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StraussParams_Inits::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StraussParams_Inits::ArenaDtor(void* object) {
  StraussParams_Inits* _this = reinterpret_cast< StraussParams_Inits* >(object);
  (void)_this;
}
void StraussParams_Inits::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StraussParams_Inits::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StraussParams_Inits& StraussParams_Inits::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StraussParams_Inits_params_2eproto.base);
  return *internal_default_instance();
}


void StraussParams_Inits::Clear() {
// @@protoc_insertion_point(message_clear_start:StraussParams.Inits)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&beta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&r_) -
      reinterpret_cast<char*>(&beta_)) + sizeof(r_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StraussParams_Inits::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double beta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          beta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double gamma = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          gamma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double R = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StraussParams_Inits::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StraussParams.Inits)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double beta = 1;
  if (!(this->beta() <= 0 && this->beta() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_beta(), target);
  }

  // double gamma = 2;
  if (!(this->gamma() <= 0 && this->gamma() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_gamma(), target);
  }

  // double R = 3;
  if (!(this->r() <= 0 && this->r() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_r(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StraussParams.Inits)
  return target;
}

size_t StraussParams_Inits::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StraussParams.Inits)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double beta = 1;
  if (!(this->beta() <= 0 && this->beta() >= 0)) {
    total_size += 1 + 8;
  }

  // double gamma = 2;
  if (!(this->gamma() <= 0 && this->gamma() >= 0)) {
    total_size += 1 + 8;
  }

  // double R = 3;
  if (!(this->r() <= 0 && this->r() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StraussParams_Inits::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StraussParams.Inits)
  GOOGLE_DCHECK_NE(&from, this);
  const StraussParams_Inits* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StraussParams_Inits>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StraussParams.Inits)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StraussParams.Inits)
    MergeFrom(*source);
  }
}

void StraussParams_Inits::MergeFrom(const StraussParams_Inits& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StraussParams.Inits)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.beta() <= 0 && from.beta() >= 0)) {
    _internal_set_beta(from._internal_beta());
  }
  if (!(from.gamma() <= 0 && from.gamma() >= 0)) {
    _internal_set_gamma(from._internal_gamma());
  }
  if (!(from.r() <= 0 && from.r() >= 0)) {
    _internal_set_r(from._internal_r());
  }
}

void StraussParams_Inits::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StraussParams.Inits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StraussParams_Inits::CopyFrom(const StraussParams_Inits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StraussParams.Inits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StraussParams_Inits::IsInitialized() const {
  return true;
}

void StraussParams_Inits::InternalSwap(StraussParams_Inits* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StraussParams_Inits, r_)
      + sizeof(StraussParams_Inits::r_)
      - PROTOBUF_FIELD_OFFSET(StraussParams_Inits, beta_)>(
          reinterpret_cast<char*>(&beta_),
          reinterpret_cast<char*>(&other->beta_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StraussParams_Inits::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StraussParams::_Internal {
 public:
  static const ::StraussParams_Priors& prior(const StraussParams* msg);
  static const ::StraussParams_Inits& init(const StraussParams* msg);
};

const ::StraussParams_Priors&
StraussParams::_Internal::prior(const StraussParams* msg) {
  return *msg->prior_;
}
const ::StraussParams_Inits&
StraussParams::_Internal::init(const StraussParams* msg) {
  return *msg->init_;
}
StraussParams::StraussParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:StraussParams)
}
StraussParams::StraussParams(const StraussParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_prior()) {
    prior_ = new ::StraussParams_Priors(*from.prior_);
  } else {
    prior_ = nullptr;
  }
  if (from._internal_has_init()) {
    init_ = new ::StraussParams_Inits(*from.init_);
  } else {
    init_ = nullptr;
  }
  fixed_params_ = from.fixed_params_;
  // @@protoc_insertion_point(copy_constructor:StraussParams)
}

void StraussParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StraussParams_params_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&prior_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&fixed_params_) -
      reinterpret_cast<char*>(&prior_)) + sizeof(fixed_params_));
}

StraussParams::~StraussParams() {
  // @@protoc_insertion_point(destructor:StraussParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StraussParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete prior_;
  if (this != internal_default_instance()) delete init_;
}

void StraussParams::ArenaDtor(void* object) {
  StraussParams* _this = reinterpret_cast< StraussParams* >(object);
  (void)_this;
}
void StraussParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StraussParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StraussParams& StraussParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StraussParams_params_2eproto.base);
  return *internal_default_instance();
}


void StraussParams::Clear() {
// @@protoc_insertion_point(message_clear_start:StraussParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && prior_ != nullptr) {
    delete prior_;
  }
  prior_ = nullptr;
  if (GetArena() == nullptr && init_ != nullptr) {
    delete init_;
  }
  init_ = nullptr;
  fixed_params_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StraussParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .StraussParams.Priors prior = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_prior(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .StraussParams.Inits init = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_init(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool fixed_params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          fixed_params_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StraussParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StraussParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .StraussParams.Priors prior = 1;
  if (this->has_prior()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::prior(this), target, stream);
  }

  // .StraussParams.Inits init = 2;
  if (this->has_init()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::init(this), target, stream);
  }

  // bool fixed_params = 3;
  if (this->fixed_params() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_fixed_params(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StraussParams)
  return target;
}

size_t StraussParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StraussParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .StraussParams.Priors prior = 1;
  if (this->has_prior()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prior_);
  }

  // .StraussParams.Inits init = 2;
  if (this->has_init()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *init_);
  }

  // bool fixed_params = 3;
  if (this->fixed_params() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StraussParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StraussParams)
  GOOGLE_DCHECK_NE(&from, this);
  const StraussParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StraussParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StraussParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StraussParams)
    MergeFrom(*source);
  }
}

void StraussParams::MergeFrom(const StraussParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StraussParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_prior()) {
    _internal_mutable_prior()->::StraussParams_Priors::MergeFrom(from._internal_prior());
  }
  if (from.has_init()) {
    _internal_mutable_init()->::StraussParams_Inits::MergeFrom(from._internal_init());
  }
  if (from.fixed_params() != 0) {
    _internal_set_fixed_params(from._internal_fixed_params());
  }
}

void StraussParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StraussParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StraussParams::CopyFrom(const StraussParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StraussParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StraussParams::IsInitialized() const {
  return true;
}

void StraussParams::InternalSwap(StraussParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StraussParams, fixed_params_)
      + sizeof(StraussParams::fixed_params_)
      - PROTOBUF_FIELD_OFFSET(StraussParams, prior_)>(
          reinterpret_cast<char*>(&prior_),
          reinterpret_cast<char*>(&other->prior_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StraussParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NrepParams::_Internal {
 public:
};

NrepParams::NrepParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NrepParams)
}
NrepParams::NrepParams(const NrepParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&u_, &from.u_,
    static_cast<size_t>(reinterpret_cast<char*>(&p_) -
    reinterpret_cast<char*>(&u_)) + sizeof(p_));
  // @@protoc_insertion_point(copy_constructor:NrepParams)
}

void NrepParams::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&u_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&p_) -
      reinterpret_cast<char*>(&u_)) + sizeof(p_));
}

NrepParams::~NrepParams() {
  // @@protoc_insertion_point(destructor:NrepParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NrepParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NrepParams::ArenaDtor(void* object) {
  NrepParams* _this = reinterpret_cast< NrepParams* >(object);
  (void)_this;
}
void NrepParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NrepParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NrepParams& NrepParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NrepParams_params_2eproto.base);
  return *internal_default_instance();
}


void NrepParams::Clear() {
// @@protoc_insertion_point(message_clear_start:NrepParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&u_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&p_) -
      reinterpret_cast<char*>(&u_)) + sizeof(p_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NrepParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double u = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          u_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double p = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          p_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NrepParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NrepParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double u = 1;
  if (!(this->u() <= 0 && this->u() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_u(), target);
  }

  // double p = 2;
  if (!(this->p() <= 0 && this->p() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_p(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NrepParams)
  return target;
}

size_t NrepParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NrepParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double u = 1;
  if (!(this->u() <= 0 && this->u() >= 0)) {
    total_size += 1 + 8;
  }

  // double p = 2;
  if (!(this->p() <= 0 && this->p() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NrepParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NrepParams)
  GOOGLE_DCHECK_NE(&from, this);
  const NrepParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NrepParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NrepParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NrepParams)
    MergeFrom(*source);
  }
}

void NrepParams::MergeFrom(const NrepParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NrepParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.u() <= 0 && from.u() >= 0)) {
    _internal_set_u(from._internal_u());
  }
  if (!(from.p() <= 0 && from.p() >= 0)) {
    _internal_set_p(from._internal_p());
  }
}

void NrepParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NrepParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NrepParams::CopyFrom(const NrepParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NrepParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NrepParams::IsInitialized() const {
  return true;
}

void NrepParams::InternalSwap(NrepParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NrepParams, p_)
      + sizeof(NrepParams::p_)
      - PROTOBUF_FIELD_OFFSET(NrepParams, u_)>(
          reinterpret_cast<char*>(&u_),
          reinterpret_cast<char*>(&other->u_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NrepParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DPPParams::_Internal {
 public:
};

DPPParams::DPPParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DPPParams)
}
DPPParams::DPPParams(const DPPParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&nu_, &from.nu_,
    static_cast<size_t>(reinterpret_cast<char*>(&n_) -
    reinterpret_cast<char*>(&nu_)) + sizeof(n_));
  // @@protoc_insertion_point(copy_constructor:DPPParams)
}

void DPPParams::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&nu_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&n_) -
      reinterpret_cast<char*>(&nu_)) + sizeof(n_));
}

DPPParams::~DPPParams() {
  // @@protoc_insertion_point(destructor:DPPParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DPPParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DPPParams::ArenaDtor(void* object) {
  DPPParams* _this = reinterpret_cast< DPPParams* >(object);
  (void)_this;
}
void DPPParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DPPParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DPPParams& DPPParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DPPParams_params_2eproto.base);
  return *internal_default_instance();
}


void DPPParams::Clear() {
// @@protoc_insertion_point(message_clear_start:DPPParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&nu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&n_) -
      reinterpret_cast<char*>(&nu_)) + sizeof(n_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DPPParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double nu = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double rho = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          rho_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 N = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          n_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double s = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DPPParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DPPParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double nu = 1;
  if (!(this->nu() <= 0 && this->nu() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_nu(), target);
  }

  // double rho = 2;
  if (!(this->rho() <= 0 && this->rho() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_rho(), target);
  }

  // int32 N = 3;
  if (this->n() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_n(), target);
  }

  // double s = 4;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DPPParams)
  return target;
}

size_t DPPParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DPPParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double nu = 1;
  if (!(this->nu() <= 0 && this->nu() >= 0)) {
    total_size += 1 + 8;
  }

  // double rho = 2;
  if (!(this->rho() <= 0 && this->rho() >= 0)) {
    total_size += 1 + 8;
  }

  // double s = 4;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 N = 3;
  if (this->n() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_n());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DPPParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DPPParams)
  GOOGLE_DCHECK_NE(&from, this);
  const DPPParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DPPParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DPPParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DPPParams)
    MergeFrom(*source);
  }
}

void DPPParams::MergeFrom(const DPPParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DPPParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.nu() <= 0 && from.nu() >= 0)) {
    _internal_set_nu(from._internal_nu());
  }
  if (!(from.rho() <= 0 && from.rho() >= 0)) {
    _internal_set_rho(from._internal_rho());
  }
  if (!(from.s() <= 0 && from.s() >= 0)) {
    _internal_set_s(from._internal_s());
  }
  if (from.n() != 0) {
    _internal_set_n(from._internal_n());
  }
}

void DPPParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DPPParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DPPParams::CopyFrom(const DPPParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DPPParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DPPParams::IsInitialized() const {
  return true;
}

void DPPParams::InternalSwap(DPPParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DPPParams, n_)
      + sizeof(DPPParams::n_)
      - PROTOBUF_FIELD_OFFSET(DPPParams, nu_)>(
          reinterpret_cast<char*>(&nu_),
          reinterpret_cast<char*>(&other->nu_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DPPParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Params::_Internal {
 public:
  static const ::StraussParams& strauss(const Params* msg);
  static const ::NrepParams& nrep(const Params* msg);
  static const ::DPPParams& dpp(const Params* msg);
  static const ::FixedMultiPrecParams& fixed_multi_prec(const Params* msg);
  static const ::WishartParams& wishart(const Params* msg);
  static const ::FixedUnivPrecParams& fixed_univ_prec(const Params* msg);
  static const ::GammaParams& gamma_prec(const Params* msg);
  static const ::GammaParams& gamma_jump(const Params* msg);
};

const ::StraussParams&
Params::_Internal::strauss(const Params* msg) {
  return *msg->pp_params_.strauss_;
}
const ::NrepParams&
Params::_Internal::nrep(const Params* msg) {
  return *msg->pp_params_.nrep_;
}
const ::DPPParams&
Params::_Internal::dpp(const Params* msg) {
  return *msg->pp_params_.dpp_;
}
const ::FixedMultiPrecParams&
Params::_Internal::fixed_multi_prec(const Params* msg) {
  return *msg->prec_params_.fixed_multi_prec_;
}
const ::WishartParams&
Params::_Internal::wishart(const Params* msg) {
  return *msg->prec_params_.wishart_;
}
const ::FixedUnivPrecParams&
Params::_Internal::fixed_univ_prec(const Params* msg) {
  return *msg->prec_params_.fixed_univ_prec_;
}
const ::GammaParams&
Params::_Internal::gamma_prec(const Params* msg) {
  return *msg->prec_params_.gamma_prec_;
}
const ::GammaParams&
Params::_Internal::gamma_jump(const Params* msg) {
  return *msg->gamma_jump_;
}
void Params::set_allocated_strauss(::StraussParams* strauss) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_pp_params();
  if (strauss) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(strauss);
    if (message_arena != submessage_arena) {
      strauss = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, strauss, submessage_arena);
    }
    set_has_strauss();
    pp_params_.strauss_ = strauss;
  }
  // @@protoc_insertion_point(field_set_allocated:Params.strauss)
}
void Params::set_allocated_nrep(::NrepParams* nrep) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_pp_params();
  if (nrep) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(nrep);
    if (message_arena != submessage_arena) {
      nrep = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nrep, submessage_arena);
    }
    set_has_nrep();
    pp_params_.nrep_ = nrep;
  }
  // @@protoc_insertion_point(field_set_allocated:Params.nrep)
}
void Params::set_allocated_dpp(::DPPParams* dpp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_pp_params();
  if (dpp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dpp);
    if (message_arena != submessage_arena) {
      dpp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dpp, submessage_arena);
    }
    set_has_dpp();
    pp_params_.dpp_ = dpp;
  }
  // @@protoc_insertion_point(field_set_allocated:Params.dpp)
}
void Params::set_allocated_fixed_multi_prec(::FixedMultiPrecParams* fixed_multi_prec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_prec_params();
  if (fixed_multi_prec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fixed_multi_prec);
    if (message_arena != submessage_arena) {
      fixed_multi_prec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fixed_multi_prec, submessage_arena);
    }
    set_has_fixed_multi_prec();
    prec_params_.fixed_multi_prec_ = fixed_multi_prec;
  }
  // @@protoc_insertion_point(field_set_allocated:Params.fixed_multi_prec)
}
void Params::set_allocated_wishart(::WishartParams* wishart) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_prec_params();
  if (wishart) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(wishart);
    if (message_arena != submessage_arena) {
      wishart = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wishart, submessage_arena);
    }
    set_has_wishart();
    prec_params_.wishart_ = wishart;
  }
  // @@protoc_insertion_point(field_set_allocated:Params.wishart)
}
void Params::set_allocated_fixed_univ_prec(::FixedUnivPrecParams* fixed_univ_prec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_prec_params();
  if (fixed_univ_prec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fixed_univ_prec);
    if (message_arena != submessage_arena) {
      fixed_univ_prec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fixed_univ_prec, submessage_arena);
    }
    set_has_fixed_univ_prec();
    prec_params_.fixed_univ_prec_ = fixed_univ_prec;
  }
  // @@protoc_insertion_point(field_set_allocated:Params.fixed_univ_prec)
}
void Params::set_allocated_gamma_prec(::GammaParams* gamma_prec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_prec_params();
  if (gamma_prec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gamma_prec);
    if (message_arena != submessage_arena) {
      gamma_prec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gamma_prec, submessage_arena);
    }
    set_has_gamma_prec();
    prec_params_.gamma_prec_ = gamma_prec;
  }
  // @@protoc_insertion_point(field_set_allocated:Params.gamma_prec)
}
Params::Params(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Params)
}
Params::Params(const Params& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gamma_jump()) {
    gamma_jump_ = new ::GammaParams(*from.gamma_jump_);
  } else {
    gamma_jump_ = nullptr;
  }
  mala_stepsize_ = from.mala_stepsize_;
  clear_has_pp_params();
  switch (from.pp_params_case()) {
    case kStrauss: {
      _internal_mutable_strauss()->::StraussParams::MergeFrom(from._internal_strauss());
      break;
    }
    case kNrep: {
      _internal_mutable_nrep()->::NrepParams::MergeFrom(from._internal_nrep());
      break;
    }
    case kDpp: {
      _internal_mutable_dpp()->::DPPParams::MergeFrom(from._internal_dpp());
      break;
    }
    case PP_PARAMS_NOT_SET: {
      break;
    }
  }
  clear_has_prec_params();
  switch (from.prec_params_case()) {
    case kFixedMultiPrec: {
      _internal_mutable_fixed_multi_prec()->::FixedMultiPrecParams::MergeFrom(from._internal_fixed_multi_prec());
      break;
    }
    case kWishart: {
      _internal_mutable_wishart()->::WishartParams::MergeFrom(from._internal_wishart());
      break;
    }
    case kFixedUnivPrec: {
      _internal_mutable_fixed_univ_prec()->::FixedUnivPrecParams::MergeFrom(from._internal_fixed_univ_prec());
      break;
    }
    case kGammaPrec: {
      _internal_mutable_gamma_prec()->::GammaParams::MergeFrom(from._internal_gamma_prec());
      break;
    }
    case PREC_PARAMS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Params)
}

void Params::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Params_params_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&gamma_jump_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&mala_stepsize_) -
      reinterpret_cast<char*>(&gamma_jump_)) + sizeof(mala_stepsize_));
  clear_has_pp_params();
  clear_has_prec_params();
}

Params::~Params() {
  // @@protoc_insertion_point(destructor:Params)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Params::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete gamma_jump_;
  if (has_pp_params()) {
    clear_pp_params();
  }
  if (has_prec_params()) {
    clear_prec_params();
  }
}

void Params::ArenaDtor(void* object) {
  Params* _this = reinterpret_cast< Params* >(object);
  (void)_this;
}
void Params::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Params::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Params& Params::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Params_params_2eproto.base);
  return *internal_default_instance();
}


void Params::clear_pp_params() {
// @@protoc_insertion_point(one_of_clear_start:Params)
  switch (pp_params_case()) {
    case kStrauss: {
      if (GetArena() == nullptr) {
        delete pp_params_.strauss_;
      }
      break;
    }
    case kNrep: {
      if (GetArena() == nullptr) {
        delete pp_params_.nrep_;
      }
      break;
    }
    case kDpp: {
      if (GetArena() == nullptr) {
        delete pp_params_.dpp_;
      }
      break;
    }
    case PP_PARAMS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PP_PARAMS_NOT_SET;
}

void Params::clear_prec_params() {
// @@protoc_insertion_point(one_of_clear_start:Params)
  switch (prec_params_case()) {
    case kFixedMultiPrec: {
      if (GetArena() == nullptr) {
        delete prec_params_.fixed_multi_prec_;
      }
      break;
    }
    case kWishart: {
      if (GetArena() == nullptr) {
        delete prec_params_.wishart_;
      }
      break;
    }
    case kFixedUnivPrec: {
      if (GetArena() == nullptr) {
        delete prec_params_.fixed_univ_prec_;
      }
      break;
    }
    case kGammaPrec: {
      if (GetArena() == nullptr) {
        delete prec_params_.gamma_prec_;
      }
      break;
    }
    case PREC_PARAMS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = PREC_PARAMS_NOT_SET;
}


void Params::Clear() {
// @@protoc_insertion_point(message_clear_start:Params)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && gamma_jump_ != nullptr) {
    delete gamma_jump_;
  }
  gamma_jump_ = nullptr;
  mala_stepsize_ = 0;
  clear_pp_params();
  clear_prec_params();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Params::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .StraussParams strauss = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_strauss(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NrepParams nrep = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_nrep(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DPPParams dpp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_dpp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .FixedMultiPrecParams fixed_multi_prec = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_fixed_multi_prec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .WishartParams wishart = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_wishart(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .FixedUnivPrecParams fixed_univ_prec = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_fixed_univ_prec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GammaParams gamma_prec = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamma_prec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GammaParams gamma_jump = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamma_jump(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double mala_stepsize = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          mala_stepsize_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Params::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Params)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .StraussParams strauss = 1;
  if (_internal_has_strauss()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::strauss(this), target, stream);
  }

  // .NrepParams nrep = 2;
  if (_internal_has_nrep()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::nrep(this), target, stream);
  }

  // .DPPParams dpp = 3;
  if (_internal_has_dpp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::dpp(this), target, stream);
  }

  // .FixedMultiPrecParams fixed_multi_prec = 4;
  if (_internal_has_fixed_multi_prec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::fixed_multi_prec(this), target, stream);
  }

  // .WishartParams wishart = 5;
  if (_internal_has_wishart()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::wishart(this), target, stream);
  }

  // .FixedUnivPrecParams fixed_univ_prec = 6;
  if (_internal_has_fixed_univ_prec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::fixed_univ_prec(this), target, stream);
  }

  // .GammaParams gamma_prec = 7;
  if (_internal_has_gamma_prec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::gamma_prec(this), target, stream);
  }

  // .GammaParams gamma_jump = 8;
  if (this->has_gamma_jump()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::gamma_jump(this), target, stream);
  }

  // double mala_stepsize = 9;
  if (!(this->mala_stepsize() <= 0 && this->mala_stepsize() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_mala_stepsize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Params)
  return target;
}

size_t Params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Params)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .GammaParams gamma_jump = 8;
  if (this->has_gamma_jump()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gamma_jump_);
  }

  // double mala_stepsize = 9;
  if (!(this->mala_stepsize() <= 0 && this->mala_stepsize() >= 0)) {
    total_size += 1 + 8;
  }

  switch (pp_params_case()) {
    // .StraussParams strauss = 1;
    case kStrauss: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pp_params_.strauss_);
      break;
    }
    // .NrepParams nrep = 2;
    case kNrep: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pp_params_.nrep_);
      break;
    }
    // .DPPParams dpp = 3;
    case kDpp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pp_params_.dpp_);
      break;
    }
    case PP_PARAMS_NOT_SET: {
      break;
    }
  }
  switch (prec_params_case()) {
    // .FixedMultiPrecParams fixed_multi_prec = 4;
    case kFixedMultiPrec: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *prec_params_.fixed_multi_prec_);
      break;
    }
    // .WishartParams wishart = 5;
    case kWishart: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *prec_params_.wishart_);
      break;
    }
    // .FixedUnivPrecParams fixed_univ_prec = 6;
    case kFixedUnivPrec: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *prec_params_.fixed_univ_prec_);
      break;
    }
    // .GammaParams gamma_prec = 7;
    case kGammaPrec: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *prec_params_.gamma_prec_);
      break;
    }
    case PREC_PARAMS_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Params::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Params)
  GOOGLE_DCHECK_NE(&from, this);
  const Params* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Params>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Params)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Params)
    MergeFrom(*source);
  }
}

void Params::MergeFrom(const Params& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Params)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gamma_jump()) {
    _internal_mutable_gamma_jump()->::GammaParams::MergeFrom(from._internal_gamma_jump());
  }
  if (!(from.mala_stepsize() <= 0 && from.mala_stepsize() >= 0)) {
    _internal_set_mala_stepsize(from._internal_mala_stepsize());
  }
  switch (from.pp_params_case()) {
    case kStrauss: {
      _internal_mutable_strauss()->::StraussParams::MergeFrom(from._internal_strauss());
      break;
    }
    case kNrep: {
      _internal_mutable_nrep()->::NrepParams::MergeFrom(from._internal_nrep());
      break;
    }
    case kDpp: {
      _internal_mutable_dpp()->::DPPParams::MergeFrom(from._internal_dpp());
      break;
    }
    case PP_PARAMS_NOT_SET: {
      break;
    }
  }
  switch (from.prec_params_case()) {
    case kFixedMultiPrec: {
      _internal_mutable_fixed_multi_prec()->::FixedMultiPrecParams::MergeFrom(from._internal_fixed_multi_prec());
      break;
    }
    case kWishart: {
      _internal_mutable_wishart()->::WishartParams::MergeFrom(from._internal_wishart());
      break;
    }
    case kFixedUnivPrec: {
      _internal_mutable_fixed_univ_prec()->::FixedUnivPrecParams::MergeFrom(from._internal_fixed_univ_prec());
      break;
    }
    case kGammaPrec: {
      _internal_mutable_gamma_prec()->::GammaParams::MergeFrom(from._internal_gamma_prec());
      break;
    }
    case PREC_PARAMS_NOT_SET: {
      break;
    }
  }
}

void Params::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Params::CopyFrom(const Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Params::IsInitialized() const {
  return true;
}

void Params::InternalSwap(Params* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Params, mala_stepsize_)
      + sizeof(Params::mala_stepsize_)
      - PROTOBUF_FIELD_OFFSET(Params, gamma_jump_)>(
          reinterpret_cast<char*>(&gamma_jump_),
          reinterpret_cast<char*>(&other->gamma_jump_));
  swap(pp_params_, other->pp_params_);
  swap(prec_params_, other->prec_params_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Params::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::WishartParams* Arena::CreateMaybeMessage< ::WishartParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WishartParams >(arena);
}
template<> PROTOBUF_NOINLINE ::FixedMultiPrecParams* Arena::CreateMaybeMessage< ::FixedMultiPrecParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FixedMultiPrecParams >(arena);
}
template<> PROTOBUF_NOINLINE ::FixedUnivPrecParams* Arena::CreateMaybeMessage< ::FixedUnivPrecParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FixedUnivPrecParams >(arena);
}
template<> PROTOBUF_NOINLINE ::GammaParams* Arena::CreateMaybeMessage< ::GammaParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GammaParams >(arena);
}
template<> PROTOBUF_NOINLINE ::StraussParams_Priors* Arena::CreateMaybeMessage< ::StraussParams_Priors >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StraussParams_Priors >(arena);
}
template<> PROTOBUF_NOINLINE ::StraussParams_Inits* Arena::CreateMaybeMessage< ::StraussParams_Inits >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StraussParams_Inits >(arena);
}
template<> PROTOBUF_NOINLINE ::StraussParams* Arena::CreateMaybeMessage< ::StraussParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StraussParams >(arena);
}
template<> PROTOBUF_NOINLINE ::NrepParams* Arena::CreateMaybeMessage< ::NrepParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NrepParams >(arena);
}
template<> PROTOBUF_NOINLINE ::DPPParams* Arena::CreateMaybeMessage< ::DPPParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DPPParams >(arena);
}
template<> PROTOBUF_NOINLINE ::Params* Arena::CreateMaybeMessage< ::Params >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Params >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
