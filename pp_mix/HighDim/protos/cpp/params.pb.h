// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: params.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_params_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_params_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_params_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_params_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_params_2eproto;
class DPPParams;
class DPPParamsDefaultTypeInternal;
extern DPPParamsDefaultTypeInternal _DPPParams_default_instance_;
class FixedMultiPrecParams;
class FixedMultiPrecParamsDefaultTypeInternal;
extern FixedMultiPrecParamsDefaultTypeInternal _FixedMultiPrecParams_default_instance_;
class FixedUnivPrecParams;
class FixedUnivPrecParamsDefaultTypeInternal;
extern FixedUnivPrecParamsDefaultTypeInternal _FixedUnivPrecParams_default_instance_;
class GammaParams;
class GammaParamsDefaultTypeInternal;
extern GammaParamsDefaultTypeInternal _GammaParams_default_instance_;
class Params;
class ParamsDefaultTypeInternal;
extern ParamsDefaultTypeInternal _Params_default_instance_;
class WishartParams;
class WishartParamsDefaultTypeInternal;
extern WishartParamsDefaultTypeInternal _WishartParams_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::DPPParams* Arena::CreateMaybeMessage<::DPPParams>(Arena*);
template<> ::FixedMultiPrecParams* Arena::CreateMaybeMessage<::FixedMultiPrecParams>(Arena*);
template<> ::FixedUnivPrecParams* Arena::CreateMaybeMessage<::FixedUnivPrecParams>(Arena*);
template<> ::GammaParams* Arena::CreateMaybeMessage<::GammaParams>(Arena*);
template<> ::Params* Arena::CreateMaybeMessage<::Params>(Arena*);
template<> ::WishartParams* Arena::CreateMaybeMessage<::WishartParams>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class WishartParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WishartParams) */ {
 public:
  inline WishartParams() : WishartParams(nullptr) {}
  virtual ~WishartParams();

  WishartParams(const WishartParams& from);
  WishartParams(WishartParams&& from) noexcept
    : WishartParams() {
    *this = ::std::move(from);
  }

  inline WishartParams& operator=(const WishartParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline WishartParams& operator=(WishartParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WishartParams& default_instance();

  enum SigmaCase {
    kSigma = 3,
    SIGMA__NOT_SET = 0,
  };

  static inline const WishartParams* internal_default_instance() {
    return reinterpret_cast<const WishartParams*>(
               &_WishartParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WishartParams& a, WishartParams& b) {
    a.Swap(&b);
  }
  inline void Swap(WishartParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WishartParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WishartParams* New() const final {
    return CreateMaybeMessage<WishartParams>(nullptr);
  }

  WishartParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WishartParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WishartParams& from);
  void MergeFrom(const WishartParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WishartParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WishartParams";
  }
  protected:
  explicit WishartParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_params_2eproto);
    return ::descriptor_table_params_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNuFieldNumber = 1,
    kIdentityFieldNumber = 2,
    kDimFieldNumber = 4,
    kSigmaFieldNumber = 3,
  };
  // double nu = 1;
  void clear_nu();
  double nu() const;
  void set_nu(double value);
  private:
  double _internal_nu() const;
  void _internal_set_nu(double value);
  public:

  // bool identity = 2;
  void clear_identity();
  bool identity() const;
  void set_identity(bool value);
  private:
  bool _internal_identity() const;
  void _internal_set_identity(bool value);
  public:

  // int32 dim = 4;
  void clear_dim();
  ::PROTOBUF_NAMESPACE_ID::int32 dim() const;
  void set_dim(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dim() const;
  void _internal_set_dim(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double sigma = 3;
  private:
  bool _internal_has_sigma() const;
  public:
  void clear_sigma();
  double sigma() const;
  void set_sigma(double value);
  private:
  double _internal_sigma() const;
  void _internal_set_sigma(double value);
  public:

  void clear_sigma_();
  SigmaCase sigma__case() const;
  // @@protoc_insertion_point(class_scope:WishartParams)
 private:
  class _Internal;
  void set_has_sigma();

  inline bool has_sigma_() const;
  inline void clear_has_sigma_();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double nu_;
  bool identity_;
  ::PROTOBUF_NAMESPACE_ID::int32 dim_;
  union SigmaUnion {
    SigmaUnion() {}
    double sigma_;
  } sigma__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_params_2eproto;
};
// -------------------------------------------------------------------

class FixedMultiPrecParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FixedMultiPrecParams) */ {
 public:
  inline FixedMultiPrecParams() : FixedMultiPrecParams(nullptr) {}
  virtual ~FixedMultiPrecParams();

  FixedMultiPrecParams(const FixedMultiPrecParams& from);
  FixedMultiPrecParams(FixedMultiPrecParams&& from) noexcept
    : FixedMultiPrecParams() {
    *this = ::std::move(from);
  }

  inline FixedMultiPrecParams& operator=(const FixedMultiPrecParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline FixedMultiPrecParams& operator=(FixedMultiPrecParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FixedMultiPrecParams& default_instance();

  static inline const FixedMultiPrecParams* internal_default_instance() {
    return reinterpret_cast<const FixedMultiPrecParams*>(
               &_FixedMultiPrecParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FixedMultiPrecParams& a, FixedMultiPrecParams& b) {
    a.Swap(&b);
  }
  inline void Swap(FixedMultiPrecParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FixedMultiPrecParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FixedMultiPrecParams* New() const final {
    return CreateMaybeMessage<FixedMultiPrecParams>(nullptr);
  }

  FixedMultiPrecParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FixedMultiPrecParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FixedMultiPrecParams& from);
  void MergeFrom(const FixedMultiPrecParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FixedMultiPrecParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FixedMultiPrecParams";
  }
  protected:
  explicit FixedMultiPrecParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_params_2eproto);
    return ::descriptor_table_params_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSigmaFieldNumber = 1,
    kDimFieldNumber = 2,
  };
  // double sigma = 1;
  void clear_sigma();
  double sigma() const;
  void set_sigma(double value);
  private:
  double _internal_sigma() const;
  void _internal_set_sigma(double value);
  public:

  // int32 dim = 2;
  void clear_dim();
  ::PROTOBUF_NAMESPACE_ID::int32 dim() const;
  void set_dim(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dim() const;
  void _internal_set_dim(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:FixedMultiPrecParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double sigma_;
  ::PROTOBUF_NAMESPACE_ID::int32 dim_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_params_2eproto;
};
// -------------------------------------------------------------------

class FixedUnivPrecParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FixedUnivPrecParams) */ {
 public:
  inline FixedUnivPrecParams() : FixedUnivPrecParams(nullptr) {}
  virtual ~FixedUnivPrecParams();

  FixedUnivPrecParams(const FixedUnivPrecParams& from);
  FixedUnivPrecParams(FixedUnivPrecParams&& from) noexcept
    : FixedUnivPrecParams() {
    *this = ::std::move(from);
  }

  inline FixedUnivPrecParams& operator=(const FixedUnivPrecParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline FixedUnivPrecParams& operator=(FixedUnivPrecParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FixedUnivPrecParams& default_instance();

  static inline const FixedUnivPrecParams* internal_default_instance() {
    return reinterpret_cast<const FixedUnivPrecParams*>(
               &_FixedUnivPrecParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FixedUnivPrecParams& a, FixedUnivPrecParams& b) {
    a.Swap(&b);
  }
  inline void Swap(FixedUnivPrecParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FixedUnivPrecParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FixedUnivPrecParams* New() const final {
    return CreateMaybeMessage<FixedUnivPrecParams>(nullptr);
  }

  FixedUnivPrecParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FixedUnivPrecParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FixedUnivPrecParams& from);
  void MergeFrom(const FixedUnivPrecParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FixedUnivPrecParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FixedUnivPrecParams";
  }
  protected:
  explicit FixedUnivPrecParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_params_2eproto);
    return ::descriptor_table_params_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSigmaFieldNumber = 1,
  };
  // double sigma = 1;
  void clear_sigma();
  double sigma() const;
  void set_sigma(double value);
  private:
  double _internal_sigma() const;
  void _internal_set_sigma(double value);
  public:

  // @@protoc_insertion_point(class_scope:FixedUnivPrecParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double sigma_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_params_2eproto;
};
// -------------------------------------------------------------------

class GammaParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GammaParams) */ {
 public:
  inline GammaParams() : GammaParams(nullptr) {}
  virtual ~GammaParams();

  GammaParams(const GammaParams& from);
  GammaParams(GammaParams&& from) noexcept
    : GammaParams() {
    *this = ::std::move(from);
  }

  inline GammaParams& operator=(const GammaParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline GammaParams& operator=(GammaParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GammaParams& default_instance();

  static inline const GammaParams* internal_default_instance() {
    return reinterpret_cast<const GammaParams*>(
               &_GammaParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GammaParams& a, GammaParams& b) {
    a.Swap(&b);
  }
  inline void Swap(GammaParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GammaParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GammaParams* New() const final {
    return CreateMaybeMessage<GammaParams>(nullptr);
  }

  GammaParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GammaParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GammaParams& from);
  void MergeFrom(const GammaParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GammaParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GammaParams";
  }
  protected:
  explicit GammaParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_params_2eproto);
    return ::descriptor_table_params_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlphaFieldNumber = 1,
    kBetaFieldNumber = 2,
  };
  // double alpha = 1;
  void clear_alpha();
  double alpha() const;
  void set_alpha(double value);
  private:
  double _internal_alpha() const;
  void _internal_set_alpha(double value);
  public:

  // double beta = 2;
  void clear_beta();
  double beta() const;
  void set_beta(double value);
  private:
  double _internal_beta() const;
  void _internal_set_beta(double value);
  public:

  // @@protoc_insertion_point(class_scope:GammaParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double alpha_;
  double beta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_params_2eproto;
};
// -------------------------------------------------------------------

class DPPParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DPPParams) */ {
 public:
  inline DPPParams() : DPPParams(nullptr) {}
  virtual ~DPPParams();

  DPPParams(const DPPParams& from);
  DPPParams(DPPParams&& from) noexcept
    : DPPParams() {
    *this = ::std::move(from);
  }

  inline DPPParams& operator=(const DPPParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline DPPParams& operator=(DPPParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DPPParams& default_instance();

  static inline const DPPParams* internal_default_instance() {
    return reinterpret_cast<const DPPParams*>(
               &_DPPParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DPPParams& a, DPPParams& b) {
    a.Swap(&b);
  }
  inline void Swap(DPPParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DPPParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DPPParams* New() const final {
    return CreateMaybeMessage<DPPParams>(nullptr);
  }

  DPPParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DPPParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DPPParams& from);
  void MergeFrom(const DPPParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DPPParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DPPParams";
  }
  protected:
  explicit DPPParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_params_2eproto);
    return ::descriptor_table_params_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCFieldNumber = 1,
    kSFieldNumber = 3,
    kNFieldNumber = 2,
  };
  // double c = 1;
  void clear_c();
  double c() const;
  void set_c(double value);
  private:
  double _internal_c() const;
  void _internal_set_c(double value);
  public:

  // double s = 3;
  void clear_s();
  double s() const;
  void set_s(double value);
  private:
  double _internal_s() const;
  void _internal_set_s(double value);
  public:

  // int32 n = 2;
  void clear_n();
  ::PROTOBUF_NAMESPACE_ID::int32 n() const;
  void set_n(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_n() const;
  void _internal_set_n(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DPPParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double c_;
  double s_;
  ::PROTOBUF_NAMESPACE_ID::int32 n_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_params_2eproto;
};
// -------------------------------------------------------------------

class Params PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Params) */ {
 public:
  inline Params() : Params(nullptr) {}
  virtual ~Params();

  Params(const Params& from);
  Params(Params&& from) noexcept
    : Params() {
    *this = ::std::move(from);
  }

  inline Params& operator=(const Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline Params& operator=(Params&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Params& default_instance();

  enum PrecParamsCase {
    kFixedMultiPrec = 2,
    kWishart = 3,
    kFixedUnivPrec = 4,
    kGammaPrec = 5,
    PREC_PARAMS_NOT_SET = 0,
  };

  static inline const Params* internal_default_instance() {
    return reinterpret_cast<const Params*>(
               &_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Params& a, Params& b) {
    a.Swap(&b);
  }
  inline void Swap(Params* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Params* New() const final {
    return CreateMaybeMessage<Params>(nullptr);
  }

  Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Params>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Params& from);
  void MergeFrom(const Params& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Params* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Params";
  }
  protected:
  explicit Params(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_params_2eproto);
    return ::descriptor_table_params_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDppFieldNumber = 1,
    kAFieldNumber = 7,
    kAlphajumpFieldNumber = 8,
    kBetajumpFieldNumber = 9,
    kDimfFieldNumber = 6,
    kAgammaFieldNumber = 10,
    kBgammaFieldNumber = 11,
    kPropSigmaFieldNumber = 12,
    kFixedMultiPrecFieldNumber = 2,
    kWishartFieldNumber = 3,
    kFixedUnivPrecFieldNumber = 4,
    kGammaPrecFieldNumber = 5,
  };
  // .DPPParams dpp = 1;
  bool has_dpp() const;
  private:
  bool _internal_has_dpp() const;
  public:
  void clear_dpp();
  const ::DPPParams& dpp() const;
  ::DPPParams* release_dpp();
  ::DPPParams* mutable_dpp();
  void set_allocated_dpp(::DPPParams* dpp);
  private:
  const ::DPPParams& _internal_dpp() const;
  ::DPPParams* _internal_mutable_dpp();
  public:
  void unsafe_arena_set_allocated_dpp(
      ::DPPParams* dpp);
  ::DPPParams* unsafe_arena_release_dpp();

  // double a = 7;
  void clear_a();
  double a() const;
  void set_a(double value);
  private:
  double _internal_a() const;
  void _internal_set_a(double value);
  public:

  // double alphajump = 8;
  void clear_alphajump();
  double alphajump() const;
  void set_alphajump(double value);
  private:
  double _internal_alphajump() const;
  void _internal_set_alphajump(double value);
  public:

  // double betajump = 9;
  void clear_betajump();
  double betajump() const;
  void set_betajump(double value);
  private:
  double _internal_betajump() const;
  void _internal_set_betajump(double value);
  public:

  // int32 dimf = 6;
  void clear_dimf();
  ::PROTOBUF_NAMESPACE_ID::int32 dimf() const;
  void set_dimf(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dimf() const;
  void _internal_set_dimf(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double agamma = 10;
  void clear_agamma();
  double agamma() const;
  void set_agamma(double value);
  private:
  double _internal_agamma() const;
  void _internal_set_agamma(double value);
  public:

  // double bgamma = 11;
  void clear_bgamma();
  double bgamma() const;
  void set_bgamma(double value);
  private:
  double _internal_bgamma() const;
  void _internal_set_bgamma(double value);
  public:

  // double prop_sigma = 12;
  void clear_prop_sigma();
  double prop_sigma() const;
  void set_prop_sigma(double value);
  private:
  double _internal_prop_sigma() const;
  void _internal_set_prop_sigma(double value);
  public:

  // .FixedMultiPrecParams fixed_multi_prec = 2;
  bool has_fixed_multi_prec() const;
  private:
  bool _internal_has_fixed_multi_prec() const;
  public:
  void clear_fixed_multi_prec();
  const ::FixedMultiPrecParams& fixed_multi_prec() const;
  ::FixedMultiPrecParams* release_fixed_multi_prec();
  ::FixedMultiPrecParams* mutable_fixed_multi_prec();
  void set_allocated_fixed_multi_prec(::FixedMultiPrecParams* fixed_multi_prec);
  private:
  const ::FixedMultiPrecParams& _internal_fixed_multi_prec() const;
  ::FixedMultiPrecParams* _internal_mutable_fixed_multi_prec();
  public:
  void unsafe_arena_set_allocated_fixed_multi_prec(
      ::FixedMultiPrecParams* fixed_multi_prec);
  ::FixedMultiPrecParams* unsafe_arena_release_fixed_multi_prec();

  // .WishartParams wishart = 3;
  bool has_wishart() const;
  private:
  bool _internal_has_wishart() const;
  public:
  void clear_wishart();
  const ::WishartParams& wishart() const;
  ::WishartParams* release_wishart();
  ::WishartParams* mutable_wishart();
  void set_allocated_wishart(::WishartParams* wishart);
  private:
  const ::WishartParams& _internal_wishart() const;
  ::WishartParams* _internal_mutable_wishart();
  public:
  void unsafe_arena_set_allocated_wishart(
      ::WishartParams* wishart);
  ::WishartParams* unsafe_arena_release_wishart();

  // .FixedUnivPrecParams fixed_univ_prec = 4;
  bool has_fixed_univ_prec() const;
  private:
  bool _internal_has_fixed_univ_prec() const;
  public:
  void clear_fixed_univ_prec();
  const ::FixedUnivPrecParams& fixed_univ_prec() const;
  ::FixedUnivPrecParams* release_fixed_univ_prec();
  ::FixedUnivPrecParams* mutable_fixed_univ_prec();
  void set_allocated_fixed_univ_prec(::FixedUnivPrecParams* fixed_univ_prec);
  private:
  const ::FixedUnivPrecParams& _internal_fixed_univ_prec() const;
  ::FixedUnivPrecParams* _internal_mutable_fixed_univ_prec();
  public:
  void unsafe_arena_set_allocated_fixed_univ_prec(
      ::FixedUnivPrecParams* fixed_univ_prec);
  ::FixedUnivPrecParams* unsafe_arena_release_fixed_univ_prec();

  // .GammaParams gamma_prec = 5;
  bool has_gamma_prec() const;
  private:
  bool _internal_has_gamma_prec() const;
  public:
  void clear_gamma_prec();
  const ::GammaParams& gamma_prec() const;
  ::GammaParams* release_gamma_prec();
  ::GammaParams* mutable_gamma_prec();
  void set_allocated_gamma_prec(::GammaParams* gamma_prec);
  private:
  const ::GammaParams& _internal_gamma_prec() const;
  ::GammaParams* _internal_mutable_gamma_prec();
  public:
  void unsafe_arena_set_allocated_gamma_prec(
      ::GammaParams* gamma_prec);
  ::GammaParams* unsafe_arena_release_gamma_prec();

  void clear_prec_params();
  PrecParamsCase prec_params_case() const;
  // @@protoc_insertion_point(class_scope:Params)
 private:
  class _Internal;
  void set_has_fixed_multi_prec();
  void set_has_wishart();
  void set_has_fixed_univ_prec();
  void set_has_gamma_prec();

  inline bool has_prec_params() const;
  inline void clear_has_prec_params();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::DPPParams* dpp_;
  double a_;
  double alphajump_;
  double betajump_;
  ::PROTOBUF_NAMESPACE_ID::int32 dimf_;
  double agamma_;
  double bgamma_;
  double prop_sigma_;
  union PrecParamsUnion {
    PrecParamsUnion() {}
    ::FixedMultiPrecParams* fixed_multi_prec_;
    ::WishartParams* wishart_;
    ::FixedUnivPrecParams* fixed_univ_prec_;
    ::GammaParams* gamma_prec_;
  } prec_params_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_params_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WishartParams

// double nu = 1;
inline void WishartParams::clear_nu() {
  nu_ = 0;
}
inline double WishartParams::_internal_nu() const {
  return nu_;
}
inline double WishartParams::nu() const {
  // @@protoc_insertion_point(field_get:WishartParams.nu)
  return _internal_nu();
}
inline void WishartParams::_internal_set_nu(double value) {
  
  nu_ = value;
}
inline void WishartParams::set_nu(double value) {
  _internal_set_nu(value);
  // @@protoc_insertion_point(field_set:WishartParams.nu)
}

// bool identity = 2;
inline void WishartParams::clear_identity() {
  identity_ = false;
}
inline bool WishartParams::_internal_identity() const {
  return identity_;
}
inline bool WishartParams::identity() const {
  // @@protoc_insertion_point(field_get:WishartParams.identity)
  return _internal_identity();
}
inline void WishartParams::_internal_set_identity(bool value) {
  
  identity_ = value;
}
inline void WishartParams::set_identity(bool value) {
  _internal_set_identity(value);
  // @@protoc_insertion_point(field_set:WishartParams.identity)
}

// double sigma = 3;
inline bool WishartParams::_internal_has_sigma() const {
  return sigma__case() == kSigma;
}
inline void WishartParams::set_has_sigma() {
  _oneof_case_[0] = kSigma;
}
inline void WishartParams::clear_sigma() {
  if (_internal_has_sigma()) {
    sigma__.sigma_ = 0;
    clear_has_sigma_();
  }
}
inline double WishartParams::_internal_sigma() const {
  if (_internal_has_sigma()) {
    return sigma__.sigma_;
  }
  return 0;
}
inline void WishartParams::_internal_set_sigma(double value) {
  if (!_internal_has_sigma()) {
    clear_sigma_();
    set_has_sigma();
  }
  sigma__.sigma_ = value;
}
inline double WishartParams::sigma() const {
  // @@protoc_insertion_point(field_get:WishartParams.sigma)
  return _internal_sigma();
}
inline void WishartParams::set_sigma(double value) {
  _internal_set_sigma(value);
  // @@protoc_insertion_point(field_set:WishartParams.sigma)
}

// int32 dim = 4;
inline void WishartParams::clear_dim() {
  dim_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WishartParams::_internal_dim() const {
  return dim_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WishartParams::dim() const {
  // @@protoc_insertion_point(field_get:WishartParams.dim)
  return _internal_dim();
}
inline void WishartParams::_internal_set_dim(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dim_ = value;
}
inline void WishartParams::set_dim(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dim(value);
  // @@protoc_insertion_point(field_set:WishartParams.dim)
}

inline bool WishartParams::has_sigma_() const {
  return sigma__case() != SIGMA__NOT_SET;
}
inline void WishartParams::clear_has_sigma_() {
  _oneof_case_[0] = SIGMA__NOT_SET;
}
inline WishartParams::SigmaCase WishartParams::sigma__case() const {
  return WishartParams::SigmaCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FixedMultiPrecParams

// double sigma = 1;
inline void FixedMultiPrecParams::clear_sigma() {
  sigma_ = 0;
}
inline double FixedMultiPrecParams::_internal_sigma() const {
  return sigma_;
}
inline double FixedMultiPrecParams::sigma() const {
  // @@protoc_insertion_point(field_get:FixedMultiPrecParams.sigma)
  return _internal_sigma();
}
inline void FixedMultiPrecParams::_internal_set_sigma(double value) {
  
  sigma_ = value;
}
inline void FixedMultiPrecParams::set_sigma(double value) {
  _internal_set_sigma(value);
  // @@protoc_insertion_point(field_set:FixedMultiPrecParams.sigma)
}

// int32 dim = 2;
inline void FixedMultiPrecParams::clear_dim() {
  dim_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FixedMultiPrecParams::_internal_dim() const {
  return dim_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FixedMultiPrecParams::dim() const {
  // @@protoc_insertion_point(field_get:FixedMultiPrecParams.dim)
  return _internal_dim();
}
inline void FixedMultiPrecParams::_internal_set_dim(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dim_ = value;
}
inline void FixedMultiPrecParams::set_dim(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dim(value);
  // @@protoc_insertion_point(field_set:FixedMultiPrecParams.dim)
}

// -------------------------------------------------------------------

// FixedUnivPrecParams

// double sigma = 1;
inline void FixedUnivPrecParams::clear_sigma() {
  sigma_ = 0;
}
inline double FixedUnivPrecParams::_internal_sigma() const {
  return sigma_;
}
inline double FixedUnivPrecParams::sigma() const {
  // @@protoc_insertion_point(field_get:FixedUnivPrecParams.sigma)
  return _internal_sigma();
}
inline void FixedUnivPrecParams::_internal_set_sigma(double value) {
  
  sigma_ = value;
}
inline void FixedUnivPrecParams::set_sigma(double value) {
  _internal_set_sigma(value);
  // @@protoc_insertion_point(field_set:FixedUnivPrecParams.sigma)
}

// -------------------------------------------------------------------

// GammaParams

// double alpha = 1;
inline void GammaParams::clear_alpha() {
  alpha_ = 0;
}
inline double GammaParams::_internal_alpha() const {
  return alpha_;
}
inline double GammaParams::alpha() const {
  // @@protoc_insertion_point(field_get:GammaParams.alpha)
  return _internal_alpha();
}
inline void GammaParams::_internal_set_alpha(double value) {
  
  alpha_ = value;
}
inline void GammaParams::set_alpha(double value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:GammaParams.alpha)
}

// double beta = 2;
inline void GammaParams::clear_beta() {
  beta_ = 0;
}
inline double GammaParams::_internal_beta() const {
  return beta_;
}
inline double GammaParams::beta() const {
  // @@protoc_insertion_point(field_get:GammaParams.beta)
  return _internal_beta();
}
inline void GammaParams::_internal_set_beta(double value) {
  
  beta_ = value;
}
inline void GammaParams::set_beta(double value) {
  _internal_set_beta(value);
  // @@protoc_insertion_point(field_set:GammaParams.beta)
}

// -------------------------------------------------------------------

// DPPParams

// double c = 1;
inline void DPPParams::clear_c() {
  c_ = 0;
}
inline double DPPParams::_internal_c() const {
  return c_;
}
inline double DPPParams::c() const {
  // @@protoc_insertion_point(field_get:DPPParams.c)
  return _internal_c();
}
inline void DPPParams::_internal_set_c(double value) {
  
  c_ = value;
}
inline void DPPParams::set_c(double value) {
  _internal_set_c(value);
  // @@protoc_insertion_point(field_set:DPPParams.c)
}

// int32 n = 2;
inline void DPPParams::clear_n() {
  n_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DPPParams::_internal_n() const {
  return n_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DPPParams::n() const {
  // @@protoc_insertion_point(field_get:DPPParams.n)
  return _internal_n();
}
inline void DPPParams::_internal_set_n(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  n_ = value;
}
inline void DPPParams::set_n(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_n(value);
  // @@protoc_insertion_point(field_set:DPPParams.n)
}

// double s = 3;
inline void DPPParams::clear_s() {
  s_ = 0;
}
inline double DPPParams::_internal_s() const {
  return s_;
}
inline double DPPParams::s() const {
  // @@protoc_insertion_point(field_get:DPPParams.s)
  return _internal_s();
}
inline void DPPParams::_internal_set_s(double value) {
  
  s_ = value;
}
inline void DPPParams::set_s(double value) {
  _internal_set_s(value);
  // @@protoc_insertion_point(field_set:DPPParams.s)
}

// -------------------------------------------------------------------

// Params

// .DPPParams dpp = 1;
inline bool Params::_internal_has_dpp() const {
  return this != internal_default_instance() && dpp_ != nullptr;
}
inline bool Params::has_dpp() const {
  return _internal_has_dpp();
}
inline void Params::clear_dpp() {
  if (GetArena() == nullptr && dpp_ != nullptr) {
    delete dpp_;
  }
  dpp_ = nullptr;
}
inline const ::DPPParams& Params::_internal_dpp() const {
  const ::DPPParams* p = dpp_;
  return p != nullptr ? *p : reinterpret_cast<const ::DPPParams&>(
      ::_DPPParams_default_instance_);
}
inline const ::DPPParams& Params::dpp() const {
  // @@protoc_insertion_point(field_get:Params.dpp)
  return _internal_dpp();
}
inline void Params::unsafe_arena_set_allocated_dpp(
    ::DPPParams* dpp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dpp_);
  }
  dpp_ = dpp;
  if (dpp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Params.dpp)
}
inline ::DPPParams* Params::release_dpp() {
  
  ::DPPParams* temp = dpp_;
  dpp_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DPPParams* Params::unsafe_arena_release_dpp() {
  // @@protoc_insertion_point(field_release:Params.dpp)
  
  ::DPPParams* temp = dpp_;
  dpp_ = nullptr;
  return temp;
}
inline ::DPPParams* Params::_internal_mutable_dpp() {
  
  if (dpp_ == nullptr) {
    auto* p = CreateMaybeMessage<::DPPParams>(GetArena());
    dpp_ = p;
  }
  return dpp_;
}
inline ::DPPParams* Params::mutable_dpp() {
  // @@protoc_insertion_point(field_mutable:Params.dpp)
  return _internal_mutable_dpp();
}
inline void Params::set_allocated_dpp(::DPPParams* dpp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dpp_;
  }
  if (dpp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dpp);
    if (message_arena != submessage_arena) {
      dpp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dpp, submessage_arena);
    }
    
  } else {
    
  }
  dpp_ = dpp;
  // @@protoc_insertion_point(field_set_allocated:Params.dpp)
}

// .FixedMultiPrecParams fixed_multi_prec = 2;
inline bool Params::_internal_has_fixed_multi_prec() const {
  return prec_params_case() == kFixedMultiPrec;
}
inline bool Params::has_fixed_multi_prec() const {
  return _internal_has_fixed_multi_prec();
}
inline void Params::set_has_fixed_multi_prec() {
  _oneof_case_[0] = kFixedMultiPrec;
}
inline void Params::clear_fixed_multi_prec() {
  if (_internal_has_fixed_multi_prec()) {
    if (GetArena() == nullptr) {
      delete prec_params_.fixed_multi_prec_;
    }
    clear_has_prec_params();
  }
}
inline ::FixedMultiPrecParams* Params::release_fixed_multi_prec() {
  // @@protoc_insertion_point(field_release:Params.fixed_multi_prec)
  if (_internal_has_fixed_multi_prec()) {
    clear_has_prec_params();
      ::FixedMultiPrecParams* temp = prec_params_.fixed_multi_prec_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    prec_params_.fixed_multi_prec_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::FixedMultiPrecParams& Params::_internal_fixed_multi_prec() const {
  return _internal_has_fixed_multi_prec()
      ? *prec_params_.fixed_multi_prec_
      : reinterpret_cast< ::FixedMultiPrecParams&>(::_FixedMultiPrecParams_default_instance_);
}
inline const ::FixedMultiPrecParams& Params::fixed_multi_prec() const {
  // @@protoc_insertion_point(field_get:Params.fixed_multi_prec)
  return _internal_fixed_multi_prec();
}
inline ::FixedMultiPrecParams* Params::unsafe_arena_release_fixed_multi_prec() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Params.fixed_multi_prec)
  if (_internal_has_fixed_multi_prec()) {
    clear_has_prec_params();
    ::FixedMultiPrecParams* temp = prec_params_.fixed_multi_prec_;
    prec_params_.fixed_multi_prec_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Params::unsafe_arena_set_allocated_fixed_multi_prec(::FixedMultiPrecParams* fixed_multi_prec) {
  clear_prec_params();
  if (fixed_multi_prec) {
    set_has_fixed_multi_prec();
    prec_params_.fixed_multi_prec_ = fixed_multi_prec;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Params.fixed_multi_prec)
}
inline ::FixedMultiPrecParams* Params::_internal_mutable_fixed_multi_prec() {
  if (!_internal_has_fixed_multi_prec()) {
    clear_prec_params();
    set_has_fixed_multi_prec();
    prec_params_.fixed_multi_prec_ = CreateMaybeMessage< ::FixedMultiPrecParams >(GetArena());
  }
  return prec_params_.fixed_multi_prec_;
}
inline ::FixedMultiPrecParams* Params::mutable_fixed_multi_prec() {
  // @@protoc_insertion_point(field_mutable:Params.fixed_multi_prec)
  return _internal_mutable_fixed_multi_prec();
}

// .WishartParams wishart = 3;
inline bool Params::_internal_has_wishart() const {
  return prec_params_case() == kWishart;
}
inline bool Params::has_wishart() const {
  return _internal_has_wishart();
}
inline void Params::set_has_wishart() {
  _oneof_case_[0] = kWishart;
}
inline void Params::clear_wishart() {
  if (_internal_has_wishart()) {
    if (GetArena() == nullptr) {
      delete prec_params_.wishart_;
    }
    clear_has_prec_params();
  }
}
inline ::WishartParams* Params::release_wishart() {
  // @@protoc_insertion_point(field_release:Params.wishart)
  if (_internal_has_wishart()) {
    clear_has_prec_params();
      ::WishartParams* temp = prec_params_.wishart_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    prec_params_.wishart_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::WishartParams& Params::_internal_wishart() const {
  return _internal_has_wishart()
      ? *prec_params_.wishart_
      : reinterpret_cast< ::WishartParams&>(::_WishartParams_default_instance_);
}
inline const ::WishartParams& Params::wishart() const {
  // @@protoc_insertion_point(field_get:Params.wishart)
  return _internal_wishart();
}
inline ::WishartParams* Params::unsafe_arena_release_wishart() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Params.wishart)
  if (_internal_has_wishart()) {
    clear_has_prec_params();
    ::WishartParams* temp = prec_params_.wishart_;
    prec_params_.wishart_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Params::unsafe_arena_set_allocated_wishart(::WishartParams* wishart) {
  clear_prec_params();
  if (wishart) {
    set_has_wishart();
    prec_params_.wishart_ = wishart;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Params.wishart)
}
inline ::WishartParams* Params::_internal_mutable_wishart() {
  if (!_internal_has_wishart()) {
    clear_prec_params();
    set_has_wishart();
    prec_params_.wishart_ = CreateMaybeMessage< ::WishartParams >(GetArena());
  }
  return prec_params_.wishart_;
}
inline ::WishartParams* Params::mutable_wishart() {
  // @@protoc_insertion_point(field_mutable:Params.wishart)
  return _internal_mutable_wishart();
}

// .FixedUnivPrecParams fixed_univ_prec = 4;
inline bool Params::_internal_has_fixed_univ_prec() const {
  return prec_params_case() == kFixedUnivPrec;
}
inline bool Params::has_fixed_univ_prec() const {
  return _internal_has_fixed_univ_prec();
}
inline void Params::set_has_fixed_univ_prec() {
  _oneof_case_[0] = kFixedUnivPrec;
}
inline void Params::clear_fixed_univ_prec() {
  if (_internal_has_fixed_univ_prec()) {
    if (GetArena() == nullptr) {
      delete prec_params_.fixed_univ_prec_;
    }
    clear_has_prec_params();
  }
}
inline ::FixedUnivPrecParams* Params::release_fixed_univ_prec() {
  // @@protoc_insertion_point(field_release:Params.fixed_univ_prec)
  if (_internal_has_fixed_univ_prec()) {
    clear_has_prec_params();
      ::FixedUnivPrecParams* temp = prec_params_.fixed_univ_prec_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    prec_params_.fixed_univ_prec_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::FixedUnivPrecParams& Params::_internal_fixed_univ_prec() const {
  return _internal_has_fixed_univ_prec()
      ? *prec_params_.fixed_univ_prec_
      : reinterpret_cast< ::FixedUnivPrecParams&>(::_FixedUnivPrecParams_default_instance_);
}
inline const ::FixedUnivPrecParams& Params::fixed_univ_prec() const {
  // @@protoc_insertion_point(field_get:Params.fixed_univ_prec)
  return _internal_fixed_univ_prec();
}
inline ::FixedUnivPrecParams* Params::unsafe_arena_release_fixed_univ_prec() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Params.fixed_univ_prec)
  if (_internal_has_fixed_univ_prec()) {
    clear_has_prec_params();
    ::FixedUnivPrecParams* temp = prec_params_.fixed_univ_prec_;
    prec_params_.fixed_univ_prec_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Params::unsafe_arena_set_allocated_fixed_univ_prec(::FixedUnivPrecParams* fixed_univ_prec) {
  clear_prec_params();
  if (fixed_univ_prec) {
    set_has_fixed_univ_prec();
    prec_params_.fixed_univ_prec_ = fixed_univ_prec;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Params.fixed_univ_prec)
}
inline ::FixedUnivPrecParams* Params::_internal_mutable_fixed_univ_prec() {
  if (!_internal_has_fixed_univ_prec()) {
    clear_prec_params();
    set_has_fixed_univ_prec();
    prec_params_.fixed_univ_prec_ = CreateMaybeMessage< ::FixedUnivPrecParams >(GetArena());
  }
  return prec_params_.fixed_univ_prec_;
}
inline ::FixedUnivPrecParams* Params::mutable_fixed_univ_prec() {
  // @@protoc_insertion_point(field_mutable:Params.fixed_univ_prec)
  return _internal_mutable_fixed_univ_prec();
}

// .GammaParams gamma_prec = 5;
inline bool Params::_internal_has_gamma_prec() const {
  return prec_params_case() == kGammaPrec;
}
inline bool Params::has_gamma_prec() const {
  return _internal_has_gamma_prec();
}
inline void Params::set_has_gamma_prec() {
  _oneof_case_[0] = kGammaPrec;
}
inline void Params::clear_gamma_prec() {
  if (_internal_has_gamma_prec()) {
    if (GetArena() == nullptr) {
      delete prec_params_.gamma_prec_;
    }
    clear_has_prec_params();
  }
}
inline ::GammaParams* Params::release_gamma_prec() {
  // @@protoc_insertion_point(field_release:Params.gamma_prec)
  if (_internal_has_gamma_prec()) {
    clear_has_prec_params();
      ::GammaParams* temp = prec_params_.gamma_prec_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    prec_params_.gamma_prec_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GammaParams& Params::_internal_gamma_prec() const {
  return _internal_has_gamma_prec()
      ? *prec_params_.gamma_prec_
      : reinterpret_cast< ::GammaParams&>(::_GammaParams_default_instance_);
}
inline const ::GammaParams& Params::gamma_prec() const {
  // @@protoc_insertion_point(field_get:Params.gamma_prec)
  return _internal_gamma_prec();
}
inline ::GammaParams* Params::unsafe_arena_release_gamma_prec() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Params.gamma_prec)
  if (_internal_has_gamma_prec()) {
    clear_has_prec_params();
    ::GammaParams* temp = prec_params_.gamma_prec_;
    prec_params_.gamma_prec_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Params::unsafe_arena_set_allocated_gamma_prec(::GammaParams* gamma_prec) {
  clear_prec_params();
  if (gamma_prec) {
    set_has_gamma_prec();
    prec_params_.gamma_prec_ = gamma_prec;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Params.gamma_prec)
}
inline ::GammaParams* Params::_internal_mutable_gamma_prec() {
  if (!_internal_has_gamma_prec()) {
    clear_prec_params();
    set_has_gamma_prec();
    prec_params_.gamma_prec_ = CreateMaybeMessage< ::GammaParams >(GetArena());
  }
  return prec_params_.gamma_prec_;
}
inline ::GammaParams* Params::mutable_gamma_prec() {
  // @@protoc_insertion_point(field_mutable:Params.gamma_prec)
  return _internal_mutable_gamma_prec();
}

// int32 dimf = 6;
inline void Params::clear_dimf() {
  dimf_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Params::_internal_dimf() const {
  return dimf_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Params::dimf() const {
  // @@protoc_insertion_point(field_get:Params.dimf)
  return _internal_dimf();
}
inline void Params::_internal_set_dimf(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dimf_ = value;
}
inline void Params::set_dimf(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dimf(value);
  // @@protoc_insertion_point(field_set:Params.dimf)
}

// double a = 7;
inline void Params::clear_a() {
  a_ = 0;
}
inline double Params::_internal_a() const {
  return a_;
}
inline double Params::a() const {
  // @@protoc_insertion_point(field_get:Params.a)
  return _internal_a();
}
inline void Params::_internal_set_a(double value) {
  
  a_ = value;
}
inline void Params::set_a(double value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:Params.a)
}

// double alphajump = 8;
inline void Params::clear_alphajump() {
  alphajump_ = 0;
}
inline double Params::_internal_alphajump() const {
  return alphajump_;
}
inline double Params::alphajump() const {
  // @@protoc_insertion_point(field_get:Params.alphajump)
  return _internal_alphajump();
}
inline void Params::_internal_set_alphajump(double value) {
  
  alphajump_ = value;
}
inline void Params::set_alphajump(double value) {
  _internal_set_alphajump(value);
  // @@protoc_insertion_point(field_set:Params.alphajump)
}

// double betajump = 9;
inline void Params::clear_betajump() {
  betajump_ = 0;
}
inline double Params::_internal_betajump() const {
  return betajump_;
}
inline double Params::betajump() const {
  // @@protoc_insertion_point(field_get:Params.betajump)
  return _internal_betajump();
}
inline void Params::_internal_set_betajump(double value) {
  
  betajump_ = value;
}
inline void Params::set_betajump(double value) {
  _internal_set_betajump(value);
  // @@protoc_insertion_point(field_set:Params.betajump)
}

// double agamma = 10;
inline void Params::clear_agamma() {
  agamma_ = 0;
}
inline double Params::_internal_agamma() const {
  return agamma_;
}
inline double Params::agamma() const {
  // @@protoc_insertion_point(field_get:Params.agamma)
  return _internal_agamma();
}
inline void Params::_internal_set_agamma(double value) {
  
  agamma_ = value;
}
inline void Params::set_agamma(double value) {
  _internal_set_agamma(value);
  // @@protoc_insertion_point(field_set:Params.agamma)
}

// double bgamma = 11;
inline void Params::clear_bgamma() {
  bgamma_ = 0;
}
inline double Params::_internal_bgamma() const {
  return bgamma_;
}
inline double Params::bgamma() const {
  // @@protoc_insertion_point(field_get:Params.bgamma)
  return _internal_bgamma();
}
inline void Params::_internal_set_bgamma(double value) {
  
  bgamma_ = value;
}
inline void Params::set_bgamma(double value) {
  _internal_set_bgamma(value);
  // @@protoc_insertion_point(field_set:Params.bgamma)
}

// double prop_sigma = 12;
inline void Params::clear_prop_sigma() {
  prop_sigma_ = 0;
}
inline double Params::_internal_prop_sigma() const {
  return prop_sigma_;
}
inline double Params::prop_sigma() const {
  // @@protoc_insertion_point(field_get:Params.prop_sigma)
  return _internal_prop_sigma();
}
inline void Params::_internal_set_prop_sigma(double value) {
  
  prop_sigma_ = value;
}
inline void Params::set_prop_sigma(double value) {
  _internal_set_prop_sigma(value);
  // @@protoc_insertion_point(field_set:Params.prop_sigma)
}

inline bool Params::has_prec_params() const {
  return prec_params_case() != PREC_PARAMS_NOT_SET;
}
inline void Params::clear_has_prec_params() {
  _oneof_case_[0] = PREC_PARAMS_NOT_SET;
}
inline Params::PrecParamsCase Params::prec_params_case() const {
  return Params::PrecParamsCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_params_2eproto
