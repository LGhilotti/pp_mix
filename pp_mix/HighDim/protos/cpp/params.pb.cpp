// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: params.proto

#include "params.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_params_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DPPParams_params_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_params_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FixedMultiPrecParams_params_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_params_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FixedUnivPrecParams_params_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_params_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GammaParams_params_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_params_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WishartParams_params_2eproto;
class WishartParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WishartParams> _instance;
} _WishartParams_default_instance_;
class FixedMultiPrecParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FixedMultiPrecParams> _instance;
} _FixedMultiPrecParams_default_instance_;
class FixedUnivPrecParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FixedUnivPrecParams> _instance;
} _FixedUnivPrecParams_default_instance_;
class GammaParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GammaParams> _instance;
} _GammaParams_default_instance_;
class DPPParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DPPParams> _instance;
} _DPPParams_default_instance_;
class ParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Params> _instance;
} _Params_default_instance_;
static void InitDefaultsscc_info_DPPParams_params_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DPPParams_default_instance_;
    new (ptr) ::DPPParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DPPParams_params_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DPPParams_params_2eproto}, {}};

static void InitDefaultsscc_info_FixedMultiPrecParams_params_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FixedMultiPrecParams_default_instance_;
    new (ptr) ::FixedMultiPrecParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FixedMultiPrecParams_params_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FixedMultiPrecParams_params_2eproto}, {}};

static void InitDefaultsscc_info_FixedUnivPrecParams_params_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FixedUnivPrecParams_default_instance_;
    new (ptr) ::FixedUnivPrecParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FixedUnivPrecParams_params_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FixedUnivPrecParams_params_2eproto}, {}};

static void InitDefaultsscc_info_GammaParams_params_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GammaParams_default_instance_;
    new (ptr) ::GammaParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GammaParams_params_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GammaParams_params_2eproto}, {}};

static void InitDefaultsscc_info_Params_params_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Params_default_instance_;
    new (ptr) ::Params();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Params_params_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_Params_params_2eproto}, {
      &scc_info_DPPParams_params_2eproto.base,
      &scc_info_FixedMultiPrecParams_params_2eproto.base,
      &scc_info_WishartParams_params_2eproto.base,
      &scc_info_FixedUnivPrecParams_params_2eproto.base,
      &scc_info_GammaParams_params_2eproto.base,}};

static void InitDefaultsscc_info_WishartParams_params_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_WishartParams_default_instance_;
    new (ptr) ::WishartParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WishartParams_params_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WishartParams_params_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_params_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_params_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_params_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_params_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WishartParams, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::WishartParams, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::WishartParams, nu_),
  PROTOBUF_FIELD_OFFSET(::WishartParams, identity_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::WishartParams, dim_),
  PROTOBUF_FIELD_OFFSET(::WishartParams, sigma__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FixedMultiPrecParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FixedMultiPrecParams, sigma_),
  PROTOBUF_FIELD_OFFSET(::FixedMultiPrecParams, dim_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FixedUnivPrecParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FixedUnivPrecParams, sigma_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GammaParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GammaParams, alpha_),
  PROTOBUF_FIELD_OFFSET(::GammaParams, beta_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DPPParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DPPParams, c_),
  PROTOBUF_FIELD_OFFSET(::DPPParams, n_),
  PROTOBUF_FIELD_OFFSET(::DPPParams, s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Params, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Params, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Params, dpp_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Params, dimf_),
  PROTOBUF_FIELD_OFFSET(::Params, a_),
  PROTOBUF_FIELD_OFFSET(::Params, alphajump_),
  PROTOBUF_FIELD_OFFSET(::Params, betajump_),
  PROTOBUF_FIELD_OFFSET(::Params, agamma_),
  PROTOBUF_FIELD_OFFSET(::Params, bgamma_),
  PROTOBUF_FIELD_OFFSET(::Params, prop_sigma_),
  PROTOBUF_FIELD_OFFSET(::Params, prec_params_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::WishartParams)},
  { 10, -1, sizeof(::FixedMultiPrecParams)},
  { 17, -1, sizeof(::FixedUnivPrecParams)},
  { 23, -1, sizeof(::GammaParams)},
  { 30, -1, sizeof(::DPPParams)},
  { 38, -1, sizeof(::Params)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_WishartParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FixedMultiPrecParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FixedUnivPrecParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GammaParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DPPParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Params_default_instance_),
};

const char descriptor_table_protodef_params_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014params.proto\"U\n\rWishartParams\022\n\n\002nu\030\001 "
  "\001(\001\022\020\n\010identity\030\002 \001(\010\022\017\n\005sigma\030\003 \001(\001H\000\022\013"
  "\n\003dim\030\004 \001(\005B\010\n\006sigma_\"2\n\024FixedMultiPrecP"
  "arams\022\r\n\005sigma\030\001 \001(\001\022\013\n\003dim\030\002 \001(\005\"$\n\023Fix"
  "edUnivPrecParams\022\r\n\005sigma\030\001 \001(\001\"*\n\013Gamma"
  "Params\022\r\n\005alpha\030\001 \001(\001\022\014\n\004beta\030\002 \001(\001\",\n\tD"
  "PPParams\022\t\n\001c\030\001 \001(\001\022\t\n\001n\030\002 \001(\005\022\t\n\001s\030\003 \001("
  "\001\"\315\002\n\006Params\022\027\n\003dpp\030\001 \001(\0132\n.DPPParams\0221\n"
  "\020fixed_multi_prec\030\002 \001(\0132\025.FixedMultiPrec"
  "ParamsH\000\022!\n\007wishart\030\003 \001(\0132\016.WishartParam"
  "sH\000\022/\n\017fixed_univ_prec\030\004 \001(\0132\024.FixedUniv"
  "PrecParamsH\000\022\"\n\ngamma_prec\030\005 \001(\0132\014.Gamma"
  "ParamsH\000\022\014\n\004dimf\030\006 \001(\005\022\t\n\001a\030\007 \001(\001\022\021\n\talp"
  "hajump\030\010 \001(\001\022\020\n\010betajump\030\t \001(\001\022\016\n\006agamma"
  "\030\n \001(\001\022\016\n\006bgamma\030\013 \001(\001\022\022\n\nprop_sigma\030\014 \001"
  "(\001B\r\n\013prec_paramsb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_params_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_params_2eproto_sccs[6] = {
  &scc_info_DPPParams_params_2eproto.base,
  &scc_info_FixedMultiPrecParams_params_2eproto.base,
  &scc_info_FixedUnivPrecParams_params_2eproto.base,
  &scc_info_GammaParams_params_2eproto.base,
  &scc_info_Params_params_2eproto.base,
  &scc_info_WishartParams_params_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_params_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_params_2eproto = {
  false, false, descriptor_table_protodef_params_2eproto, "params.proto", 625,
  &descriptor_table_params_2eproto_once, descriptor_table_params_2eproto_sccs, descriptor_table_params_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_params_2eproto::offsets,
  file_level_metadata_params_2eproto, 6, file_level_enum_descriptors_params_2eproto, file_level_service_descriptors_params_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_params_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_params_2eproto)), true);

// ===================================================================

class WishartParams::_Internal {
 public:
};

WishartParams::WishartParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:WishartParams)
}
WishartParams::WishartParams(const WishartParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&nu_, &from.nu_,
    static_cast<size_t>(reinterpret_cast<char*>(&dim_) -
    reinterpret_cast<char*>(&nu_)) + sizeof(dim_));
  clear_has_sigma_();
  switch (from.sigma__case()) {
    case kSigma: {
      _internal_set_sigma(from._internal_sigma());
      break;
    }
    case SIGMA__NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:WishartParams)
}

void WishartParams::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&nu_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&dim_) -
      reinterpret_cast<char*>(&nu_)) + sizeof(dim_));
  clear_has_sigma_();
}

WishartParams::~WishartParams() {
  // @@protoc_insertion_point(destructor:WishartParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WishartParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_sigma_()) {
    clear_sigma_();
  }
}

void WishartParams::ArenaDtor(void* object) {
  WishartParams* _this = reinterpret_cast< WishartParams* >(object);
  (void)_this;
}
void WishartParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WishartParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WishartParams& WishartParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WishartParams_params_2eproto.base);
  return *internal_default_instance();
}


void WishartParams::clear_sigma_() {
// @@protoc_insertion_point(one_of_clear_start:WishartParams)
  switch (sigma__case()) {
    case kSigma: {
      // No need to clear
      break;
    }
    case SIGMA__NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SIGMA__NOT_SET;
}


void WishartParams::Clear() {
// @@protoc_insertion_point(message_clear_start:WishartParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&nu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dim_) -
      reinterpret_cast<char*>(&nu_)) + sizeof(dim_));
  clear_sigma_();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WishartParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double nu = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool identity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          identity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double sigma = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _internal_set_sigma(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 dim = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WishartParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WishartParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double nu = 1;
  if (!(this->nu() <= 0 && this->nu() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_nu(), target);
  }

  // bool identity = 2;
  if (this->identity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_identity(), target);
  }

  // double sigma = 3;
  if (_internal_has_sigma()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_sigma(), target);
  }

  // int32 dim = 4;
  if (this->dim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_dim(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WishartParams)
  return target;
}

size_t WishartParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WishartParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double nu = 1;
  if (!(this->nu() <= 0 && this->nu() >= 0)) {
    total_size += 1 + 8;
  }

  // bool identity = 2;
  if (this->identity() != 0) {
    total_size += 1 + 1;
  }

  // int32 dim = 4;
  if (this->dim() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dim());
  }

  switch (sigma__case()) {
    // double sigma = 3;
    case kSigma: {
      total_size += 1 + 8;
      break;
    }
    case SIGMA__NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WishartParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WishartParams)
  GOOGLE_DCHECK_NE(&from, this);
  const WishartParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WishartParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WishartParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WishartParams)
    MergeFrom(*source);
  }
}

void WishartParams::MergeFrom(const WishartParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WishartParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.nu() <= 0 && from.nu() >= 0)) {
    _internal_set_nu(from._internal_nu());
  }
  if (from.identity() != 0) {
    _internal_set_identity(from._internal_identity());
  }
  if (from.dim() != 0) {
    _internal_set_dim(from._internal_dim());
  }
  switch (from.sigma__case()) {
    case kSigma: {
      _internal_set_sigma(from._internal_sigma());
      break;
    }
    case SIGMA__NOT_SET: {
      break;
    }
  }
}

void WishartParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WishartParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WishartParams::CopyFrom(const WishartParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WishartParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WishartParams::IsInitialized() const {
  return true;
}

void WishartParams::InternalSwap(WishartParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WishartParams, dim_)
      + sizeof(WishartParams::dim_)
      - PROTOBUF_FIELD_OFFSET(WishartParams, nu_)>(
          reinterpret_cast<char*>(&nu_),
          reinterpret_cast<char*>(&other->nu_));
  swap(sigma__, other->sigma__);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata WishartParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FixedMultiPrecParams::_Internal {
 public:
};

FixedMultiPrecParams::FixedMultiPrecParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FixedMultiPrecParams)
}
FixedMultiPrecParams::FixedMultiPrecParams(const FixedMultiPrecParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sigma_, &from.sigma_,
    static_cast<size_t>(reinterpret_cast<char*>(&dim_) -
    reinterpret_cast<char*>(&sigma_)) + sizeof(dim_));
  // @@protoc_insertion_point(copy_constructor:FixedMultiPrecParams)
}

void FixedMultiPrecParams::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&sigma_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&dim_) -
      reinterpret_cast<char*>(&sigma_)) + sizeof(dim_));
}

FixedMultiPrecParams::~FixedMultiPrecParams() {
  // @@protoc_insertion_point(destructor:FixedMultiPrecParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FixedMultiPrecParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FixedMultiPrecParams::ArenaDtor(void* object) {
  FixedMultiPrecParams* _this = reinterpret_cast< FixedMultiPrecParams* >(object);
  (void)_this;
}
void FixedMultiPrecParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FixedMultiPrecParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FixedMultiPrecParams& FixedMultiPrecParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FixedMultiPrecParams_params_2eproto.base);
  return *internal_default_instance();
}


void FixedMultiPrecParams::Clear() {
// @@protoc_insertion_point(message_clear_start:FixedMultiPrecParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sigma_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dim_) -
      reinterpret_cast<char*>(&sigma_)) + sizeof(dim_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FixedMultiPrecParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double sigma = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          sigma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 dim = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FixedMultiPrecParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FixedMultiPrecParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double sigma = 1;
  if (!(this->sigma() <= 0 && this->sigma() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_sigma(), target);
  }

  // int32 dim = 2;
  if (this->dim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_dim(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FixedMultiPrecParams)
  return target;
}

size_t FixedMultiPrecParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FixedMultiPrecParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double sigma = 1;
  if (!(this->sigma() <= 0 && this->sigma() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 dim = 2;
  if (this->dim() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dim());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FixedMultiPrecParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FixedMultiPrecParams)
  GOOGLE_DCHECK_NE(&from, this);
  const FixedMultiPrecParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FixedMultiPrecParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FixedMultiPrecParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FixedMultiPrecParams)
    MergeFrom(*source);
  }
}

void FixedMultiPrecParams::MergeFrom(const FixedMultiPrecParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FixedMultiPrecParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.sigma() <= 0 && from.sigma() >= 0)) {
    _internal_set_sigma(from._internal_sigma());
  }
  if (from.dim() != 0) {
    _internal_set_dim(from._internal_dim());
  }
}

void FixedMultiPrecParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FixedMultiPrecParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixedMultiPrecParams::CopyFrom(const FixedMultiPrecParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FixedMultiPrecParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixedMultiPrecParams::IsInitialized() const {
  return true;
}

void FixedMultiPrecParams::InternalSwap(FixedMultiPrecParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FixedMultiPrecParams, dim_)
      + sizeof(FixedMultiPrecParams::dim_)
      - PROTOBUF_FIELD_OFFSET(FixedMultiPrecParams, sigma_)>(
          reinterpret_cast<char*>(&sigma_),
          reinterpret_cast<char*>(&other->sigma_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FixedMultiPrecParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FixedUnivPrecParams::_Internal {
 public:
};

FixedUnivPrecParams::FixedUnivPrecParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FixedUnivPrecParams)
}
FixedUnivPrecParams::FixedUnivPrecParams(const FixedUnivPrecParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sigma_ = from.sigma_;
  // @@protoc_insertion_point(copy_constructor:FixedUnivPrecParams)
}

void FixedUnivPrecParams::SharedCtor() {
  sigma_ = 0;
}

FixedUnivPrecParams::~FixedUnivPrecParams() {
  // @@protoc_insertion_point(destructor:FixedUnivPrecParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FixedUnivPrecParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FixedUnivPrecParams::ArenaDtor(void* object) {
  FixedUnivPrecParams* _this = reinterpret_cast< FixedUnivPrecParams* >(object);
  (void)_this;
}
void FixedUnivPrecParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FixedUnivPrecParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FixedUnivPrecParams& FixedUnivPrecParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FixedUnivPrecParams_params_2eproto.base);
  return *internal_default_instance();
}


void FixedUnivPrecParams::Clear() {
// @@protoc_insertion_point(message_clear_start:FixedUnivPrecParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sigma_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FixedUnivPrecParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double sigma = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          sigma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FixedUnivPrecParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FixedUnivPrecParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double sigma = 1;
  if (!(this->sigma() <= 0 && this->sigma() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_sigma(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FixedUnivPrecParams)
  return target;
}

size_t FixedUnivPrecParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FixedUnivPrecParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double sigma = 1;
  if (!(this->sigma() <= 0 && this->sigma() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FixedUnivPrecParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FixedUnivPrecParams)
  GOOGLE_DCHECK_NE(&from, this);
  const FixedUnivPrecParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FixedUnivPrecParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FixedUnivPrecParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FixedUnivPrecParams)
    MergeFrom(*source);
  }
}

void FixedUnivPrecParams::MergeFrom(const FixedUnivPrecParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FixedUnivPrecParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.sigma() <= 0 && from.sigma() >= 0)) {
    _internal_set_sigma(from._internal_sigma());
  }
}

void FixedUnivPrecParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FixedUnivPrecParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixedUnivPrecParams::CopyFrom(const FixedUnivPrecParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FixedUnivPrecParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixedUnivPrecParams::IsInitialized() const {
  return true;
}

void FixedUnivPrecParams::InternalSwap(FixedUnivPrecParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(sigma_, other->sigma_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FixedUnivPrecParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GammaParams::_Internal {
 public:
};

GammaParams::GammaParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GammaParams)
}
GammaParams::GammaParams(const GammaParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&alpha_, &from.alpha_,
    static_cast<size_t>(reinterpret_cast<char*>(&beta_) -
    reinterpret_cast<char*>(&alpha_)) + sizeof(beta_));
  // @@protoc_insertion_point(copy_constructor:GammaParams)
}

void GammaParams::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&alpha_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&beta_) -
      reinterpret_cast<char*>(&alpha_)) + sizeof(beta_));
}

GammaParams::~GammaParams() {
  // @@protoc_insertion_point(destructor:GammaParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GammaParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GammaParams::ArenaDtor(void* object) {
  GammaParams* _this = reinterpret_cast< GammaParams* >(object);
  (void)_this;
}
void GammaParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GammaParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GammaParams& GammaParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GammaParams_params_2eproto.base);
  return *internal_default_instance();
}


void GammaParams::Clear() {
// @@protoc_insertion_point(message_clear_start:GammaParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&alpha_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&beta_) -
      reinterpret_cast<char*>(&alpha_)) + sizeof(beta_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GammaParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double alpha = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double beta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          beta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GammaParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GammaParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double alpha = 1;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_alpha(), target);
  }

  // double beta = 2;
  if (!(this->beta() <= 0 && this->beta() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_beta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GammaParams)
  return target;
}

size_t GammaParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GammaParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double alpha = 1;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    total_size += 1 + 8;
  }

  // double beta = 2;
  if (!(this->beta() <= 0 && this->beta() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GammaParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GammaParams)
  GOOGLE_DCHECK_NE(&from, this);
  const GammaParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GammaParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GammaParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GammaParams)
    MergeFrom(*source);
  }
}

void GammaParams::MergeFrom(const GammaParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GammaParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.alpha() <= 0 && from.alpha() >= 0)) {
    _internal_set_alpha(from._internal_alpha());
  }
  if (!(from.beta() <= 0 && from.beta() >= 0)) {
    _internal_set_beta(from._internal_beta());
  }
}

void GammaParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GammaParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GammaParams::CopyFrom(const GammaParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GammaParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GammaParams::IsInitialized() const {
  return true;
}

void GammaParams::InternalSwap(GammaParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GammaParams, beta_)
      + sizeof(GammaParams::beta_)
      - PROTOBUF_FIELD_OFFSET(GammaParams, alpha_)>(
          reinterpret_cast<char*>(&alpha_),
          reinterpret_cast<char*>(&other->alpha_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GammaParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DPPParams::_Internal {
 public:
};

DPPParams::DPPParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DPPParams)
}
DPPParams::DPPParams(const DPPParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&c_, &from.c_,
    static_cast<size_t>(reinterpret_cast<char*>(&n_) -
    reinterpret_cast<char*>(&c_)) + sizeof(n_));
  // @@protoc_insertion_point(copy_constructor:DPPParams)
}

void DPPParams::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&c_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&n_) -
      reinterpret_cast<char*>(&c_)) + sizeof(n_));
}

DPPParams::~DPPParams() {
  // @@protoc_insertion_point(destructor:DPPParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DPPParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DPPParams::ArenaDtor(void* object) {
  DPPParams* _this = reinterpret_cast< DPPParams* >(object);
  (void)_this;
}
void DPPParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DPPParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DPPParams& DPPParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DPPParams_params_2eproto.base);
  return *internal_default_instance();
}


void DPPParams::Clear() {
// @@protoc_insertion_point(message_clear_start:DPPParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&c_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&n_) -
      reinterpret_cast<char*>(&c_)) + sizeof(n_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DPPParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double c = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          c_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 n = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          n_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DPPParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DPPParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double c = 1;
  if (!(this->c() <= 0 && this->c() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_c(), target);
  }

  // int32 n = 2;
  if (this->n() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_n(), target);
  }

  // double s = 3;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DPPParams)
  return target;
}

size_t DPPParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DPPParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double c = 1;
  if (!(this->c() <= 0 && this->c() >= 0)) {
    total_size += 1 + 8;
  }

  // double s = 3;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 n = 2;
  if (this->n() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_n());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DPPParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DPPParams)
  GOOGLE_DCHECK_NE(&from, this);
  const DPPParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DPPParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DPPParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DPPParams)
    MergeFrom(*source);
  }
}

void DPPParams::MergeFrom(const DPPParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DPPParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.c() <= 0 && from.c() >= 0)) {
    _internal_set_c(from._internal_c());
  }
  if (!(from.s() <= 0 && from.s() >= 0)) {
    _internal_set_s(from._internal_s());
  }
  if (from.n() != 0) {
    _internal_set_n(from._internal_n());
  }
}

void DPPParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DPPParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DPPParams::CopyFrom(const DPPParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DPPParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DPPParams::IsInitialized() const {
  return true;
}

void DPPParams::InternalSwap(DPPParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DPPParams, n_)
      + sizeof(DPPParams::n_)
      - PROTOBUF_FIELD_OFFSET(DPPParams, c_)>(
          reinterpret_cast<char*>(&c_),
          reinterpret_cast<char*>(&other->c_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DPPParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Params::_Internal {
 public:
  static const ::DPPParams& dpp(const Params* msg);
  static const ::FixedMultiPrecParams& fixed_multi_prec(const Params* msg);
  static const ::WishartParams& wishart(const Params* msg);
  static const ::FixedUnivPrecParams& fixed_univ_prec(const Params* msg);
  static const ::GammaParams& gamma_prec(const Params* msg);
};

const ::DPPParams&
Params::_Internal::dpp(const Params* msg) {
  return *msg->dpp_;
}
const ::FixedMultiPrecParams&
Params::_Internal::fixed_multi_prec(const Params* msg) {
  return *msg->prec_params_.fixed_multi_prec_;
}
const ::WishartParams&
Params::_Internal::wishart(const Params* msg) {
  return *msg->prec_params_.wishart_;
}
const ::FixedUnivPrecParams&
Params::_Internal::fixed_univ_prec(const Params* msg) {
  return *msg->prec_params_.fixed_univ_prec_;
}
const ::GammaParams&
Params::_Internal::gamma_prec(const Params* msg) {
  return *msg->prec_params_.gamma_prec_;
}
void Params::set_allocated_fixed_multi_prec(::FixedMultiPrecParams* fixed_multi_prec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_prec_params();
  if (fixed_multi_prec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fixed_multi_prec);
    if (message_arena != submessage_arena) {
      fixed_multi_prec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fixed_multi_prec, submessage_arena);
    }
    set_has_fixed_multi_prec();
    prec_params_.fixed_multi_prec_ = fixed_multi_prec;
  }
  // @@protoc_insertion_point(field_set_allocated:Params.fixed_multi_prec)
}
void Params::set_allocated_wishart(::WishartParams* wishart) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_prec_params();
  if (wishart) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(wishart);
    if (message_arena != submessage_arena) {
      wishart = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wishart, submessage_arena);
    }
    set_has_wishart();
    prec_params_.wishart_ = wishart;
  }
  // @@protoc_insertion_point(field_set_allocated:Params.wishart)
}
void Params::set_allocated_fixed_univ_prec(::FixedUnivPrecParams* fixed_univ_prec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_prec_params();
  if (fixed_univ_prec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fixed_univ_prec);
    if (message_arena != submessage_arena) {
      fixed_univ_prec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fixed_univ_prec, submessage_arena);
    }
    set_has_fixed_univ_prec();
    prec_params_.fixed_univ_prec_ = fixed_univ_prec;
  }
  // @@protoc_insertion_point(field_set_allocated:Params.fixed_univ_prec)
}
void Params::set_allocated_gamma_prec(::GammaParams* gamma_prec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_prec_params();
  if (gamma_prec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gamma_prec);
    if (message_arena != submessage_arena) {
      gamma_prec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gamma_prec, submessage_arena);
    }
    set_has_gamma_prec();
    prec_params_.gamma_prec_ = gamma_prec;
  }
  // @@protoc_insertion_point(field_set_allocated:Params.gamma_prec)
}
Params::Params(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Params)
}
Params::Params(const Params& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dpp()) {
    dpp_ = new ::DPPParams(*from.dpp_);
  } else {
    dpp_ = nullptr;
  }
  ::memcpy(&a_, &from.a_,
    static_cast<size_t>(reinterpret_cast<char*>(&prop_sigma_) -
    reinterpret_cast<char*>(&a_)) + sizeof(prop_sigma_));
  clear_has_prec_params();
  switch (from.prec_params_case()) {
    case kFixedMultiPrec: {
      _internal_mutable_fixed_multi_prec()->::FixedMultiPrecParams::MergeFrom(from._internal_fixed_multi_prec());
      break;
    }
    case kWishart: {
      _internal_mutable_wishart()->::WishartParams::MergeFrom(from._internal_wishart());
      break;
    }
    case kFixedUnivPrec: {
      _internal_mutable_fixed_univ_prec()->::FixedUnivPrecParams::MergeFrom(from._internal_fixed_univ_prec());
      break;
    }
    case kGammaPrec: {
      _internal_mutable_gamma_prec()->::GammaParams::MergeFrom(from._internal_gamma_prec());
      break;
    }
    case PREC_PARAMS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Params)
}

void Params::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Params_params_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&dpp_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&prop_sigma_) -
      reinterpret_cast<char*>(&dpp_)) + sizeof(prop_sigma_));
  clear_has_prec_params();
}

Params::~Params() {
  // @@protoc_insertion_point(destructor:Params)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Params::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete dpp_;
  if (has_prec_params()) {
    clear_prec_params();
  }
}

void Params::ArenaDtor(void* object) {
  Params* _this = reinterpret_cast< Params* >(object);
  (void)_this;
}
void Params::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Params::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Params& Params::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Params_params_2eproto.base);
  return *internal_default_instance();
}


void Params::clear_prec_params() {
// @@protoc_insertion_point(one_of_clear_start:Params)
  switch (prec_params_case()) {
    case kFixedMultiPrec: {
      if (GetArena() == nullptr) {
        delete prec_params_.fixed_multi_prec_;
      }
      break;
    }
    case kWishart: {
      if (GetArena() == nullptr) {
        delete prec_params_.wishart_;
      }
      break;
    }
    case kFixedUnivPrec: {
      if (GetArena() == nullptr) {
        delete prec_params_.fixed_univ_prec_;
      }
      break;
    }
    case kGammaPrec: {
      if (GetArena() == nullptr) {
        delete prec_params_.gamma_prec_;
      }
      break;
    }
    case PREC_PARAMS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PREC_PARAMS_NOT_SET;
}


void Params::Clear() {
// @@protoc_insertion_point(message_clear_start:Params)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && dpp_ != nullptr) {
    delete dpp_;
  }
  dpp_ = nullptr;
  ::memset(&a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prop_sigma_) -
      reinterpret_cast<char*>(&a_)) + sizeof(prop_sigma_));
  clear_prec_params();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Params::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DPPParams dpp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dpp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .FixedMultiPrecParams fixed_multi_prec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fixed_multi_prec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .WishartParams wishart = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_wishart(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .FixedUnivPrecParams fixed_univ_prec = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_fixed_univ_prec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GammaParams gamma_prec = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamma_prec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dimf = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          dimf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double a = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double alphajump = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          alphajump_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double betajump = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          betajump_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double agamma = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          agamma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double bgamma = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          bgamma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double prop_sigma = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          prop_sigma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Params::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Params)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DPPParams dpp = 1;
  if (this->has_dpp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::dpp(this), target, stream);
  }

  // .FixedMultiPrecParams fixed_multi_prec = 2;
  if (_internal_has_fixed_multi_prec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::fixed_multi_prec(this), target, stream);
  }

  // .WishartParams wishart = 3;
  if (_internal_has_wishart()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::wishart(this), target, stream);
  }

  // .FixedUnivPrecParams fixed_univ_prec = 4;
  if (_internal_has_fixed_univ_prec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::fixed_univ_prec(this), target, stream);
  }

  // .GammaParams gamma_prec = 5;
  if (_internal_has_gamma_prec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::gamma_prec(this), target, stream);
  }

  // int32 dimf = 6;
  if (this->dimf() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_dimf(), target);
  }

  // double a = 7;
  if (!(this->a() <= 0 && this->a() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_a(), target);
  }

  // double alphajump = 8;
  if (!(this->alphajump() <= 0 && this->alphajump() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_alphajump(), target);
  }

  // double betajump = 9;
  if (!(this->betajump() <= 0 && this->betajump() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_betajump(), target);
  }

  // double agamma = 10;
  if (!(this->agamma() <= 0 && this->agamma() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_agamma(), target);
  }

  // double bgamma = 11;
  if (!(this->bgamma() <= 0 && this->bgamma() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_bgamma(), target);
  }

  // double prop_sigma = 12;
  if (!(this->prop_sigma() <= 0 && this->prop_sigma() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_prop_sigma(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Params)
  return target;
}

size_t Params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Params)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DPPParams dpp = 1;
  if (this->has_dpp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dpp_);
  }

  // double a = 7;
  if (!(this->a() <= 0 && this->a() >= 0)) {
    total_size += 1 + 8;
  }

  // double alphajump = 8;
  if (!(this->alphajump() <= 0 && this->alphajump() >= 0)) {
    total_size += 1 + 8;
  }

  // double betajump = 9;
  if (!(this->betajump() <= 0 && this->betajump() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 dimf = 6;
  if (this->dimf() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dimf());
  }

  // double agamma = 10;
  if (!(this->agamma() <= 0 && this->agamma() >= 0)) {
    total_size += 1 + 8;
  }

  // double bgamma = 11;
  if (!(this->bgamma() <= 0 && this->bgamma() >= 0)) {
    total_size += 1 + 8;
  }

  // double prop_sigma = 12;
  if (!(this->prop_sigma() <= 0 && this->prop_sigma() >= 0)) {
    total_size += 1 + 8;
  }

  switch (prec_params_case()) {
    // .FixedMultiPrecParams fixed_multi_prec = 2;
    case kFixedMultiPrec: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *prec_params_.fixed_multi_prec_);
      break;
    }
    // .WishartParams wishart = 3;
    case kWishart: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *prec_params_.wishart_);
      break;
    }
    // .FixedUnivPrecParams fixed_univ_prec = 4;
    case kFixedUnivPrec: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *prec_params_.fixed_univ_prec_);
      break;
    }
    // .GammaParams gamma_prec = 5;
    case kGammaPrec: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *prec_params_.gamma_prec_);
      break;
    }
    case PREC_PARAMS_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Params::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Params)
  GOOGLE_DCHECK_NE(&from, this);
  const Params* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Params>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Params)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Params)
    MergeFrom(*source);
  }
}

void Params::MergeFrom(const Params& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Params)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dpp()) {
    _internal_mutable_dpp()->::DPPParams::MergeFrom(from._internal_dpp());
  }
  if (!(from.a() <= 0 && from.a() >= 0)) {
    _internal_set_a(from._internal_a());
  }
  if (!(from.alphajump() <= 0 && from.alphajump() >= 0)) {
    _internal_set_alphajump(from._internal_alphajump());
  }
  if (!(from.betajump() <= 0 && from.betajump() >= 0)) {
    _internal_set_betajump(from._internal_betajump());
  }
  if (from.dimf() != 0) {
    _internal_set_dimf(from._internal_dimf());
  }
  if (!(from.agamma() <= 0 && from.agamma() >= 0)) {
    _internal_set_agamma(from._internal_agamma());
  }
  if (!(from.bgamma() <= 0 && from.bgamma() >= 0)) {
    _internal_set_bgamma(from._internal_bgamma());
  }
  if (!(from.prop_sigma() <= 0 && from.prop_sigma() >= 0)) {
    _internal_set_prop_sigma(from._internal_prop_sigma());
  }
  switch (from.prec_params_case()) {
    case kFixedMultiPrec: {
      _internal_mutable_fixed_multi_prec()->::FixedMultiPrecParams::MergeFrom(from._internal_fixed_multi_prec());
      break;
    }
    case kWishart: {
      _internal_mutable_wishart()->::WishartParams::MergeFrom(from._internal_wishart());
      break;
    }
    case kFixedUnivPrec: {
      _internal_mutable_fixed_univ_prec()->::FixedUnivPrecParams::MergeFrom(from._internal_fixed_univ_prec());
      break;
    }
    case kGammaPrec: {
      _internal_mutable_gamma_prec()->::GammaParams::MergeFrom(from._internal_gamma_prec());
      break;
    }
    case PREC_PARAMS_NOT_SET: {
      break;
    }
  }
}

void Params::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Params::CopyFrom(const Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Params::IsInitialized() const {
  return true;
}

void Params::InternalSwap(Params* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Params, prop_sigma_)
      + sizeof(Params::prop_sigma_)
      - PROTOBUF_FIELD_OFFSET(Params, dpp_)>(
          reinterpret_cast<char*>(&dpp_),
          reinterpret_cast<char*>(&other->dpp_));
  swap(prec_params_, other->prec_params_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Params::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::WishartParams* Arena::CreateMaybeMessage< ::WishartParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WishartParams >(arena);
}
template<> PROTOBUF_NOINLINE ::FixedMultiPrecParams* Arena::CreateMaybeMessage< ::FixedMultiPrecParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FixedMultiPrecParams >(arena);
}
template<> PROTOBUF_NOINLINE ::FixedUnivPrecParams* Arena::CreateMaybeMessage< ::FixedUnivPrecParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FixedUnivPrecParams >(arena);
}
template<> PROTOBUF_NOINLINE ::GammaParams* Arena::CreateMaybeMessage< ::GammaParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GammaParams >(arena);
}
template<> PROTOBUF_NOINLINE ::DPPParams* Arena::CreateMaybeMessage< ::DPPParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DPPParams >(arena);
}
template<> PROTOBUF_NOINLINE ::Params* Arena::CreateMaybeMessage< ::Params >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Params >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
